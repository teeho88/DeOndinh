
IMU_50.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fbc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08004144  08004144  00014144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004164  08004164  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004164  08004164  00014164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800416c  0800416c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800416c  0800416c  0001416c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004170  08004170  00014170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004174  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000003c8  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200003d4  200003d4  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ecff  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e53  00000000  00000000  0002ed3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d50  00000000  00000000  00030b90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ca8  00000000  00000000  000318e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001be2  00000000  00000000  00032588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f0e9  00000000  00000000  0003416a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d7758  00000000  00000000  00043253  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011a9ab  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000389c  00000000  00000000  0011a9fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800412c 	.word	0x0800412c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800412c 	.word	0x0800412c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <HAL_UART_RxCpltCallback>:
uint16_t rxLastPos1 = 0, rxThisPos1 = 0;
uint8_t rxRing2[2*BUFFER_SIZE_2];
uint16_t rxLastPos2 = 0, rxThisPos2 = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	4a0e      	ldr	r2, [pc, #56]	; (8000514 <HAL_UART_RxCpltCallback+0x48>)
 80004da:	4293      	cmp	r3, r2
 80004dc:	d108      	bne.n	80004f0 <HAL_UART_RxCpltCallback+0x24>
		if (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE)) {
 80004de:	4b0e      	ldr	r3, [pc, #56]	; (8000518 <HAL_UART_RxCpltCallback+0x4c>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	f003 0310 	and.w	r3, r3, #16
 80004e8:	2b10      	cmp	r3, #16
 80004ea:	d101      	bne.n	80004f0 <HAL_UART_RxCpltCallback+0x24>
			UART1Complete();
 80004ec:	f000 f81a 	bl	8000524 <UART1Complete>
		}
	}
	if (huart->Instance == USART2) {
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4a09      	ldr	r2, [pc, #36]	; (800051c <HAL_UART_RxCpltCallback+0x50>)
 80004f6:	4293      	cmp	r3, r2
 80004f8:	d108      	bne.n	800050c <HAL_UART_RxCpltCallback+0x40>
		if (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_IDLE)) {
 80004fa:	4b09      	ldr	r3, [pc, #36]	; (8000520 <HAL_UART_RxCpltCallback+0x54>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	f003 0310 	and.w	r3, r3, #16
 8000504:	2b10      	cmp	r3, #16
 8000506:	d101      	bne.n	800050c <HAL_UART_RxCpltCallback+0x40>
			UART2Complete();
 8000508:	f000 f85a 	bl	80005c0 <UART2Complete>
		}
	}
}
 800050c:	bf00      	nop
 800050e:	3708      	adds	r7, #8
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}
 8000514:	40011000 	.word	0x40011000
 8000518:	20000190 	.word	0x20000190
 800051c:	40004400 	.word	0x40004400
 8000520:	200001d4 	.word	0x200001d4

08000524 <UART1Complete>:

void UART1Complete(void) {
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
  uint16_t len;
  rxThisPos1 = sizeof(rxRing1) - __HAL_DMA_GET_COUNTER(&hdma_usart1_rx); //get current write pointer
 800052a:	4b20      	ldr	r3, [pc, #128]	; (80005ac <UART1Complete+0x88>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	685b      	ldr	r3, [r3, #4]
 8000530:	b29b      	uxth	r3, r3
 8000532:	f1c3 0328 	rsb	r3, r3, #40	; 0x28
 8000536:	b29a      	uxth	r2, r3
 8000538:	4b1d      	ldr	r3, [pc, #116]	; (80005b0 <UART1Complete+0x8c>)
 800053a:	801a      	strh	r2, [r3, #0]
  if(rxThisPos1 > rxLastPos1)
 800053c:	4b1c      	ldr	r3, [pc, #112]	; (80005b0 <UART1Complete+0x8c>)
 800053e:	881a      	ldrh	r2, [r3, #0]
 8000540:	4b1c      	ldr	r3, [pc, #112]	; (80005b4 <UART1Complete+0x90>)
 8000542:	881b      	ldrh	r3, [r3, #0]
 8000544:	429a      	cmp	r2, r3
 8000546:	d910      	bls.n	800056a <UART1Complete+0x46>
  {
	  len = rxThisPos1 - rxLastPos1; //calculate how far the DMA write pointer has moved
 8000548:	4b19      	ldr	r3, [pc, #100]	; (80005b0 <UART1Complete+0x8c>)
 800054a:	881a      	ldrh	r2, [r3, #0]
 800054c:	4b19      	ldr	r3, [pc, #100]	; (80005b4 <UART1Complete+0x90>)
 800054e:	881b      	ldrh	r3, [r3, #0]
 8000550:	1ad3      	subs	r3, r2, r3
 8000552:	80fb      	strh	r3, [r7, #6]
	  memcpy(inData1, (rxRing1 + rxLastPos1), len);
 8000554:	4b17      	ldr	r3, [pc, #92]	; (80005b4 <UART1Complete+0x90>)
 8000556:	881b      	ldrh	r3, [r3, #0]
 8000558:	461a      	mov	r2, r3
 800055a:	4b17      	ldr	r3, [pc, #92]	; (80005b8 <UART1Complete+0x94>)
 800055c:	4413      	add	r3, r2
 800055e:	88fa      	ldrh	r2, [r7, #6]
 8000560:	4619      	mov	r1, r3
 8000562:	4816      	ldr	r0, [pc, #88]	; (80005bc <UART1Complete+0x98>)
 8000564:	f003 fdcc 	bl	8004100 <memcpy>
 8000568:	e017      	b.n	800059a <UART1Complete+0x76>
  }
  else
  {
	  len = sizeof(rxRing1) - rxLastPos1;
 800056a:	4b12      	ldr	r3, [pc, #72]	; (80005b4 <UART1Complete+0x90>)
 800056c:	881b      	ldrh	r3, [r3, #0]
 800056e:	f1c3 0328 	rsb	r3, r3, #40	; 0x28
 8000572:	80fb      	strh	r3, [r7, #6]
	  memcpy(inData1, (rxRing1 + rxLastPos1), len);
 8000574:	4b0f      	ldr	r3, [pc, #60]	; (80005b4 <UART1Complete+0x90>)
 8000576:	881b      	ldrh	r3, [r3, #0]
 8000578:	461a      	mov	r2, r3
 800057a:	4b0f      	ldr	r3, [pc, #60]	; (80005b8 <UART1Complete+0x94>)
 800057c:	4413      	add	r3, r2
 800057e:	88fa      	ldrh	r2, [r7, #6]
 8000580:	4619      	mov	r1, r3
 8000582:	480e      	ldr	r0, [pc, #56]	; (80005bc <UART1Complete+0x98>)
 8000584:	f003 fdbc 	bl	8004100 <memcpy>
	  memcpy((inData1 +  len), rxRing1, rxThisPos1);
 8000588:	88fb      	ldrh	r3, [r7, #6]
 800058a:	4a0c      	ldr	r2, [pc, #48]	; (80005bc <UART1Complete+0x98>)
 800058c:	4413      	add	r3, r2
 800058e:	4a08      	ldr	r2, [pc, #32]	; (80005b0 <UART1Complete+0x8c>)
 8000590:	8812      	ldrh	r2, [r2, #0]
 8000592:	4909      	ldr	r1, [pc, #36]	; (80005b8 <UART1Complete+0x94>)
 8000594:	4618      	mov	r0, r3
 8000596:	f003 fdb3 	bl	8004100 <memcpy>

  }
  rxLastPos1 = rxThisPos1;
 800059a:	4b05      	ldr	r3, [pc, #20]	; (80005b0 <UART1Complete+0x8c>)
 800059c:	881a      	ldrh	r2, [r3, #0]
 800059e:	4b05      	ldr	r3, [pc, #20]	; (80005b4 <UART1Complete+0x90>)
 80005a0:	801a      	strh	r2, [r3, #0]
}
 80005a2:	bf00      	nop
 80005a4:	3708      	adds	r7, #8
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	20000218 	.word	0x20000218
 80005b0:	20000302 	.word	0x20000302
 80005b4:	20000300 	.word	0x20000300
 80005b8:	200002d8 	.word	0x200002d8
 80005bc:	20000028 	.word	0x20000028

080005c0 <UART2Complete>:

void UART2Complete(void) {
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
  uint16_t len;
  rxThisPos2 = sizeof(rxRing2) - __HAL_DMA_GET_COUNTER(&hdma_usart2_rx); //get current write pointer
 80005c6:	4b20      	ldr	r3, [pc, #128]	; (8000648 <UART2Complete+0x88>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	685b      	ldr	r3, [r3, #4]
 80005cc:	b29b      	uxth	r3, r3
 80005ce:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 80005d2:	b29a      	uxth	r2, r3
 80005d4:	4b1d      	ldr	r3, [pc, #116]	; (800064c <UART2Complete+0x8c>)
 80005d6:	801a      	strh	r2, [r3, #0]
  if(rxThisPos2 > rxLastPos2)
 80005d8:	4b1c      	ldr	r3, [pc, #112]	; (800064c <UART2Complete+0x8c>)
 80005da:	881a      	ldrh	r2, [r3, #0]
 80005dc:	4b1c      	ldr	r3, [pc, #112]	; (8000650 <UART2Complete+0x90>)
 80005de:	881b      	ldrh	r3, [r3, #0]
 80005e0:	429a      	cmp	r2, r3
 80005e2:	d910      	bls.n	8000606 <UART2Complete+0x46>
  {
	  len = rxThisPos2 - rxLastPos2; //calculate how far the DMA write pointer has moved
 80005e4:	4b19      	ldr	r3, [pc, #100]	; (800064c <UART2Complete+0x8c>)
 80005e6:	881a      	ldrh	r2, [r3, #0]
 80005e8:	4b19      	ldr	r3, [pc, #100]	; (8000650 <UART2Complete+0x90>)
 80005ea:	881b      	ldrh	r3, [r3, #0]
 80005ec:	1ad3      	subs	r3, r2, r3
 80005ee:	80fb      	strh	r3, [r7, #6]
	  memcpy(inData2, (rxRing2 + rxLastPos2), len);
 80005f0:	4b17      	ldr	r3, [pc, #92]	; (8000650 <UART2Complete+0x90>)
 80005f2:	881b      	ldrh	r3, [r3, #0]
 80005f4:	461a      	mov	r2, r3
 80005f6:	4b17      	ldr	r3, [pc, #92]	; (8000654 <UART2Complete+0x94>)
 80005f8:	4413      	add	r3, r2
 80005fa:	88fa      	ldrh	r2, [r7, #6]
 80005fc:	4619      	mov	r1, r3
 80005fe:	4816      	ldr	r0, [pc, #88]	; (8000658 <UART2Complete+0x98>)
 8000600:	f003 fd7e 	bl	8004100 <memcpy>
 8000604:	e017      	b.n	8000636 <UART2Complete+0x76>
  }
  else
  {
	  len = sizeof(rxRing2) - rxLastPos2;
 8000606:	4b12      	ldr	r3, [pc, #72]	; (8000650 <UART2Complete+0x90>)
 8000608:	881b      	ldrh	r3, [r3, #0]
 800060a:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 800060e:	80fb      	strh	r3, [r7, #6]
	  memcpy(inData2, (rxRing2 + rxLastPos2), len);
 8000610:	4b0f      	ldr	r3, [pc, #60]	; (8000650 <UART2Complete+0x90>)
 8000612:	881b      	ldrh	r3, [r3, #0]
 8000614:	461a      	mov	r2, r3
 8000616:	4b0f      	ldr	r3, [pc, #60]	; (8000654 <UART2Complete+0x94>)
 8000618:	4413      	add	r3, r2
 800061a:	88fa      	ldrh	r2, [r7, #6]
 800061c:	4619      	mov	r1, r3
 800061e:	480e      	ldr	r0, [pc, #56]	; (8000658 <UART2Complete+0x98>)
 8000620:	f003 fd6e 	bl	8004100 <memcpy>
	  memcpy((inData2 +  len), rxRing2, rxThisPos2);
 8000624:	88fb      	ldrh	r3, [r7, #6]
 8000626:	4a0c      	ldr	r2, [pc, #48]	; (8000658 <UART2Complete+0x98>)
 8000628:	4413      	add	r3, r2
 800062a:	4a08      	ldr	r2, [pc, #32]	; (800064c <UART2Complete+0x8c>)
 800062c:	8812      	ldrh	r2, [r2, #0]
 800062e:	4909      	ldr	r1, [pc, #36]	; (8000654 <UART2Complete+0x94>)
 8000630:	4618      	mov	r0, r3
 8000632:	f003 fd65 	bl	8004100 <memcpy>

  }
  rxLastPos2 = rxThisPos2;
 8000636:	4b05      	ldr	r3, [pc, #20]	; (800064c <UART2Complete+0x8c>)
 8000638:	881a      	ldrh	r2, [r3, #0]
 800063a:	4b05      	ldr	r3, [pc, #20]	; (8000650 <UART2Complete+0x90>)
 800063c:	801a      	strh	r2, [r3, #0]
}
 800063e:	bf00      	nop
 8000640:	3708      	adds	r7, #8
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	20000278 	.word	0x20000278
 800064c:	200003ce 	.word	0x200003ce
 8000650:	200003cc 	.word	0x200003cc
 8000654:	20000304 	.word	0x20000304
 8000658:	2000003c 	.word	0x2000003c

0800065c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000660:	f000 fc70 	bl	8000f44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000664:	f000 f80e 	bl	8000684 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000668:	f000 f9a8 	bl	80009bc <MX_GPIO_Init>
  MX_ADC1_Init();
 800066c:	f000 f874 	bl	8000758 <MX_ADC1_Init>
  MX_DMA_Init();
 8000670:	f000 f966 	bl	8000940 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000674:	f000 f93a 	bl	80008ec <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000678:	f000 f90e 	bl	8000898 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 800067c:	f000 f8be 	bl	80007fc <MX_TIM2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000680:	e7fe      	b.n	8000680 <main+0x24>
	...

08000684 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b094      	sub	sp, #80	; 0x50
 8000688:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800068a:	f107 0320 	add.w	r3, r7, #32
 800068e:	2230      	movs	r2, #48	; 0x30
 8000690:	2100      	movs	r1, #0
 8000692:	4618      	mov	r0, r3
 8000694:	f003 fd42 	bl	800411c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000698:	f107 030c 	add.w	r3, r7, #12
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	605a      	str	r2, [r3, #4]
 80006a2:	609a      	str	r2, [r3, #8]
 80006a4:	60da      	str	r2, [r3, #12]
 80006a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a8:	2300      	movs	r3, #0
 80006aa:	60bb      	str	r3, [r7, #8]
 80006ac:	4b28      	ldr	r3, [pc, #160]	; (8000750 <SystemClock_Config+0xcc>)
 80006ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b0:	4a27      	ldr	r2, [pc, #156]	; (8000750 <SystemClock_Config+0xcc>)
 80006b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006b6:	6413      	str	r3, [r2, #64]	; 0x40
 80006b8:	4b25      	ldr	r3, [pc, #148]	; (8000750 <SystemClock_Config+0xcc>)
 80006ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006c0:	60bb      	str	r3, [r7, #8]
 80006c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006c4:	2300      	movs	r3, #0
 80006c6:	607b      	str	r3, [r7, #4]
 80006c8:	4b22      	ldr	r3, [pc, #136]	; (8000754 <SystemClock_Config+0xd0>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a21      	ldr	r2, [pc, #132]	; (8000754 <SystemClock_Config+0xd0>)
 80006ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006d2:	6013      	str	r3, [r2, #0]
 80006d4:	4b1f      	ldr	r3, [pc, #124]	; (8000754 <SystemClock_Config+0xd0>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006dc:	607b      	str	r3, [r7, #4]
 80006de:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006e0:	2301      	movs	r3, #1
 80006e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006e8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ea:	2302      	movs	r3, #2
 80006ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006f4:	2304      	movs	r3, #4
 80006f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006f8:	23a8      	movs	r3, #168	; 0xa8
 80006fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006fc:	2302      	movs	r3, #2
 80006fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000700:	2304      	movs	r3, #4
 8000702:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000704:	f107 0320 	add.w	r3, r7, #32
 8000708:	4618      	mov	r0, r3
 800070a:	f001 fd19 	bl	8002140 <HAL_RCC_OscConfig>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000714:	f000 f97a 	bl	8000a0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000718:	230f      	movs	r3, #15
 800071a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800071c:	2302      	movs	r3, #2
 800071e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000720:	2300      	movs	r3, #0
 8000722:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000724:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000728:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800072a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800072e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000730:	f107 030c 	add.w	r3, r7, #12
 8000734:	2105      	movs	r1, #5
 8000736:	4618      	mov	r0, r3
 8000738:	f001 ff7a 	bl	8002630 <HAL_RCC_ClockConfig>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000742:	f000 f963 	bl	8000a0c <Error_Handler>
  }
}
 8000746:	bf00      	nop
 8000748:	3750      	adds	r7, #80	; 0x50
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	40023800 	.word	0x40023800
 8000754:	40007000 	.word	0x40007000

08000758 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b084      	sub	sp, #16
 800075c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800075e:	463b      	mov	r3, r7
 8000760:	2200      	movs	r2, #0
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	605a      	str	r2, [r3, #4]
 8000766:	609a      	str	r2, [r3, #8]
 8000768:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800076a:	4b21      	ldr	r3, [pc, #132]	; (80007f0 <MX_ADC1_Init+0x98>)
 800076c:	4a21      	ldr	r2, [pc, #132]	; (80007f4 <MX_ADC1_Init+0x9c>)
 800076e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000770:	4b1f      	ldr	r3, [pc, #124]	; (80007f0 <MX_ADC1_Init+0x98>)
 8000772:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000776:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000778:	4b1d      	ldr	r3, [pc, #116]	; (80007f0 <MX_ADC1_Init+0x98>)
 800077a:	2200      	movs	r2, #0
 800077c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800077e:	4b1c      	ldr	r3, [pc, #112]	; (80007f0 <MX_ADC1_Init+0x98>)
 8000780:	2200      	movs	r2, #0
 8000782:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000784:	4b1a      	ldr	r3, [pc, #104]	; (80007f0 <MX_ADC1_Init+0x98>)
 8000786:	2201      	movs	r2, #1
 8000788:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800078a:	4b19      	ldr	r3, [pc, #100]	; (80007f0 <MX_ADC1_Init+0x98>)
 800078c:	2200      	movs	r2, #0
 800078e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000792:	4b17      	ldr	r3, [pc, #92]	; (80007f0 <MX_ADC1_Init+0x98>)
 8000794:	2200      	movs	r2, #0
 8000796:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000798:	4b15      	ldr	r3, [pc, #84]	; (80007f0 <MX_ADC1_Init+0x98>)
 800079a:	4a17      	ldr	r2, [pc, #92]	; (80007f8 <MX_ADC1_Init+0xa0>)
 800079c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800079e:	4b14      	ldr	r3, [pc, #80]	; (80007f0 <MX_ADC1_Init+0x98>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80007a4:	4b12      	ldr	r3, [pc, #72]	; (80007f0 <MX_ADC1_Init+0x98>)
 80007a6:	2201      	movs	r2, #1
 80007a8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007aa:	4b11      	ldr	r3, [pc, #68]	; (80007f0 <MX_ADC1_Init+0x98>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007b2:	4b0f      	ldr	r3, [pc, #60]	; (80007f0 <MX_ADC1_Init+0x98>)
 80007b4:	2201      	movs	r2, #1
 80007b6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007b8:	480d      	ldr	r0, [pc, #52]	; (80007f0 <MX_ADC1_Init+0x98>)
 80007ba:	f000 fc35 	bl	8001028 <HAL_ADC_Init>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80007c4:	f000 f922 	bl	8000a0c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80007c8:	2300      	movs	r3, #0
 80007ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80007cc:	2301      	movs	r3, #1
 80007ce:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007d0:	2300      	movs	r3, #0
 80007d2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007d4:	463b      	mov	r3, r7
 80007d6:	4619      	mov	r1, r3
 80007d8:	4805      	ldr	r0, [pc, #20]	; (80007f0 <MX_ADC1_Init+0x98>)
 80007da:	f000 fc69 	bl	80010b0 <HAL_ADC_ConfigChannel>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80007e4:	f000 f912 	bl	8000a0c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007e8:	bf00      	nop
 80007ea:	3710      	adds	r7, #16
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	200000a0 	.word	0x200000a0
 80007f4:	40012000 	.word	0x40012000
 80007f8:	0f000001 	.word	0x0f000001

080007fc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b086      	sub	sp, #24
 8000800:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000802:	f107 0308 	add.w	r3, r7, #8
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
 800080a:	605a      	str	r2, [r3, #4]
 800080c:	609a      	str	r2, [r3, #8]
 800080e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000810:	463b      	mov	r3, r7
 8000812:	2200      	movs	r2, #0
 8000814:	601a      	str	r2, [r3, #0]
 8000816:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000818:	4b1d      	ldr	r3, [pc, #116]	; (8000890 <MX_TIM2_Init+0x94>)
 800081a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800081e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 8000820:	4b1b      	ldr	r3, [pc, #108]	; (8000890 <MX_TIM2_Init+0x94>)
 8000822:	2263      	movs	r2, #99	; 0x63
 8000824:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000826:	4b1a      	ldr	r3, [pc, #104]	; (8000890 <MX_TIM2_Init+0x94>)
 8000828:	2200      	movs	r2, #0
 800082a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3599999999;
 800082c:	4b18      	ldr	r3, [pc, #96]	; (8000890 <MX_TIM2_Init+0x94>)
 800082e:	4a19      	ldr	r2, [pc, #100]	; (8000894 <MX_TIM2_Init+0x98>)
 8000830:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000832:	4b17      	ldr	r3, [pc, #92]	; (8000890 <MX_TIM2_Init+0x94>)
 8000834:	2200      	movs	r2, #0
 8000836:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000838:	4b15      	ldr	r3, [pc, #84]	; (8000890 <MX_TIM2_Init+0x94>)
 800083a:	2200      	movs	r2, #0
 800083c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800083e:	4814      	ldr	r0, [pc, #80]	; (8000890 <MX_TIM2_Init+0x94>)
 8000840:	f002 f916 	bl	8002a70 <HAL_TIM_Base_Init>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 800084a:	f000 f8df 	bl	8000a0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800084e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000852:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000854:	f107 0308 	add.w	r3, r7, #8
 8000858:	4619      	mov	r1, r3
 800085a:	480d      	ldr	r0, [pc, #52]	; (8000890 <MX_TIM2_Init+0x94>)
 800085c:	f002 fa5f 	bl	8002d1e <HAL_TIM_ConfigClockSource>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8000866:	f000 f8d1 	bl	8000a0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800086a:	2300      	movs	r3, #0
 800086c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800086e:	2300      	movs	r3, #0
 8000870:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000872:	463b      	mov	r3, r7
 8000874:	4619      	mov	r1, r3
 8000876:	4806      	ldr	r0, [pc, #24]	; (8000890 <MX_TIM2_Init+0x94>)
 8000878:	f002 fc84 	bl	8003184 <HAL_TIMEx_MasterConfigSynchronization>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8000882:	f000 f8c3 	bl	8000a0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000886:	bf00      	nop
 8000888:	3718      	adds	r7, #24
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	20000148 	.word	0x20000148
 8000894:	d693a3ff 	.word	0xd693a3ff

08000898 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800089c:	4b11      	ldr	r3, [pc, #68]	; (80008e4 <MX_USART1_UART_Init+0x4c>)
 800089e:	4a12      	ldr	r2, [pc, #72]	; (80008e8 <MX_USART1_UART_Init+0x50>)
 80008a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80008a2:	4b10      	ldr	r3, [pc, #64]	; (80008e4 <MX_USART1_UART_Init+0x4c>)
 80008a4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80008a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008aa:	4b0e      	ldr	r3, [pc, #56]	; (80008e4 <MX_USART1_UART_Init+0x4c>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008b0:	4b0c      	ldr	r3, [pc, #48]	; (80008e4 <MX_USART1_UART_Init+0x4c>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008b6:	4b0b      	ldr	r3, [pc, #44]	; (80008e4 <MX_USART1_UART_Init+0x4c>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008bc:	4b09      	ldr	r3, [pc, #36]	; (80008e4 <MX_USART1_UART_Init+0x4c>)
 80008be:	220c      	movs	r2, #12
 80008c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008c2:	4b08      	ldr	r3, [pc, #32]	; (80008e4 <MX_USART1_UART_Init+0x4c>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008c8:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <MX_USART1_UART_Init+0x4c>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008ce:	4805      	ldr	r0, [pc, #20]	; (80008e4 <MX_USART1_UART_Init+0x4c>)
 80008d0:	f002 fce8 	bl	80032a4 <HAL_UART_Init>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80008da:	f000 f897 	bl	8000a0c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008de:	bf00      	nop
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	20000190 	.word	0x20000190
 80008e8:	40011000 	.word	0x40011000

080008ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008f0:	4b11      	ldr	r3, [pc, #68]	; (8000938 <MX_USART2_UART_Init+0x4c>)
 80008f2:	4a12      	ldr	r2, [pc, #72]	; (800093c <MX_USART2_UART_Init+0x50>)
 80008f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008f6:	4b10      	ldr	r3, [pc, #64]	; (8000938 <MX_USART2_UART_Init+0x4c>)
 80008f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008fe:	4b0e      	ldr	r3, [pc, #56]	; (8000938 <MX_USART2_UART_Init+0x4c>)
 8000900:	2200      	movs	r2, #0
 8000902:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000904:	4b0c      	ldr	r3, [pc, #48]	; (8000938 <MX_USART2_UART_Init+0x4c>)
 8000906:	2200      	movs	r2, #0
 8000908:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800090a:	4b0b      	ldr	r3, [pc, #44]	; (8000938 <MX_USART2_UART_Init+0x4c>)
 800090c:	2200      	movs	r2, #0
 800090e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000910:	4b09      	ldr	r3, [pc, #36]	; (8000938 <MX_USART2_UART_Init+0x4c>)
 8000912:	220c      	movs	r2, #12
 8000914:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000916:	4b08      	ldr	r3, [pc, #32]	; (8000938 <MX_USART2_UART_Init+0x4c>)
 8000918:	2200      	movs	r2, #0
 800091a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800091c:	4b06      	ldr	r3, [pc, #24]	; (8000938 <MX_USART2_UART_Init+0x4c>)
 800091e:	2200      	movs	r2, #0
 8000920:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000922:	4805      	ldr	r0, [pc, #20]	; (8000938 <MX_USART2_UART_Init+0x4c>)
 8000924:	f002 fcbe 	bl	80032a4 <HAL_UART_Init>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800092e:	f000 f86d 	bl	8000a0c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	200001d4 	.word	0x200001d4
 800093c:	40004400 	.word	0x40004400

08000940 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	607b      	str	r3, [r7, #4]
 800094a:	4b1b      	ldr	r3, [pc, #108]	; (80009b8 <MX_DMA_Init+0x78>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	4a1a      	ldr	r2, [pc, #104]	; (80009b8 <MX_DMA_Init+0x78>)
 8000950:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000954:	6313      	str	r3, [r2, #48]	; 0x30
 8000956:	4b18      	ldr	r3, [pc, #96]	; (80009b8 <MX_DMA_Init+0x78>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800095e:	607b      	str	r3, [r7, #4]
 8000960:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	603b      	str	r3, [r7, #0]
 8000966:	4b14      	ldr	r3, [pc, #80]	; (80009b8 <MX_DMA_Init+0x78>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	4a13      	ldr	r2, [pc, #76]	; (80009b8 <MX_DMA_Init+0x78>)
 800096c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000970:	6313      	str	r3, [r2, #48]	; 0x30
 8000972:	4b11      	ldr	r3, [pc, #68]	; (80009b8 <MX_DMA_Init+0x78>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800097a:	603b      	str	r3, [r7, #0]
 800097c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800097e:	2200      	movs	r2, #0
 8000980:	2100      	movs	r1, #0
 8000982:	2010      	movs	r0, #16
 8000984:	f000 fe8d 	bl	80016a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000988:	2010      	movs	r0, #16
 800098a:	f000 fea6 	bl	80016da <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800098e:	2200      	movs	r2, #0
 8000990:	2100      	movs	r1, #0
 8000992:	2038      	movs	r0, #56	; 0x38
 8000994:	f000 fe85 	bl	80016a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000998:	2038      	movs	r0, #56	; 0x38
 800099a:	f000 fe9e 	bl	80016da <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800099e:	2200      	movs	r2, #0
 80009a0:	2100      	movs	r1, #0
 80009a2:	203a      	movs	r0, #58	; 0x3a
 80009a4:	f000 fe7d 	bl	80016a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80009a8:	203a      	movs	r0, #58	; 0x3a
 80009aa:	f000 fe96 	bl	80016da <HAL_NVIC_EnableIRQ>

}
 80009ae:	bf00      	nop
 80009b0:	3708      	adds	r7, #8
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	40023800 	.word	0x40023800

080009bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	607b      	str	r3, [r7, #4]
 80009c6:	4b10      	ldr	r3, [pc, #64]	; (8000a08 <MX_GPIO_Init+0x4c>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	4a0f      	ldr	r2, [pc, #60]	; (8000a08 <MX_GPIO_Init+0x4c>)
 80009cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009d0:	6313      	str	r3, [r2, #48]	; 0x30
 80009d2:	4b0d      	ldr	r3, [pc, #52]	; (8000a08 <MX_GPIO_Init+0x4c>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009da:	607b      	str	r3, [r7, #4]
 80009dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	603b      	str	r3, [r7, #0]
 80009e2:	4b09      	ldr	r3, [pc, #36]	; (8000a08 <MX_GPIO_Init+0x4c>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	4a08      	ldr	r2, [pc, #32]	; (8000a08 <MX_GPIO_Init+0x4c>)
 80009e8:	f043 0301 	orr.w	r3, r3, #1
 80009ec:	6313      	str	r3, [r2, #48]	; 0x30
 80009ee:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <MX_GPIO_Init+0x4c>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	f003 0301 	and.w	r3, r3, #1
 80009f6:	603b      	str	r3, [r7, #0]
 80009f8:	683b      	ldr	r3, [r7, #0]

}
 80009fa:	bf00      	nop
 80009fc:	370c      	adds	r7, #12
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	40023800 	.word	0x40023800

08000a0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a10:	b672      	cpsid	i
}
 8000a12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a14:	e7fe      	b.n	8000a14 <Error_Handler+0x8>
	...

08000a18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	607b      	str	r3, [r7, #4]
 8000a22:	4b10      	ldr	r3, [pc, #64]	; (8000a64 <HAL_MspInit+0x4c>)
 8000a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a26:	4a0f      	ldr	r2, [pc, #60]	; (8000a64 <HAL_MspInit+0x4c>)
 8000a28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a2c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a2e:	4b0d      	ldr	r3, [pc, #52]	; (8000a64 <HAL_MspInit+0x4c>)
 8000a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a36:	607b      	str	r3, [r7, #4]
 8000a38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	603b      	str	r3, [r7, #0]
 8000a3e:	4b09      	ldr	r3, [pc, #36]	; (8000a64 <HAL_MspInit+0x4c>)
 8000a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a42:	4a08      	ldr	r2, [pc, #32]	; (8000a64 <HAL_MspInit+0x4c>)
 8000a44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a48:	6413      	str	r3, [r2, #64]	; 0x40
 8000a4a:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <HAL_MspInit+0x4c>)
 8000a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a52:	603b      	str	r3, [r7, #0]
 8000a54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a56:	bf00      	nop
 8000a58:	370c      	adds	r7, #12
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	40023800 	.word	0x40023800

08000a68 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b08a      	sub	sp, #40	; 0x28
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a70:	f107 0314 	add.w	r3, r7, #20
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
 8000a78:	605a      	str	r2, [r3, #4]
 8000a7a:	609a      	str	r2, [r3, #8]
 8000a7c:	60da      	str	r2, [r3, #12]
 8000a7e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a2f      	ldr	r2, [pc, #188]	; (8000b44 <HAL_ADC_MspInit+0xdc>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d157      	bne.n	8000b3a <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	613b      	str	r3, [r7, #16]
 8000a8e:	4b2e      	ldr	r3, [pc, #184]	; (8000b48 <HAL_ADC_MspInit+0xe0>)
 8000a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a92:	4a2d      	ldr	r2, [pc, #180]	; (8000b48 <HAL_ADC_MspInit+0xe0>)
 8000a94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a98:	6453      	str	r3, [r2, #68]	; 0x44
 8000a9a:	4b2b      	ldr	r3, [pc, #172]	; (8000b48 <HAL_ADC_MspInit+0xe0>)
 8000a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000aa2:	613b      	str	r3, [r7, #16]
 8000aa4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	60fb      	str	r3, [r7, #12]
 8000aaa:	4b27      	ldr	r3, [pc, #156]	; (8000b48 <HAL_ADC_MspInit+0xe0>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	4a26      	ldr	r2, [pc, #152]	; (8000b48 <HAL_ADC_MspInit+0xe0>)
 8000ab0:	f043 0301 	orr.w	r3, r3, #1
 8000ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab6:	4b24      	ldr	r3, [pc, #144]	; (8000b48 <HAL_ADC_MspInit+0xe0>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	f003 0301 	and.w	r3, r3, #1
 8000abe:	60fb      	str	r3, [r7, #12]
 8000ac0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ac6:	2303      	movs	r3, #3
 8000ac8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ace:	f107 0314 	add.w	r3, r7, #20
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	481d      	ldr	r0, [pc, #116]	; (8000b4c <HAL_ADC_MspInit+0xe4>)
 8000ad6:	f001 f997 	bl	8001e08 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000ada:	4b1d      	ldr	r3, [pc, #116]	; (8000b50 <HAL_ADC_MspInit+0xe8>)
 8000adc:	4a1d      	ldr	r2, [pc, #116]	; (8000b54 <HAL_ADC_MspInit+0xec>)
 8000ade:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000ae0:	4b1b      	ldr	r3, [pc, #108]	; (8000b50 <HAL_ADC_MspInit+0xe8>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ae6:	4b1a      	ldr	r3, [pc, #104]	; (8000b50 <HAL_ADC_MspInit+0xe8>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000aec:	4b18      	ldr	r3, [pc, #96]	; (8000b50 <HAL_ADC_MspInit+0xe8>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000af2:	4b17      	ldr	r3, [pc, #92]	; (8000b50 <HAL_ADC_MspInit+0xe8>)
 8000af4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000af8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000afa:	4b15      	ldr	r3, [pc, #84]	; (8000b50 <HAL_ADC_MspInit+0xe8>)
 8000afc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b00:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b02:	4b13      	ldr	r3, [pc, #76]	; (8000b50 <HAL_ADC_MspInit+0xe8>)
 8000b04:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b08:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000b0a:	4b11      	ldr	r3, [pc, #68]	; (8000b50 <HAL_ADC_MspInit+0xe8>)
 8000b0c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b10:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000b12:	4b0f      	ldr	r3, [pc, #60]	; (8000b50 <HAL_ADC_MspInit+0xe8>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b18:	4b0d      	ldr	r3, [pc, #52]	; (8000b50 <HAL_ADC_MspInit+0xe8>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000b1e:	480c      	ldr	r0, [pc, #48]	; (8000b50 <HAL_ADC_MspInit+0xe8>)
 8000b20:	f000 fdf6 	bl	8001710 <HAL_DMA_Init>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000b2a:	f7ff ff6f 	bl	8000a0c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	4a07      	ldr	r2, [pc, #28]	; (8000b50 <HAL_ADC_MspInit+0xe8>)
 8000b32:	639a      	str	r2, [r3, #56]	; 0x38
 8000b34:	4a06      	ldr	r2, [pc, #24]	; (8000b50 <HAL_ADC_MspInit+0xe8>)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b3a:	bf00      	nop
 8000b3c:	3728      	adds	r7, #40	; 0x28
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40012000 	.word	0x40012000
 8000b48:	40023800 	.word	0x40023800
 8000b4c:	40020000 	.word	0x40020000
 8000b50:	200000e8 	.word	0x200000e8
 8000b54:	40026410 	.word	0x40026410

08000b58 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b084      	sub	sp, #16
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b68:	d115      	bne.n	8000b96 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	60fb      	str	r3, [r7, #12]
 8000b6e:	4b0c      	ldr	r3, [pc, #48]	; (8000ba0 <HAL_TIM_Base_MspInit+0x48>)
 8000b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b72:	4a0b      	ldr	r2, [pc, #44]	; (8000ba0 <HAL_TIM_Base_MspInit+0x48>)
 8000b74:	f043 0301 	orr.w	r3, r3, #1
 8000b78:	6413      	str	r3, [r2, #64]	; 0x40
 8000b7a:	4b09      	ldr	r3, [pc, #36]	; (8000ba0 <HAL_TIM_Base_MspInit+0x48>)
 8000b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7e:	f003 0301 	and.w	r3, r3, #1
 8000b82:	60fb      	str	r3, [r7, #12]
 8000b84:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000b86:	2200      	movs	r2, #0
 8000b88:	2100      	movs	r1, #0
 8000b8a:	201c      	movs	r0, #28
 8000b8c:	f000 fd89 	bl	80016a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b90:	201c      	movs	r0, #28
 8000b92:	f000 fda2 	bl	80016da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000b96:	bf00      	nop
 8000b98:	3710      	adds	r7, #16
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	40023800 	.word	0x40023800

08000ba4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b08c      	sub	sp, #48	; 0x30
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bac:	f107 031c 	add.w	r3, r7, #28
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	605a      	str	r2, [r3, #4]
 8000bb6:	609a      	str	r2, [r3, #8]
 8000bb8:	60da      	str	r2, [r3, #12]
 8000bba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a69      	ldr	r2, [pc, #420]	; (8000d68 <HAL_UART_MspInit+0x1c4>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d164      	bne.n	8000c90 <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	61bb      	str	r3, [r7, #24]
 8000bca:	4b68      	ldr	r3, [pc, #416]	; (8000d6c <HAL_UART_MspInit+0x1c8>)
 8000bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bce:	4a67      	ldr	r2, [pc, #412]	; (8000d6c <HAL_UART_MspInit+0x1c8>)
 8000bd0:	f043 0310 	orr.w	r3, r3, #16
 8000bd4:	6453      	str	r3, [r2, #68]	; 0x44
 8000bd6:	4b65      	ldr	r3, [pc, #404]	; (8000d6c <HAL_UART_MspInit+0x1c8>)
 8000bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bda:	f003 0310 	and.w	r3, r3, #16
 8000bde:	61bb      	str	r3, [r7, #24]
 8000be0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be2:	2300      	movs	r3, #0
 8000be4:	617b      	str	r3, [r7, #20]
 8000be6:	4b61      	ldr	r3, [pc, #388]	; (8000d6c <HAL_UART_MspInit+0x1c8>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	4a60      	ldr	r2, [pc, #384]	; (8000d6c <HAL_UART_MspInit+0x1c8>)
 8000bec:	f043 0301 	orr.w	r3, r3, #1
 8000bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf2:	4b5e      	ldr	r3, [pc, #376]	; (8000d6c <HAL_UART_MspInit+0x1c8>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	f003 0301 	and.w	r3, r3, #1
 8000bfa:	617b      	str	r3, [r7, #20]
 8000bfc:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000bfe:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000c02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c04:	2302      	movs	r3, #2
 8000c06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c0c:	2303      	movs	r3, #3
 8000c0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c10:	2307      	movs	r3, #7
 8000c12:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c14:	f107 031c 	add.w	r3, r7, #28
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4855      	ldr	r0, [pc, #340]	; (8000d70 <HAL_UART_MspInit+0x1cc>)
 8000c1c:	f001 f8f4 	bl	8001e08 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8000c20:	4b54      	ldr	r3, [pc, #336]	; (8000d74 <HAL_UART_MspInit+0x1d0>)
 8000c22:	4a55      	ldr	r2, [pc, #340]	; (8000d78 <HAL_UART_MspInit+0x1d4>)
 8000c24:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8000c26:	4b53      	ldr	r3, [pc, #332]	; (8000d74 <HAL_UART_MspInit+0x1d0>)
 8000c28:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c2c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c2e:	4b51      	ldr	r3, [pc, #324]	; (8000d74 <HAL_UART_MspInit+0x1d0>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c34:	4b4f      	ldr	r3, [pc, #316]	; (8000d74 <HAL_UART_MspInit+0x1d0>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c3a:	4b4e      	ldr	r3, [pc, #312]	; (8000d74 <HAL_UART_MspInit+0x1d0>)
 8000c3c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c40:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c42:	4b4c      	ldr	r3, [pc, #304]	; (8000d74 <HAL_UART_MspInit+0x1d0>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c48:	4b4a      	ldr	r3, [pc, #296]	; (8000d74 <HAL_UART_MspInit+0x1d0>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000c4e:	4b49      	ldr	r3, [pc, #292]	; (8000d74 <HAL_UART_MspInit+0x1d0>)
 8000c50:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c54:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000c56:	4b47      	ldr	r3, [pc, #284]	; (8000d74 <HAL_UART_MspInit+0x1d0>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c5c:	4b45      	ldr	r3, [pc, #276]	; (8000d74 <HAL_UART_MspInit+0x1d0>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000c62:	4844      	ldr	r0, [pc, #272]	; (8000d74 <HAL_UART_MspInit+0x1d0>)
 8000c64:	f000 fd54 	bl	8001710 <HAL_DMA_Init>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8000c6e:	f7ff fecd 	bl	8000a0c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	4a3f      	ldr	r2, [pc, #252]	; (8000d74 <HAL_UART_MspInit+0x1d0>)
 8000c76:	639a      	str	r2, [r3, #56]	; 0x38
 8000c78:	4a3e      	ldr	r2, [pc, #248]	; (8000d74 <HAL_UART_MspInit+0x1d0>)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000c7e:	2200      	movs	r2, #0
 8000c80:	2100      	movs	r1, #0
 8000c82:	2025      	movs	r0, #37	; 0x25
 8000c84:	f000 fd0d 	bl	80016a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c88:	2025      	movs	r0, #37	; 0x25
 8000c8a:	f000 fd26 	bl	80016da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c8e:	e067      	b.n	8000d60 <HAL_UART_MspInit+0x1bc>
  else if(huart->Instance==USART2)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a39      	ldr	r2, [pc, #228]	; (8000d7c <HAL_UART_MspInit+0x1d8>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d162      	bne.n	8000d60 <HAL_UART_MspInit+0x1bc>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	613b      	str	r3, [r7, #16]
 8000c9e:	4b33      	ldr	r3, [pc, #204]	; (8000d6c <HAL_UART_MspInit+0x1c8>)
 8000ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca2:	4a32      	ldr	r2, [pc, #200]	; (8000d6c <HAL_UART_MspInit+0x1c8>)
 8000ca4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ca8:	6413      	str	r3, [r2, #64]	; 0x40
 8000caa:	4b30      	ldr	r3, [pc, #192]	; (8000d6c <HAL_UART_MspInit+0x1c8>)
 8000cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cb2:	613b      	str	r3, [r7, #16]
 8000cb4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	60fb      	str	r3, [r7, #12]
 8000cba:	4b2c      	ldr	r3, [pc, #176]	; (8000d6c <HAL_UART_MspInit+0x1c8>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbe:	4a2b      	ldr	r2, [pc, #172]	; (8000d6c <HAL_UART_MspInit+0x1c8>)
 8000cc0:	f043 0301 	orr.w	r3, r3, #1
 8000cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc6:	4b29      	ldr	r3, [pc, #164]	; (8000d6c <HAL_UART_MspInit+0x1c8>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	f003 0301 	and.w	r3, r3, #1
 8000cce:	60fb      	str	r3, [r7, #12]
 8000cd0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000cd2:	230c      	movs	r3, #12
 8000cd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cde:	2303      	movs	r3, #3
 8000ce0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ce2:	2307      	movs	r3, #7
 8000ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce6:	f107 031c 	add.w	r3, r7, #28
 8000cea:	4619      	mov	r1, r3
 8000cec:	4820      	ldr	r0, [pc, #128]	; (8000d70 <HAL_UART_MspInit+0x1cc>)
 8000cee:	f001 f88b 	bl	8001e08 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000cf2:	4b23      	ldr	r3, [pc, #140]	; (8000d80 <HAL_UART_MspInit+0x1dc>)
 8000cf4:	4a23      	ldr	r2, [pc, #140]	; (8000d84 <HAL_UART_MspInit+0x1e0>)
 8000cf6:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000cf8:	4b21      	ldr	r3, [pc, #132]	; (8000d80 <HAL_UART_MspInit+0x1dc>)
 8000cfa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000cfe:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d00:	4b1f      	ldr	r3, [pc, #124]	; (8000d80 <HAL_UART_MspInit+0x1dc>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d06:	4b1e      	ldr	r3, [pc, #120]	; (8000d80 <HAL_UART_MspInit+0x1dc>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d0c:	4b1c      	ldr	r3, [pc, #112]	; (8000d80 <HAL_UART_MspInit+0x1dc>)
 8000d0e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d12:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d14:	4b1a      	ldr	r3, [pc, #104]	; (8000d80 <HAL_UART_MspInit+0x1dc>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d1a:	4b19      	ldr	r3, [pc, #100]	; (8000d80 <HAL_UART_MspInit+0x1dc>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000d20:	4b17      	ldr	r3, [pc, #92]	; (8000d80 <HAL_UART_MspInit+0x1dc>)
 8000d22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d26:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d28:	4b15      	ldr	r3, [pc, #84]	; (8000d80 <HAL_UART_MspInit+0x1dc>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d2e:	4b14      	ldr	r3, [pc, #80]	; (8000d80 <HAL_UART_MspInit+0x1dc>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000d34:	4812      	ldr	r0, [pc, #72]	; (8000d80 <HAL_UART_MspInit+0x1dc>)
 8000d36:	f000 fceb 	bl	8001710 <HAL_DMA_Init>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <HAL_UART_MspInit+0x1a0>
      Error_Handler();
 8000d40:	f7ff fe64 	bl	8000a0c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	4a0e      	ldr	r2, [pc, #56]	; (8000d80 <HAL_UART_MspInit+0x1dc>)
 8000d48:	639a      	str	r2, [r3, #56]	; 0x38
 8000d4a:	4a0d      	ldr	r2, [pc, #52]	; (8000d80 <HAL_UART_MspInit+0x1dc>)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000d50:	2200      	movs	r2, #0
 8000d52:	2100      	movs	r1, #0
 8000d54:	2026      	movs	r0, #38	; 0x26
 8000d56:	f000 fca4 	bl	80016a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d5a:	2026      	movs	r0, #38	; 0x26
 8000d5c:	f000 fcbd 	bl	80016da <HAL_NVIC_EnableIRQ>
}
 8000d60:	bf00      	nop
 8000d62:	3730      	adds	r7, #48	; 0x30
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	40011000 	.word	0x40011000
 8000d6c:	40023800 	.word	0x40023800
 8000d70:	40020000 	.word	0x40020000
 8000d74:	20000218 	.word	0x20000218
 8000d78:	40026440 	.word	0x40026440
 8000d7c:	40004400 	.word	0x40004400
 8000d80:	20000278 	.word	0x20000278
 8000d84:	40026088 	.word	0x40026088

08000d88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d8c:	e7fe      	b.n	8000d8c <NMI_Handler+0x4>

08000d8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d92:	e7fe      	b.n	8000d92 <HardFault_Handler+0x4>

08000d94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d98:	e7fe      	b.n	8000d98 <MemManage_Handler+0x4>

08000d9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d9a:	b480      	push	{r7}
 8000d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d9e:	e7fe      	b.n	8000d9e <BusFault_Handler+0x4>

08000da0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000da4:	e7fe      	b.n	8000da4 <UsageFault_Handler+0x4>

08000da6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000da6:	b480      	push	{r7}
 8000da8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000daa:	bf00      	nop
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr

08000db4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000db8:	bf00      	nop
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr

08000dc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dc6:	bf00      	nop
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr

08000dd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dd4:	f000 f908 	bl	8000fe8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dd8:	bf00      	nop
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000de0:	4802      	ldr	r0, [pc, #8]	; (8000dec <DMA1_Stream5_IRQHandler+0x10>)
 8000de2:	f000 fdd5 	bl	8001990 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000de6:	bf00      	nop
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	20000278 	.word	0x20000278

08000df0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000df4:	4802      	ldr	r0, [pc, #8]	; (8000e00 <TIM2_IRQHandler+0x10>)
 8000df6:	f001 fe8a 	bl	8002b0e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	20000148 	.word	0x20000148

08000e04 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000e0a:	4811      	ldr	r0, [pc, #68]	; (8000e50 <USART1_IRQHandler+0x4c>)
 8000e0c:	f002 fa98 	bl	8003340 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  if (__HAL_UART_GET_IT_SOURCE(&huart1, UART_IT_IDLE) && __HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE))
 8000e10:	4b0f      	ldr	r3, [pc, #60]	; (8000e50 <USART1_IRQHandler+0x4c>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	68db      	ldr	r3, [r3, #12]
 8000e16:	f003 0310 	and.w	r3, r3, #16
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d014      	beq.n	8000e48 <USART1_IRQHandler+0x44>
 8000e1e:	4b0c      	ldr	r3, [pc, #48]	; (8000e50 <USART1_IRQHandler+0x4c>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f003 0310 	and.w	r3, r3, #16
 8000e28:	2b10      	cmp	r3, #16
 8000e2a:	d10d      	bne.n	8000e48 <USART1_IRQHandler+0x44>
    {
  	  HAL_UART_RxCpltCallback (&huart1);
 8000e2c:	4808      	ldr	r0, [pc, #32]	; (8000e50 <USART1_IRQHandler+0x4c>)
 8000e2e:	f7ff fb4d 	bl	80004cc <HAL_UART_RxCpltCallback>
  	  __HAL_UART_CLEAR_IDLEFLAG (&huart1);
 8000e32:	2300      	movs	r3, #0
 8000e34:	607b      	str	r3, [r7, #4]
 8000e36:	4b06      	ldr	r3, [pc, #24]	; (8000e50 <USART1_IRQHandler+0x4c>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	607b      	str	r3, [r7, #4]
 8000e3e:	4b04      	ldr	r3, [pc, #16]	; (8000e50 <USART1_IRQHandler+0x4c>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	607b      	str	r3, [r7, #4]
 8000e46:	687b      	ldr	r3, [r7, #4]
    }

  /* USER CODE END USART1_IRQn 1 */
}
 8000e48:	bf00      	nop
 8000e4a:	3708      	adds	r7, #8
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	20000190 	.word	0x20000190

08000e54 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e5a:	4811      	ldr	r0, [pc, #68]	; (8000ea0 <USART2_IRQHandler+0x4c>)
 8000e5c:	f002 fa70 	bl	8003340 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  if (__HAL_UART_GET_IT_SOURCE(&huart2, UART_IT_IDLE) && __HAL_UART_GET_FLAG(&huart2, UART_FLAG_IDLE))
 8000e60:	4b0f      	ldr	r3, [pc, #60]	; (8000ea0 <USART2_IRQHandler+0x4c>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	68db      	ldr	r3, [r3, #12]
 8000e66:	f003 0310 	and.w	r3, r3, #16
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d014      	beq.n	8000e98 <USART2_IRQHandler+0x44>
 8000e6e:	4b0c      	ldr	r3, [pc, #48]	; (8000ea0 <USART2_IRQHandler+0x4c>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f003 0310 	and.w	r3, r3, #16
 8000e78:	2b10      	cmp	r3, #16
 8000e7a:	d10d      	bne.n	8000e98 <USART2_IRQHandler+0x44>
      {
    	  HAL_UART_RxCpltCallback (&huart2);
 8000e7c:	4808      	ldr	r0, [pc, #32]	; (8000ea0 <USART2_IRQHandler+0x4c>)
 8000e7e:	f7ff fb25 	bl	80004cc <HAL_UART_RxCpltCallback>
    	  __HAL_UART_CLEAR_IDLEFLAG (&huart2);
 8000e82:	2300      	movs	r3, #0
 8000e84:	607b      	str	r3, [r7, #4]
 8000e86:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <USART2_IRQHandler+0x4c>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	607b      	str	r3, [r7, #4]
 8000e8e:	4b04      	ldr	r3, [pc, #16]	; (8000ea0 <USART2_IRQHandler+0x4c>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	607b      	str	r3, [r7, #4]
 8000e96:	687b      	ldr	r3, [r7, #4]
      }

  /* USER CODE END USART2_IRQn 1 */
}
 8000e98:	bf00      	nop
 8000e9a:	3708      	adds	r7, #8
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	200001d4 	.word	0x200001d4

08000ea4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000ea8:	4802      	ldr	r0, [pc, #8]	; (8000eb4 <DMA2_Stream0_IRQHandler+0x10>)
 8000eaa:	f000 fd71 	bl	8001990 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	200000e8 	.word	0x200000e8

08000eb8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000ebc:	4802      	ldr	r0, [pc, #8]	; (8000ec8 <DMA2_Stream2_IRQHandler+0x10>)
 8000ebe:	f000 fd67 	bl	8001990 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	20000218 	.word	0x20000218

08000ecc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ed0:	4b06      	ldr	r3, [pc, #24]	; (8000eec <SystemInit+0x20>)
 8000ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ed6:	4a05      	ldr	r2, [pc, #20]	; (8000eec <SystemInit+0x20>)
 8000ed8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000edc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ee0:	bf00      	nop
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	e000ed00 	.word	0xe000ed00

08000ef0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ef0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f28 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ef4:	480d      	ldr	r0, [pc, #52]	; (8000f2c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ef6:	490e      	ldr	r1, [pc, #56]	; (8000f30 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ef8:	4a0e      	ldr	r2, [pc, #56]	; (8000f34 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000efa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000efc:	e002      	b.n	8000f04 <LoopCopyDataInit>

08000efe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000efe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f02:	3304      	adds	r3, #4

08000f04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f08:	d3f9      	bcc.n	8000efe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f0a:	4a0b      	ldr	r2, [pc, #44]	; (8000f38 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f0c:	4c0b      	ldr	r4, [pc, #44]	; (8000f3c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f10:	e001      	b.n	8000f16 <LoopFillZerobss>

08000f12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f14:	3204      	adds	r2, #4

08000f16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f18:	d3fb      	bcc.n	8000f12 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f1a:	f7ff ffd7 	bl	8000ecc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f1e:	f003 f8cb 	bl	80040b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f22:	f7ff fb9b 	bl	800065c <main>
  bx  lr    
 8000f26:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f28:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f30:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f34:	08004174 	.word	0x08004174
  ldr r2, =_sbss
 8000f38:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f3c:	200003d4 	.word	0x200003d4

08000f40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f40:	e7fe      	b.n	8000f40 <ADC_IRQHandler>
	...

08000f44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f48:	4b0e      	ldr	r3, [pc, #56]	; (8000f84 <HAL_Init+0x40>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a0d      	ldr	r2, [pc, #52]	; (8000f84 <HAL_Init+0x40>)
 8000f4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f54:	4b0b      	ldr	r3, [pc, #44]	; (8000f84 <HAL_Init+0x40>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a0a      	ldr	r2, [pc, #40]	; (8000f84 <HAL_Init+0x40>)
 8000f5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f60:	4b08      	ldr	r3, [pc, #32]	; (8000f84 <HAL_Init+0x40>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a07      	ldr	r2, [pc, #28]	; (8000f84 <HAL_Init+0x40>)
 8000f66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f6c:	2003      	movs	r0, #3
 8000f6e:	f000 fb8d 	bl	800168c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f72:	200f      	movs	r0, #15
 8000f74:	f000 f808 	bl	8000f88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f78:	f7ff fd4e 	bl	8000a18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f7c:	2300      	movs	r3, #0
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40023c00 	.word	0x40023c00

08000f88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f90:	4b12      	ldr	r3, [pc, #72]	; (8000fdc <HAL_InitTick+0x54>)
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	4b12      	ldr	r3, [pc, #72]	; (8000fe0 <HAL_InitTick+0x58>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	4619      	mov	r1, r3
 8000f9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f000 fba5 	bl	80016f6 <HAL_SYSTICK_Config>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e00e      	b.n	8000fd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2b0f      	cmp	r3, #15
 8000fba:	d80a      	bhi.n	8000fd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	6879      	ldr	r1, [r7, #4]
 8000fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fc4:	f000 fb6d 	bl	80016a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fc8:	4a06      	ldr	r2, [pc, #24]	; (8000fe4 <HAL_InitTick+0x5c>)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	e000      	b.n	8000fd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fd2:	2301      	movs	r3, #1
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	3708      	adds	r7, #8
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	20000000 	.word	0x20000000
 8000fe0:	20000008 	.word	0x20000008
 8000fe4:	20000004 	.word	0x20000004

08000fe8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fec:	4b06      	ldr	r3, [pc, #24]	; (8001008 <HAL_IncTick+0x20>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	4b06      	ldr	r3, [pc, #24]	; (800100c <HAL_IncTick+0x24>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4413      	add	r3, r2
 8000ff8:	4a04      	ldr	r2, [pc, #16]	; (800100c <HAL_IncTick+0x24>)
 8000ffa:	6013      	str	r3, [r2, #0]
}
 8000ffc:	bf00      	nop
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	20000008 	.word	0x20000008
 800100c:	200003d0 	.word	0x200003d0

08001010 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  return uwTick;
 8001014:	4b03      	ldr	r3, [pc, #12]	; (8001024 <HAL_GetTick+0x14>)
 8001016:	681b      	ldr	r3, [r3, #0]
}
 8001018:	4618      	mov	r0, r3
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	200003d0 	.word	0x200003d0

08001028 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001030:	2300      	movs	r3, #0
 8001032:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d101      	bne.n	800103e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800103a:	2301      	movs	r3, #1
 800103c:	e033      	b.n	80010a6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001042:	2b00      	cmp	r3, #0
 8001044:	d109      	bne.n	800105a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	f7ff fd0e 	bl	8000a68 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2200      	movs	r2, #0
 8001050:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2200      	movs	r2, #0
 8001056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105e:	f003 0310 	and.w	r3, r3, #16
 8001062:	2b00      	cmp	r3, #0
 8001064:	d118      	bne.n	8001098 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800106e:	f023 0302 	bic.w	r3, r3, #2
 8001072:	f043 0202 	orr.w	r2, r3, #2
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f000 f93a 	bl	80012f4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2200      	movs	r2, #0
 8001084:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108a:	f023 0303 	bic.w	r3, r3, #3
 800108e:	f043 0201 	orr.w	r2, r3, #1
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	641a      	str	r2, [r3, #64]	; 0x40
 8001096:	e001      	b.n	800109c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001098:	2301      	movs	r3, #1
 800109a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2200      	movs	r2, #0
 80010a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80010a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3710      	adds	r7, #16
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
	...

080010b0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b085      	sub	sp, #20
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80010ba:	2300      	movs	r3, #0
 80010bc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d101      	bne.n	80010cc <HAL_ADC_ConfigChannel+0x1c>
 80010c8:	2302      	movs	r3, #2
 80010ca:	e105      	b.n	80012d8 <HAL_ADC_ConfigChannel+0x228>
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2201      	movs	r2, #1
 80010d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	2b09      	cmp	r3, #9
 80010da:	d925      	bls.n	8001128 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	68d9      	ldr	r1, [r3, #12]
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	b29b      	uxth	r3, r3
 80010e8:	461a      	mov	r2, r3
 80010ea:	4613      	mov	r3, r2
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	4413      	add	r3, r2
 80010f0:	3b1e      	subs	r3, #30
 80010f2:	2207      	movs	r2, #7
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	43da      	mvns	r2, r3
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	400a      	ands	r2, r1
 8001100:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	68d9      	ldr	r1, [r3, #12]
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	689a      	ldr	r2, [r3, #8]
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	b29b      	uxth	r3, r3
 8001112:	4618      	mov	r0, r3
 8001114:	4603      	mov	r3, r0
 8001116:	005b      	lsls	r3, r3, #1
 8001118:	4403      	add	r3, r0
 800111a:	3b1e      	subs	r3, #30
 800111c:	409a      	lsls	r2, r3
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	430a      	orrs	r2, r1
 8001124:	60da      	str	r2, [r3, #12]
 8001126:	e022      	b.n	800116e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	6919      	ldr	r1, [r3, #16]
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	b29b      	uxth	r3, r3
 8001134:	461a      	mov	r2, r3
 8001136:	4613      	mov	r3, r2
 8001138:	005b      	lsls	r3, r3, #1
 800113a:	4413      	add	r3, r2
 800113c:	2207      	movs	r2, #7
 800113e:	fa02 f303 	lsl.w	r3, r2, r3
 8001142:	43da      	mvns	r2, r3
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	400a      	ands	r2, r1
 800114a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	6919      	ldr	r1, [r3, #16]
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	689a      	ldr	r2, [r3, #8]
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	b29b      	uxth	r3, r3
 800115c:	4618      	mov	r0, r3
 800115e:	4603      	mov	r3, r0
 8001160:	005b      	lsls	r3, r3, #1
 8001162:	4403      	add	r3, r0
 8001164:	409a      	lsls	r2, r3
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	430a      	orrs	r2, r1
 800116c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	2b06      	cmp	r3, #6
 8001174:	d824      	bhi.n	80011c0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	685a      	ldr	r2, [r3, #4]
 8001180:	4613      	mov	r3, r2
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	4413      	add	r3, r2
 8001186:	3b05      	subs	r3, #5
 8001188:	221f      	movs	r2, #31
 800118a:	fa02 f303 	lsl.w	r3, r2, r3
 800118e:	43da      	mvns	r2, r3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	400a      	ands	r2, r1
 8001196:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	b29b      	uxth	r3, r3
 80011a4:	4618      	mov	r0, r3
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	685a      	ldr	r2, [r3, #4]
 80011aa:	4613      	mov	r3, r2
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	4413      	add	r3, r2
 80011b0:	3b05      	subs	r3, #5
 80011b2:	fa00 f203 	lsl.w	r2, r0, r3
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	430a      	orrs	r2, r1
 80011bc:	635a      	str	r2, [r3, #52]	; 0x34
 80011be:	e04c      	b.n	800125a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	2b0c      	cmp	r3, #12
 80011c6:	d824      	bhi.n	8001212 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	685a      	ldr	r2, [r3, #4]
 80011d2:	4613      	mov	r3, r2
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	4413      	add	r3, r2
 80011d8:	3b23      	subs	r3, #35	; 0x23
 80011da:	221f      	movs	r2, #31
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	43da      	mvns	r2, r3
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	400a      	ands	r2, r1
 80011e8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	b29b      	uxth	r3, r3
 80011f6:	4618      	mov	r0, r3
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	685a      	ldr	r2, [r3, #4]
 80011fc:	4613      	mov	r3, r2
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	4413      	add	r3, r2
 8001202:	3b23      	subs	r3, #35	; 0x23
 8001204:	fa00 f203 	lsl.w	r2, r0, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	430a      	orrs	r2, r1
 800120e:	631a      	str	r2, [r3, #48]	; 0x30
 8001210:	e023      	b.n	800125a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	685a      	ldr	r2, [r3, #4]
 800121c:	4613      	mov	r3, r2
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	4413      	add	r3, r2
 8001222:	3b41      	subs	r3, #65	; 0x41
 8001224:	221f      	movs	r2, #31
 8001226:	fa02 f303 	lsl.w	r3, r2, r3
 800122a:	43da      	mvns	r2, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	400a      	ands	r2, r1
 8001232:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	b29b      	uxth	r3, r3
 8001240:	4618      	mov	r0, r3
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	685a      	ldr	r2, [r3, #4]
 8001246:	4613      	mov	r3, r2
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	4413      	add	r3, r2
 800124c:	3b41      	subs	r3, #65	; 0x41
 800124e:	fa00 f203 	lsl.w	r2, r0, r3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	430a      	orrs	r2, r1
 8001258:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800125a:	4b22      	ldr	r3, [pc, #136]	; (80012e4 <HAL_ADC_ConfigChannel+0x234>)
 800125c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a21      	ldr	r2, [pc, #132]	; (80012e8 <HAL_ADC_ConfigChannel+0x238>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d109      	bne.n	800127c <HAL_ADC_ConfigChannel+0x1cc>
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	2b12      	cmp	r3, #18
 800126e:	d105      	bne.n	800127c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a19      	ldr	r2, [pc, #100]	; (80012e8 <HAL_ADC_ConfigChannel+0x238>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d123      	bne.n	80012ce <HAL_ADC_ConfigChannel+0x21e>
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	2b10      	cmp	r3, #16
 800128c:	d003      	beq.n	8001296 <HAL_ADC_ConfigChannel+0x1e6>
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	2b11      	cmp	r3, #17
 8001294:	d11b      	bne.n	80012ce <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	2b10      	cmp	r3, #16
 80012a8:	d111      	bne.n	80012ce <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80012aa:	4b10      	ldr	r3, [pc, #64]	; (80012ec <HAL_ADC_ConfigChannel+0x23c>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a10      	ldr	r2, [pc, #64]	; (80012f0 <HAL_ADC_ConfigChannel+0x240>)
 80012b0:	fba2 2303 	umull	r2, r3, r2, r3
 80012b4:	0c9a      	lsrs	r2, r3, #18
 80012b6:	4613      	mov	r3, r2
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	4413      	add	r3, r2
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80012c0:	e002      	b.n	80012c8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80012c2:	68bb      	ldr	r3, [r7, #8]
 80012c4:	3b01      	subs	r3, #1
 80012c6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d1f9      	bne.n	80012c2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2200      	movs	r2, #0
 80012d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80012d6:	2300      	movs	r3, #0
}
 80012d8:	4618      	mov	r0, r3
 80012da:	3714      	adds	r7, #20
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr
 80012e4:	40012300 	.word	0x40012300
 80012e8:	40012000 	.word	0x40012000
 80012ec:	20000000 	.word	0x20000000
 80012f0:	431bde83 	.word	0x431bde83

080012f4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b085      	sub	sp, #20
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80012fc:	4b79      	ldr	r3, [pc, #484]	; (80014e4 <ADC_Init+0x1f0>)
 80012fe:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	685a      	ldr	r2, [r3, #4]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	431a      	orrs	r2, r3
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	685a      	ldr	r2, [r3, #4]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001328:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	6859      	ldr	r1, [r3, #4]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	691b      	ldr	r3, [r3, #16]
 8001334:	021a      	lsls	r2, r3, #8
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	430a      	orrs	r2, r1
 800133c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	685a      	ldr	r2, [r3, #4]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800134c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	6859      	ldr	r1, [r3, #4]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	689a      	ldr	r2, [r3, #8]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	430a      	orrs	r2, r1
 800135e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	689a      	ldr	r2, [r3, #8]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800136e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	6899      	ldr	r1, [r3, #8]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	68da      	ldr	r2, [r3, #12]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	430a      	orrs	r2, r1
 8001380:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001386:	4a58      	ldr	r2, [pc, #352]	; (80014e8 <ADC_Init+0x1f4>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d022      	beq.n	80013d2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	689a      	ldr	r2, [r3, #8]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800139a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	6899      	ldr	r1, [r3, #8]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	430a      	orrs	r2, r1
 80013ac:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	689a      	ldr	r2, [r3, #8]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80013bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	6899      	ldr	r1, [r3, #8]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	430a      	orrs	r2, r1
 80013ce:	609a      	str	r2, [r3, #8]
 80013d0:	e00f      	b.n	80013f2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	689a      	ldr	r2, [r3, #8]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80013e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	689a      	ldr	r2, [r3, #8]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80013f0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	689a      	ldr	r2, [r3, #8]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f022 0202 	bic.w	r2, r2, #2
 8001400:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	6899      	ldr	r1, [r3, #8]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	7e1b      	ldrb	r3, [r3, #24]
 800140c:	005a      	lsls	r2, r3, #1
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	430a      	orrs	r2, r1
 8001414:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	f893 3020 	ldrb.w	r3, [r3, #32]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d01b      	beq.n	8001458 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	685a      	ldr	r2, [r3, #4]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800142e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	685a      	ldr	r2, [r3, #4]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800143e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	6859      	ldr	r1, [r3, #4]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800144a:	3b01      	subs	r3, #1
 800144c:	035a      	lsls	r2, r3, #13
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	430a      	orrs	r2, r1
 8001454:	605a      	str	r2, [r3, #4]
 8001456:	e007      	b.n	8001468 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	685a      	ldr	r2, [r3, #4]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001466:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001476:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	69db      	ldr	r3, [r3, #28]
 8001482:	3b01      	subs	r3, #1
 8001484:	051a      	lsls	r2, r3, #20
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	430a      	orrs	r2, r1
 800148c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	689a      	ldr	r2, [r3, #8]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800149c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	6899      	ldr	r1, [r3, #8]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80014aa:	025a      	lsls	r2, r3, #9
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	430a      	orrs	r2, r1
 80014b2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	689a      	ldr	r2, [r3, #8]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80014c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	6899      	ldr	r1, [r3, #8]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	695b      	ldr	r3, [r3, #20]
 80014ce:	029a      	lsls	r2, r3, #10
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	430a      	orrs	r2, r1
 80014d6:	609a      	str	r2, [r3, #8]
}
 80014d8:	bf00      	nop
 80014da:	3714      	adds	r7, #20
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr
 80014e4:	40012300 	.word	0x40012300
 80014e8:	0f000001 	.word	0x0f000001

080014ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b085      	sub	sp, #20
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f003 0307 	and.w	r3, r3, #7
 80014fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014fc:	4b0c      	ldr	r3, [pc, #48]	; (8001530 <__NVIC_SetPriorityGrouping+0x44>)
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001502:	68ba      	ldr	r2, [r7, #8]
 8001504:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001508:	4013      	ands	r3, r2
 800150a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001514:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001518:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800151c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800151e:	4a04      	ldr	r2, [pc, #16]	; (8001530 <__NVIC_SetPriorityGrouping+0x44>)
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	60d3      	str	r3, [r2, #12]
}
 8001524:	bf00      	nop
 8001526:	3714      	adds	r7, #20
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr
 8001530:	e000ed00 	.word	0xe000ed00

08001534 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001538:	4b04      	ldr	r3, [pc, #16]	; (800154c <__NVIC_GetPriorityGrouping+0x18>)
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	0a1b      	lsrs	r3, r3, #8
 800153e:	f003 0307 	and.w	r3, r3, #7
}
 8001542:	4618      	mov	r0, r3
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr
 800154c:	e000ed00 	.word	0xe000ed00

08001550 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	4603      	mov	r3, r0
 8001558:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800155a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155e:	2b00      	cmp	r3, #0
 8001560:	db0b      	blt.n	800157a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001562:	79fb      	ldrb	r3, [r7, #7]
 8001564:	f003 021f 	and.w	r2, r3, #31
 8001568:	4907      	ldr	r1, [pc, #28]	; (8001588 <__NVIC_EnableIRQ+0x38>)
 800156a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156e:	095b      	lsrs	r3, r3, #5
 8001570:	2001      	movs	r0, #1
 8001572:	fa00 f202 	lsl.w	r2, r0, r2
 8001576:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800157a:	bf00      	nop
 800157c:	370c      	adds	r7, #12
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	e000e100 	.word	0xe000e100

0800158c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	4603      	mov	r3, r0
 8001594:	6039      	str	r1, [r7, #0]
 8001596:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001598:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159c:	2b00      	cmp	r3, #0
 800159e:	db0a      	blt.n	80015b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	b2da      	uxtb	r2, r3
 80015a4:	490c      	ldr	r1, [pc, #48]	; (80015d8 <__NVIC_SetPriority+0x4c>)
 80015a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015aa:	0112      	lsls	r2, r2, #4
 80015ac:	b2d2      	uxtb	r2, r2
 80015ae:	440b      	add	r3, r1
 80015b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015b4:	e00a      	b.n	80015cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	b2da      	uxtb	r2, r3
 80015ba:	4908      	ldr	r1, [pc, #32]	; (80015dc <__NVIC_SetPriority+0x50>)
 80015bc:	79fb      	ldrb	r3, [r7, #7]
 80015be:	f003 030f 	and.w	r3, r3, #15
 80015c2:	3b04      	subs	r3, #4
 80015c4:	0112      	lsls	r2, r2, #4
 80015c6:	b2d2      	uxtb	r2, r2
 80015c8:	440b      	add	r3, r1
 80015ca:	761a      	strb	r2, [r3, #24]
}
 80015cc:	bf00      	nop
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr
 80015d8:	e000e100 	.word	0xe000e100
 80015dc:	e000ed00 	.word	0xe000ed00

080015e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b089      	sub	sp, #36	; 0x24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	60f8      	str	r0, [r7, #12]
 80015e8:	60b9      	str	r1, [r7, #8]
 80015ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	f003 0307 	and.w	r3, r3, #7
 80015f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	f1c3 0307 	rsb	r3, r3, #7
 80015fa:	2b04      	cmp	r3, #4
 80015fc:	bf28      	it	cs
 80015fe:	2304      	movcs	r3, #4
 8001600:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	3304      	adds	r3, #4
 8001606:	2b06      	cmp	r3, #6
 8001608:	d902      	bls.n	8001610 <NVIC_EncodePriority+0x30>
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	3b03      	subs	r3, #3
 800160e:	e000      	b.n	8001612 <NVIC_EncodePriority+0x32>
 8001610:	2300      	movs	r3, #0
 8001612:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001614:	f04f 32ff 	mov.w	r2, #4294967295
 8001618:	69bb      	ldr	r3, [r7, #24]
 800161a:	fa02 f303 	lsl.w	r3, r2, r3
 800161e:	43da      	mvns	r2, r3
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	401a      	ands	r2, r3
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001628:	f04f 31ff 	mov.w	r1, #4294967295
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	fa01 f303 	lsl.w	r3, r1, r3
 8001632:	43d9      	mvns	r1, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001638:	4313      	orrs	r3, r2
         );
}
 800163a:	4618      	mov	r0, r3
 800163c:	3724      	adds	r7, #36	; 0x24
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
	...

08001648 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	3b01      	subs	r3, #1
 8001654:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001658:	d301      	bcc.n	800165e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800165a:	2301      	movs	r3, #1
 800165c:	e00f      	b.n	800167e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800165e:	4a0a      	ldr	r2, [pc, #40]	; (8001688 <SysTick_Config+0x40>)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	3b01      	subs	r3, #1
 8001664:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001666:	210f      	movs	r1, #15
 8001668:	f04f 30ff 	mov.w	r0, #4294967295
 800166c:	f7ff ff8e 	bl	800158c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001670:	4b05      	ldr	r3, [pc, #20]	; (8001688 <SysTick_Config+0x40>)
 8001672:	2200      	movs	r2, #0
 8001674:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001676:	4b04      	ldr	r3, [pc, #16]	; (8001688 <SysTick_Config+0x40>)
 8001678:	2207      	movs	r2, #7
 800167a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800167c:	2300      	movs	r3, #0
}
 800167e:	4618      	mov	r0, r3
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	e000e010 	.word	0xe000e010

0800168c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f7ff ff29 	bl	80014ec <__NVIC_SetPriorityGrouping>
}
 800169a:	bf00      	nop
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}

080016a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016a2:	b580      	push	{r7, lr}
 80016a4:	b086      	sub	sp, #24
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	4603      	mov	r3, r0
 80016aa:	60b9      	str	r1, [r7, #8]
 80016ac:	607a      	str	r2, [r7, #4]
 80016ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016b0:	2300      	movs	r3, #0
 80016b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016b4:	f7ff ff3e 	bl	8001534 <__NVIC_GetPriorityGrouping>
 80016b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016ba:	687a      	ldr	r2, [r7, #4]
 80016bc:	68b9      	ldr	r1, [r7, #8]
 80016be:	6978      	ldr	r0, [r7, #20]
 80016c0:	f7ff ff8e 	bl	80015e0 <NVIC_EncodePriority>
 80016c4:	4602      	mov	r2, r0
 80016c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ca:	4611      	mov	r1, r2
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7ff ff5d 	bl	800158c <__NVIC_SetPriority>
}
 80016d2:	bf00      	nop
 80016d4:	3718      	adds	r7, #24
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016da:	b580      	push	{r7, lr}
 80016dc:	b082      	sub	sp, #8
 80016de:	af00      	add	r7, sp, #0
 80016e0:	4603      	mov	r3, r0
 80016e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff ff31 	bl	8001550 <__NVIC_EnableIRQ>
}
 80016ee:	bf00      	nop
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}

080016f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016f6:	b580      	push	{r7, lr}
 80016f8:	b082      	sub	sp, #8
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f7ff ffa2 	bl	8001648 <SysTick_Config>
 8001704:	4603      	mov	r3, r0
}
 8001706:	4618      	mov	r0, r3
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
	...

08001710 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b086      	sub	sp, #24
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001718:	2300      	movs	r3, #0
 800171a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800171c:	f7ff fc78 	bl	8001010 <HAL_GetTick>
 8001720:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d101      	bne.n	800172c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	e099      	b.n	8001860 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2202      	movs	r2, #2
 8001730:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2200      	movs	r2, #0
 8001738:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f022 0201 	bic.w	r2, r2, #1
 800174a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800174c:	e00f      	b.n	800176e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800174e:	f7ff fc5f 	bl	8001010 <HAL_GetTick>
 8001752:	4602      	mov	r2, r0
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	2b05      	cmp	r3, #5
 800175a:	d908      	bls.n	800176e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2220      	movs	r2, #32
 8001760:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2203      	movs	r2, #3
 8001766:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e078      	b.n	8001860 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 0301 	and.w	r3, r3, #1
 8001778:	2b00      	cmp	r3, #0
 800177a:	d1e8      	bne.n	800174e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001784:	697a      	ldr	r2, [r7, #20]
 8001786:	4b38      	ldr	r3, [pc, #224]	; (8001868 <HAL_DMA_Init+0x158>)
 8001788:	4013      	ands	r3, r2
 800178a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	685a      	ldr	r2, [r3, #4]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800179a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	691b      	ldr	r3, [r3, #16]
 80017a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	699b      	ldr	r3, [r3, #24]
 80017ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6a1b      	ldr	r3, [r3, #32]
 80017b8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017ba:	697a      	ldr	r2, [r7, #20]
 80017bc:	4313      	orrs	r3, r2
 80017be:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c4:	2b04      	cmp	r3, #4
 80017c6:	d107      	bne.n	80017d8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d0:	4313      	orrs	r3, r2
 80017d2:	697a      	ldr	r2, [r7, #20]
 80017d4:	4313      	orrs	r3, r2
 80017d6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	697a      	ldr	r2, [r7, #20]
 80017de:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	695b      	ldr	r3, [r3, #20]
 80017e6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	f023 0307 	bic.w	r3, r3, #7
 80017ee:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f4:	697a      	ldr	r2, [r7, #20]
 80017f6:	4313      	orrs	r3, r2
 80017f8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017fe:	2b04      	cmp	r3, #4
 8001800:	d117      	bne.n	8001832 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001806:	697a      	ldr	r2, [r7, #20]
 8001808:	4313      	orrs	r3, r2
 800180a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001810:	2b00      	cmp	r3, #0
 8001812:	d00e      	beq.n	8001832 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f000 fa7b 	bl	8001d10 <DMA_CheckFifoParam>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d008      	beq.n	8001832 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2240      	movs	r2, #64	; 0x40
 8001824:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2201      	movs	r2, #1
 800182a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800182e:	2301      	movs	r3, #1
 8001830:	e016      	b.n	8001860 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	697a      	ldr	r2, [r7, #20]
 8001838:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800183a:	6878      	ldr	r0, [r7, #4]
 800183c:	f000 fa32 	bl	8001ca4 <DMA_CalcBaseAndBitshift>
 8001840:	4603      	mov	r3, r0
 8001842:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001848:	223f      	movs	r2, #63	; 0x3f
 800184a:	409a      	lsls	r2, r3
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2200      	movs	r2, #0
 8001854:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2201      	movs	r2, #1
 800185a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800185e:	2300      	movs	r3, #0
}
 8001860:	4618      	mov	r0, r3
 8001862:	3718      	adds	r7, #24
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	f010803f 	.word	0xf010803f

0800186c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001878:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800187a:	f7ff fbc9 	bl	8001010 <HAL_GetTick>
 800187e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001886:	b2db      	uxtb	r3, r3
 8001888:	2b02      	cmp	r3, #2
 800188a:	d008      	beq.n	800189e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2280      	movs	r2, #128	; 0x80
 8001890:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2200      	movs	r2, #0
 8001896:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e052      	b.n	8001944 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f022 0216 	bic.w	r2, r2, #22
 80018ac:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	695a      	ldr	r2, [r3, #20]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80018bc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d103      	bne.n	80018ce <HAL_DMA_Abort+0x62>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d007      	beq.n	80018de <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f022 0208 	bic.w	r2, r2, #8
 80018dc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f022 0201 	bic.w	r2, r2, #1
 80018ec:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018ee:	e013      	b.n	8001918 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80018f0:	f7ff fb8e 	bl	8001010 <HAL_GetTick>
 80018f4:	4602      	mov	r2, r0
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	2b05      	cmp	r3, #5
 80018fc:	d90c      	bls.n	8001918 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2220      	movs	r2, #32
 8001902:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2203      	movs	r2, #3
 8001908:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2200      	movs	r2, #0
 8001910:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001914:	2303      	movs	r3, #3
 8001916:	e015      	b.n	8001944 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0301 	and.w	r3, r3, #1
 8001922:	2b00      	cmp	r3, #0
 8001924:	d1e4      	bne.n	80018f0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800192a:	223f      	movs	r2, #63	; 0x3f
 800192c:	409a      	lsls	r2, r3
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2201      	movs	r2, #1
 8001936:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2200      	movs	r2, #0
 800193e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001942:	2300      	movs	r3, #0
}
 8001944:	4618      	mov	r0, r3
 8001946:	3710      	adds	r7, #16
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}

0800194c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800195a:	b2db      	uxtb	r3, r3
 800195c:	2b02      	cmp	r3, #2
 800195e:	d004      	beq.n	800196a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2280      	movs	r2, #128	; 0x80
 8001964:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e00c      	b.n	8001984 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2205      	movs	r2, #5
 800196e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f022 0201 	bic.w	r2, r2, #1
 8001980:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001982:	2300      	movs	r3, #0
}
 8001984:	4618      	mov	r0, r3
 8001986:	370c      	adds	r7, #12
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr

08001990 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b086      	sub	sp, #24
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001998:	2300      	movs	r3, #0
 800199a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800199c:	4b8e      	ldr	r3, [pc, #568]	; (8001bd8 <HAL_DMA_IRQHandler+0x248>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a8e      	ldr	r2, [pc, #568]	; (8001bdc <HAL_DMA_IRQHandler+0x24c>)
 80019a2:	fba2 2303 	umull	r2, r3, r2, r3
 80019a6:	0a9b      	lsrs	r3, r3, #10
 80019a8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ae:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019ba:	2208      	movs	r2, #8
 80019bc:	409a      	lsls	r2, r3
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	4013      	ands	r3, r2
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d01a      	beq.n	80019fc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 0304 	and.w	r3, r3, #4
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d013      	beq.n	80019fc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f022 0204 	bic.w	r2, r2, #4
 80019e2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019e8:	2208      	movs	r2, #8
 80019ea:	409a      	lsls	r2, r3
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019f4:	f043 0201 	orr.w	r2, r3, #1
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a00:	2201      	movs	r2, #1
 8001a02:	409a      	lsls	r2, r3
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	4013      	ands	r3, r2
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d012      	beq.n	8001a32 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	695b      	ldr	r3, [r3, #20]
 8001a12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d00b      	beq.n	8001a32 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a1e:	2201      	movs	r2, #1
 8001a20:	409a      	lsls	r2, r3
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a2a:	f043 0202 	orr.w	r2, r3, #2
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a36:	2204      	movs	r2, #4
 8001a38:	409a      	lsls	r2, r3
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d012      	beq.n	8001a68 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0302 	and.w	r3, r3, #2
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d00b      	beq.n	8001a68 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a54:	2204      	movs	r2, #4
 8001a56:	409a      	lsls	r2, r3
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a60:	f043 0204 	orr.w	r2, r3, #4
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a6c:	2210      	movs	r2, #16
 8001a6e:	409a      	lsls	r2, r3
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	4013      	ands	r3, r2
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d043      	beq.n	8001b00 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 0308 	and.w	r3, r3, #8
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d03c      	beq.n	8001b00 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a8a:	2210      	movs	r2, #16
 8001a8c:	409a      	lsls	r2, r3
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d018      	beq.n	8001ad2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d108      	bne.n	8001ac0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d024      	beq.n	8001b00 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	4798      	blx	r3
 8001abe:	e01f      	b.n	8001b00 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d01b      	beq.n	8001b00 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	4798      	blx	r3
 8001ad0:	e016      	b.n	8001b00 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d107      	bne.n	8001af0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f022 0208 	bic.w	r2, r2, #8
 8001aee:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d003      	beq.n	8001b00 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b04:	2220      	movs	r2, #32
 8001b06:	409a      	lsls	r2, r3
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	f000 808f 	beq.w	8001c30 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 0310 	and.w	r3, r3, #16
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	f000 8087 	beq.w	8001c30 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b26:	2220      	movs	r2, #32
 8001b28:	409a      	lsls	r2, r3
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	2b05      	cmp	r3, #5
 8001b38:	d136      	bne.n	8001ba8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f022 0216 	bic.w	r2, r2, #22
 8001b48:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	695a      	ldr	r2, [r3, #20]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b58:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d103      	bne.n	8001b6a <HAL_DMA_IRQHandler+0x1da>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d007      	beq.n	8001b7a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f022 0208 	bic.w	r2, r2, #8
 8001b78:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b7e:	223f      	movs	r2, #63	; 0x3f
 8001b80:	409a      	lsls	r2, r3
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2201      	movs	r2, #1
 8001b8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2200      	movs	r2, #0
 8001b92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d07e      	beq.n	8001c9c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	4798      	blx	r3
        }
        return;
 8001ba6:	e079      	b.n	8001c9c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d01d      	beq.n	8001bf2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d10d      	bne.n	8001be0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d031      	beq.n	8001c30 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	4798      	blx	r3
 8001bd4:	e02c      	b.n	8001c30 <HAL_DMA_IRQHandler+0x2a0>
 8001bd6:	bf00      	nop
 8001bd8:	20000000 	.word	0x20000000
 8001bdc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d023      	beq.n	8001c30 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	4798      	blx	r3
 8001bf0:	e01e      	b.n	8001c30 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d10f      	bne.n	8001c20 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f022 0210 	bic.w	r2, r2, #16
 8001c0e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2201      	movs	r2, #1
 8001c14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d003      	beq.n	8001c30 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c2c:	6878      	ldr	r0, [r7, #4]
 8001c2e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d032      	beq.n	8001c9e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c3c:	f003 0301 	and.w	r3, r3, #1
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d022      	beq.n	8001c8a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2205      	movs	r2, #5
 8001c48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f022 0201 	bic.w	r2, r2, #1
 8001c5a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	3301      	adds	r3, #1
 8001c60:	60bb      	str	r3, [r7, #8]
 8001c62:	697a      	ldr	r2, [r7, #20]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d307      	bcc.n	8001c78 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0301 	and.w	r3, r3, #1
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d1f2      	bne.n	8001c5c <HAL_DMA_IRQHandler+0x2cc>
 8001c76:	e000      	b.n	8001c7a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001c78:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2200      	movs	r2, #0
 8001c86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d005      	beq.n	8001c9e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	4798      	blx	r3
 8001c9a:	e000      	b.n	8001c9e <HAL_DMA_IRQHandler+0x30e>
        return;
 8001c9c:	bf00      	nop
    }
  }
}
 8001c9e:	3718      	adds	r7, #24
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b085      	sub	sp, #20
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	3b10      	subs	r3, #16
 8001cb4:	4a14      	ldr	r2, [pc, #80]	; (8001d08 <DMA_CalcBaseAndBitshift+0x64>)
 8001cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8001cba:	091b      	lsrs	r3, r3, #4
 8001cbc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001cbe:	4a13      	ldr	r2, [pc, #76]	; (8001d0c <DMA_CalcBaseAndBitshift+0x68>)
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	4413      	add	r3, r2
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	2b03      	cmp	r3, #3
 8001cd0:	d909      	bls.n	8001ce6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001cda:	f023 0303 	bic.w	r3, r3, #3
 8001cde:	1d1a      	adds	r2, r3, #4
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	659a      	str	r2, [r3, #88]	; 0x58
 8001ce4:	e007      	b.n	8001cf6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001cee:	f023 0303 	bic.w	r3, r3, #3
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3714      	adds	r7, #20
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	aaaaaaab 	.word	0xaaaaaaab
 8001d0c:	0800415c 	.word	0x0800415c

08001d10 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b085      	sub	sp, #20
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d20:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	699b      	ldr	r3, [r3, #24]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d11f      	bne.n	8001d6a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	2b03      	cmp	r3, #3
 8001d2e:	d856      	bhi.n	8001dde <DMA_CheckFifoParam+0xce>
 8001d30:	a201      	add	r2, pc, #4	; (adr r2, 8001d38 <DMA_CheckFifoParam+0x28>)
 8001d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d36:	bf00      	nop
 8001d38:	08001d49 	.word	0x08001d49
 8001d3c:	08001d5b 	.word	0x08001d5b
 8001d40:	08001d49 	.word	0x08001d49
 8001d44:	08001ddf 	.word	0x08001ddf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d046      	beq.n	8001de2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d58:	e043      	b.n	8001de2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d5e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001d62:	d140      	bne.n	8001de6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d68:	e03d      	b.n	8001de6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	699b      	ldr	r3, [r3, #24]
 8001d6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d72:	d121      	bne.n	8001db8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	2b03      	cmp	r3, #3
 8001d78:	d837      	bhi.n	8001dea <DMA_CheckFifoParam+0xda>
 8001d7a:	a201      	add	r2, pc, #4	; (adr r2, 8001d80 <DMA_CheckFifoParam+0x70>)
 8001d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d80:	08001d91 	.word	0x08001d91
 8001d84:	08001d97 	.word	0x08001d97
 8001d88:	08001d91 	.word	0x08001d91
 8001d8c:	08001da9 	.word	0x08001da9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	73fb      	strb	r3, [r7, #15]
      break;
 8001d94:	e030      	b.n	8001df8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d025      	beq.n	8001dee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001da6:	e022      	b.n	8001dee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001db0:	d11f      	bne.n	8001df2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001db6:	e01c      	b.n	8001df2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d903      	bls.n	8001dc6 <DMA_CheckFifoParam+0xb6>
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	2b03      	cmp	r3, #3
 8001dc2:	d003      	beq.n	8001dcc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001dc4:	e018      	b.n	8001df8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	73fb      	strb	r3, [r7, #15]
      break;
 8001dca:	e015      	b.n	8001df8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d00e      	beq.n	8001df6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	73fb      	strb	r3, [r7, #15]
      break;
 8001ddc:	e00b      	b.n	8001df6 <DMA_CheckFifoParam+0xe6>
      break;
 8001dde:	bf00      	nop
 8001de0:	e00a      	b.n	8001df8 <DMA_CheckFifoParam+0xe8>
      break;
 8001de2:	bf00      	nop
 8001de4:	e008      	b.n	8001df8 <DMA_CheckFifoParam+0xe8>
      break;
 8001de6:	bf00      	nop
 8001de8:	e006      	b.n	8001df8 <DMA_CheckFifoParam+0xe8>
      break;
 8001dea:	bf00      	nop
 8001dec:	e004      	b.n	8001df8 <DMA_CheckFifoParam+0xe8>
      break;
 8001dee:	bf00      	nop
 8001df0:	e002      	b.n	8001df8 <DMA_CheckFifoParam+0xe8>
      break;   
 8001df2:	bf00      	nop
 8001df4:	e000      	b.n	8001df8 <DMA_CheckFifoParam+0xe8>
      break;
 8001df6:	bf00      	nop
    }
  } 
  
  return status; 
 8001df8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3714      	adds	r7, #20
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop

08001e08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b089      	sub	sp, #36	; 0x24
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e12:	2300      	movs	r3, #0
 8001e14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e16:	2300      	movs	r3, #0
 8001e18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e1e:	2300      	movs	r3, #0
 8001e20:	61fb      	str	r3, [r7, #28]
 8001e22:	e16b      	b.n	80020fc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e24:	2201      	movs	r2, #1
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	697a      	ldr	r2, [r7, #20]
 8001e34:	4013      	ands	r3, r2
 8001e36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e38:	693a      	ldr	r2, [r7, #16]
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	f040 815a 	bne.w	80020f6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	f003 0303 	and.w	r3, r3, #3
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d005      	beq.n	8001e5a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d130      	bne.n	8001ebc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	005b      	lsls	r3, r3, #1
 8001e64:	2203      	movs	r2, #3
 8001e66:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6a:	43db      	mvns	r3, r3
 8001e6c:	69ba      	ldr	r2, [r7, #24]
 8001e6e:	4013      	ands	r3, r2
 8001e70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	68da      	ldr	r2, [r3, #12]
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	005b      	lsls	r3, r3, #1
 8001e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7e:	69ba      	ldr	r2, [r7, #24]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	69ba      	ldr	r2, [r7, #24]
 8001e88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e90:	2201      	movs	r2, #1
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	fa02 f303 	lsl.w	r3, r2, r3
 8001e98:	43db      	mvns	r3, r3
 8001e9a:	69ba      	ldr	r2, [r7, #24]
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	091b      	lsrs	r3, r3, #4
 8001ea6:	f003 0201 	and.w	r2, r3, #1
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f003 0303 	and.w	r3, r3, #3
 8001ec4:	2b03      	cmp	r3, #3
 8001ec6:	d017      	beq.n	8001ef8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	005b      	lsls	r3, r3, #1
 8001ed2:	2203      	movs	r2, #3
 8001ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed8:	43db      	mvns	r3, r3
 8001eda:	69ba      	ldr	r2, [r7, #24]
 8001edc:	4013      	ands	r3, r2
 8001ede:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	689a      	ldr	r2, [r3, #8]
 8001ee4:	69fb      	ldr	r3, [r7, #28]
 8001ee6:	005b      	lsls	r3, r3, #1
 8001ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eec:	69ba      	ldr	r2, [r7, #24]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	69ba      	ldr	r2, [r7, #24]
 8001ef6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f003 0303 	and.w	r3, r3, #3
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d123      	bne.n	8001f4c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	08da      	lsrs	r2, r3, #3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	3208      	adds	r2, #8
 8001f0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f10:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	f003 0307 	and.w	r3, r3, #7
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	220f      	movs	r2, #15
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	43db      	mvns	r3, r3
 8001f22:	69ba      	ldr	r2, [r7, #24]
 8001f24:	4013      	ands	r3, r2
 8001f26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	691a      	ldr	r2, [r3, #16]
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	f003 0307 	and.w	r3, r3, #7
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	fa02 f303 	lsl.w	r3, r2, r3
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	08da      	lsrs	r2, r3, #3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	3208      	adds	r2, #8
 8001f46:	69b9      	ldr	r1, [r7, #24]
 8001f48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	005b      	lsls	r3, r3, #1
 8001f56:	2203      	movs	r2, #3
 8001f58:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5c:	43db      	mvns	r3, r3
 8001f5e:	69ba      	ldr	r2, [r7, #24]
 8001f60:	4013      	ands	r3, r2
 8001f62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f003 0203 	and.w	r2, r3, #3
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	005b      	lsls	r3, r3, #1
 8001f70:	fa02 f303 	lsl.w	r3, r2, r3
 8001f74:	69ba      	ldr	r2, [r7, #24]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	69ba      	ldr	r2, [r7, #24]
 8001f7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	f000 80b4 	beq.w	80020f6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f8e:	2300      	movs	r3, #0
 8001f90:	60fb      	str	r3, [r7, #12]
 8001f92:	4b60      	ldr	r3, [pc, #384]	; (8002114 <HAL_GPIO_Init+0x30c>)
 8001f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f96:	4a5f      	ldr	r2, [pc, #380]	; (8002114 <HAL_GPIO_Init+0x30c>)
 8001f98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f9c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f9e:	4b5d      	ldr	r3, [pc, #372]	; (8002114 <HAL_GPIO_Init+0x30c>)
 8001fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fa6:	60fb      	str	r3, [r7, #12]
 8001fa8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001faa:	4a5b      	ldr	r2, [pc, #364]	; (8002118 <HAL_GPIO_Init+0x310>)
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	089b      	lsrs	r3, r3, #2
 8001fb0:	3302      	adds	r3, #2
 8001fb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	f003 0303 	and.w	r3, r3, #3
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	220f      	movs	r2, #15
 8001fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc6:	43db      	mvns	r3, r3
 8001fc8:	69ba      	ldr	r2, [r7, #24]
 8001fca:	4013      	ands	r3, r2
 8001fcc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a52      	ldr	r2, [pc, #328]	; (800211c <HAL_GPIO_Init+0x314>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d02b      	beq.n	800202e <HAL_GPIO_Init+0x226>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a51      	ldr	r2, [pc, #324]	; (8002120 <HAL_GPIO_Init+0x318>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d025      	beq.n	800202a <HAL_GPIO_Init+0x222>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a50      	ldr	r2, [pc, #320]	; (8002124 <HAL_GPIO_Init+0x31c>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d01f      	beq.n	8002026 <HAL_GPIO_Init+0x21e>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a4f      	ldr	r2, [pc, #316]	; (8002128 <HAL_GPIO_Init+0x320>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d019      	beq.n	8002022 <HAL_GPIO_Init+0x21a>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a4e      	ldr	r2, [pc, #312]	; (800212c <HAL_GPIO_Init+0x324>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d013      	beq.n	800201e <HAL_GPIO_Init+0x216>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4a4d      	ldr	r2, [pc, #308]	; (8002130 <HAL_GPIO_Init+0x328>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d00d      	beq.n	800201a <HAL_GPIO_Init+0x212>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a4c      	ldr	r2, [pc, #304]	; (8002134 <HAL_GPIO_Init+0x32c>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d007      	beq.n	8002016 <HAL_GPIO_Init+0x20e>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a4b      	ldr	r2, [pc, #300]	; (8002138 <HAL_GPIO_Init+0x330>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d101      	bne.n	8002012 <HAL_GPIO_Init+0x20a>
 800200e:	2307      	movs	r3, #7
 8002010:	e00e      	b.n	8002030 <HAL_GPIO_Init+0x228>
 8002012:	2308      	movs	r3, #8
 8002014:	e00c      	b.n	8002030 <HAL_GPIO_Init+0x228>
 8002016:	2306      	movs	r3, #6
 8002018:	e00a      	b.n	8002030 <HAL_GPIO_Init+0x228>
 800201a:	2305      	movs	r3, #5
 800201c:	e008      	b.n	8002030 <HAL_GPIO_Init+0x228>
 800201e:	2304      	movs	r3, #4
 8002020:	e006      	b.n	8002030 <HAL_GPIO_Init+0x228>
 8002022:	2303      	movs	r3, #3
 8002024:	e004      	b.n	8002030 <HAL_GPIO_Init+0x228>
 8002026:	2302      	movs	r3, #2
 8002028:	e002      	b.n	8002030 <HAL_GPIO_Init+0x228>
 800202a:	2301      	movs	r3, #1
 800202c:	e000      	b.n	8002030 <HAL_GPIO_Init+0x228>
 800202e:	2300      	movs	r3, #0
 8002030:	69fa      	ldr	r2, [r7, #28]
 8002032:	f002 0203 	and.w	r2, r2, #3
 8002036:	0092      	lsls	r2, r2, #2
 8002038:	4093      	lsls	r3, r2
 800203a:	69ba      	ldr	r2, [r7, #24]
 800203c:	4313      	orrs	r3, r2
 800203e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002040:	4935      	ldr	r1, [pc, #212]	; (8002118 <HAL_GPIO_Init+0x310>)
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	089b      	lsrs	r3, r3, #2
 8002046:	3302      	adds	r3, #2
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800204e:	4b3b      	ldr	r3, [pc, #236]	; (800213c <HAL_GPIO_Init+0x334>)
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	43db      	mvns	r3, r3
 8002058:	69ba      	ldr	r2, [r7, #24]
 800205a:	4013      	ands	r3, r2
 800205c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d003      	beq.n	8002072 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800206a:	69ba      	ldr	r2, [r7, #24]
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	4313      	orrs	r3, r2
 8002070:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002072:	4a32      	ldr	r2, [pc, #200]	; (800213c <HAL_GPIO_Init+0x334>)
 8002074:	69bb      	ldr	r3, [r7, #24]
 8002076:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002078:	4b30      	ldr	r3, [pc, #192]	; (800213c <HAL_GPIO_Init+0x334>)
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	43db      	mvns	r3, r3
 8002082:	69ba      	ldr	r2, [r7, #24]
 8002084:	4013      	ands	r3, r2
 8002086:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d003      	beq.n	800209c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	4313      	orrs	r3, r2
 800209a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800209c:	4a27      	ldr	r2, [pc, #156]	; (800213c <HAL_GPIO_Init+0x334>)
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020a2:	4b26      	ldr	r3, [pc, #152]	; (800213c <HAL_GPIO_Init+0x334>)
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	43db      	mvns	r3, r3
 80020ac:	69ba      	ldr	r2, [r7, #24]
 80020ae:	4013      	ands	r3, r2
 80020b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d003      	beq.n	80020c6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80020be:	69ba      	ldr	r2, [r7, #24]
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020c6:	4a1d      	ldr	r2, [pc, #116]	; (800213c <HAL_GPIO_Init+0x334>)
 80020c8:	69bb      	ldr	r3, [r7, #24]
 80020ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020cc:	4b1b      	ldr	r3, [pc, #108]	; (800213c <HAL_GPIO_Init+0x334>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	43db      	mvns	r3, r3
 80020d6:	69ba      	ldr	r2, [r7, #24]
 80020d8:	4013      	ands	r3, r2
 80020da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d003      	beq.n	80020f0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80020e8:	69ba      	ldr	r2, [r7, #24]
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020f0:	4a12      	ldr	r2, [pc, #72]	; (800213c <HAL_GPIO_Init+0x334>)
 80020f2:	69bb      	ldr	r3, [r7, #24]
 80020f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	3301      	adds	r3, #1
 80020fa:	61fb      	str	r3, [r7, #28]
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	2b0f      	cmp	r3, #15
 8002100:	f67f ae90 	bls.w	8001e24 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002104:	bf00      	nop
 8002106:	bf00      	nop
 8002108:	3724      	adds	r7, #36	; 0x24
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	40023800 	.word	0x40023800
 8002118:	40013800 	.word	0x40013800
 800211c:	40020000 	.word	0x40020000
 8002120:	40020400 	.word	0x40020400
 8002124:	40020800 	.word	0x40020800
 8002128:	40020c00 	.word	0x40020c00
 800212c:	40021000 	.word	0x40021000
 8002130:	40021400 	.word	0x40021400
 8002134:	40021800 	.word	0x40021800
 8002138:	40021c00 	.word	0x40021c00
 800213c:	40013c00 	.word	0x40013c00

08002140 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b086      	sub	sp, #24
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d101      	bne.n	8002152 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e267      	b.n	8002622 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0301 	and.w	r3, r3, #1
 800215a:	2b00      	cmp	r3, #0
 800215c:	d075      	beq.n	800224a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800215e:	4b88      	ldr	r3, [pc, #544]	; (8002380 <HAL_RCC_OscConfig+0x240>)
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	f003 030c 	and.w	r3, r3, #12
 8002166:	2b04      	cmp	r3, #4
 8002168:	d00c      	beq.n	8002184 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800216a:	4b85      	ldr	r3, [pc, #532]	; (8002380 <HAL_RCC_OscConfig+0x240>)
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002172:	2b08      	cmp	r3, #8
 8002174:	d112      	bne.n	800219c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002176:	4b82      	ldr	r3, [pc, #520]	; (8002380 <HAL_RCC_OscConfig+0x240>)
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800217e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002182:	d10b      	bne.n	800219c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002184:	4b7e      	ldr	r3, [pc, #504]	; (8002380 <HAL_RCC_OscConfig+0x240>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d05b      	beq.n	8002248 <HAL_RCC_OscConfig+0x108>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d157      	bne.n	8002248 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e242      	b.n	8002622 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021a4:	d106      	bne.n	80021b4 <HAL_RCC_OscConfig+0x74>
 80021a6:	4b76      	ldr	r3, [pc, #472]	; (8002380 <HAL_RCC_OscConfig+0x240>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a75      	ldr	r2, [pc, #468]	; (8002380 <HAL_RCC_OscConfig+0x240>)
 80021ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021b0:	6013      	str	r3, [r2, #0]
 80021b2:	e01d      	b.n	80021f0 <HAL_RCC_OscConfig+0xb0>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021bc:	d10c      	bne.n	80021d8 <HAL_RCC_OscConfig+0x98>
 80021be:	4b70      	ldr	r3, [pc, #448]	; (8002380 <HAL_RCC_OscConfig+0x240>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a6f      	ldr	r2, [pc, #444]	; (8002380 <HAL_RCC_OscConfig+0x240>)
 80021c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021c8:	6013      	str	r3, [r2, #0]
 80021ca:	4b6d      	ldr	r3, [pc, #436]	; (8002380 <HAL_RCC_OscConfig+0x240>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a6c      	ldr	r2, [pc, #432]	; (8002380 <HAL_RCC_OscConfig+0x240>)
 80021d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021d4:	6013      	str	r3, [r2, #0]
 80021d6:	e00b      	b.n	80021f0 <HAL_RCC_OscConfig+0xb0>
 80021d8:	4b69      	ldr	r3, [pc, #420]	; (8002380 <HAL_RCC_OscConfig+0x240>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a68      	ldr	r2, [pc, #416]	; (8002380 <HAL_RCC_OscConfig+0x240>)
 80021de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021e2:	6013      	str	r3, [r2, #0]
 80021e4:	4b66      	ldr	r3, [pc, #408]	; (8002380 <HAL_RCC_OscConfig+0x240>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a65      	ldr	r2, [pc, #404]	; (8002380 <HAL_RCC_OscConfig+0x240>)
 80021ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d013      	beq.n	8002220 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f8:	f7fe ff0a 	bl	8001010 <HAL_GetTick>
 80021fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021fe:	e008      	b.n	8002212 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002200:	f7fe ff06 	bl	8001010 <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	2b64      	cmp	r3, #100	; 0x64
 800220c:	d901      	bls.n	8002212 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e207      	b.n	8002622 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002212:	4b5b      	ldr	r3, [pc, #364]	; (8002380 <HAL_RCC_OscConfig+0x240>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d0f0      	beq.n	8002200 <HAL_RCC_OscConfig+0xc0>
 800221e:	e014      	b.n	800224a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002220:	f7fe fef6 	bl	8001010 <HAL_GetTick>
 8002224:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002226:	e008      	b.n	800223a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002228:	f7fe fef2 	bl	8001010 <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	2b64      	cmp	r3, #100	; 0x64
 8002234:	d901      	bls.n	800223a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e1f3      	b.n	8002622 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800223a:	4b51      	ldr	r3, [pc, #324]	; (8002380 <HAL_RCC_OscConfig+0x240>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d1f0      	bne.n	8002228 <HAL_RCC_OscConfig+0xe8>
 8002246:	e000      	b.n	800224a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002248:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0302 	and.w	r3, r3, #2
 8002252:	2b00      	cmp	r3, #0
 8002254:	d063      	beq.n	800231e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002256:	4b4a      	ldr	r3, [pc, #296]	; (8002380 <HAL_RCC_OscConfig+0x240>)
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	f003 030c 	and.w	r3, r3, #12
 800225e:	2b00      	cmp	r3, #0
 8002260:	d00b      	beq.n	800227a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002262:	4b47      	ldr	r3, [pc, #284]	; (8002380 <HAL_RCC_OscConfig+0x240>)
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800226a:	2b08      	cmp	r3, #8
 800226c:	d11c      	bne.n	80022a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800226e:	4b44      	ldr	r3, [pc, #272]	; (8002380 <HAL_RCC_OscConfig+0x240>)
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d116      	bne.n	80022a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800227a:	4b41      	ldr	r3, [pc, #260]	; (8002380 <HAL_RCC_OscConfig+0x240>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0302 	and.w	r3, r3, #2
 8002282:	2b00      	cmp	r3, #0
 8002284:	d005      	beq.n	8002292 <HAL_RCC_OscConfig+0x152>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	2b01      	cmp	r3, #1
 800228c:	d001      	beq.n	8002292 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e1c7      	b.n	8002622 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002292:	4b3b      	ldr	r3, [pc, #236]	; (8002380 <HAL_RCC_OscConfig+0x240>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	691b      	ldr	r3, [r3, #16]
 800229e:	00db      	lsls	r3, r3, #3
 80022a0:	4937      	ldr	r1, [pc, #220]	; (8002380 <HAL_RCC_OscConfig+0x240>)
 80022a2:	4313      	orrs	r3, r2
 80022a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022a6:	e03a      	b.n	800231e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d020      	beq.n	80022f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022b0:	4b34      	ldr	r3, [pc, #208]	; (8002384 <HAL_RCC_OscConfig+0x244>)
 80022b2:	2201      	movs	r2, #1
 80022b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022b6:	f7fe feab 	bl	8001010 <HAL_GetTick>
 80022ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022bc:	e008      	b.n	80022d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022be:	f7fe fea7 	bl	8001010 <HAL_GetTick>
 80022c2:	4602      	mov	r2, r0
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d901      	bls.n	80022d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80022cc:	2303      	movs	r3, #3
 80022ce:	e1a8      	b.n	8002622 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022d0:	4b2b      	ldr	r3, [pc, #172]	; (8002380 <HAL_RCC_OscConfig+0x240>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0302 	and.w	r3, r3, #2
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d0f0      	beq.n	80022be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022dc:	4b28      	ldr	r3, [pc, #160]	; (8002380 <HAL_RCC_OscConfig+0x240>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	691b      	ldr	r3, [r3, #16]
 80022e8:	00db      	lsls	r3, r3, #3
 80022ea:	4925      	ldr	r1, [pc, #148]	; (8002380 <HAL_RCC_OscConfig+0x240>)
 80022ec:	4313      	orrs	r3, r2
 80022ee:	600b      	str	r3, [r1, #0]
 80022f0:	e015      	b.n	800231e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022f2:	4b24      	ldr	r3, [pc, #144]	; (8002384 <HAL_RCC_OscConfig+0x244>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f8:	f7fe fe8a 	bl	8001010 <HAL_GetTick>
 80022fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022fe:	e008      	b.n	8002312 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002300:	f7fe fe86 	bl	8001010 <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	2b02      	cmp	r3, #2
 800230c:	d901      	bls.n	8002312 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	e187      	b.n	8002622 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002312:	4b1b      	ldr	r3, [pc, #108]	; (8002380 <HAL_RCC_OscConfig+0x240>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0302 	and.w	r3, r3, #2
 800231a:	2b00      	cmp	r3, #0
 800231c:	d1f0      	bne.n	8002300 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0308 	and.w	r3, r3, #8
 8002326:	2b00      	cmp	r3, #0
 8002328:	d036      	beq.n	8002398 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	695b      	ldr	r3, [r3, #20]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d016      	beq.n	8002360 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002332:	4b15      	ldr	r3, [pc, #84]	; (8002388 <HAL_RCC_OscConfig+0x248>)
 8002334:	2201      	movs	r2, #1
 8002336:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002338:	f7fe fe6a 	bl	8001010 <HAL_GetTick>
 800233c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800233e:	e008      	b.n	8002352 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002340:	f7fe fe66 	bl	8001010 <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	2b02      	cmp	r3, #2
 800234c:	d901      	bls.n	8002352 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e167      	b.n	8002622 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002352:	4b0b      	ldr	r3, [pc, #44]	; (8002380 <HAL_RCC_OscConfig+0x240>)
 8002354:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002356:	f003 0302 	and.w	r3, r3, #2
 800235a:	2b00      	cmp	r3, #0
 800235c:	d0f0      	beq.n	8002340 <HAL_RCC_OscConfig+0x200>
 800235e:	e01b      	b.n	8002398 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002360:	4b09      	ldr	r3, [pc, #36]	; (8002388 <HAL_RCC_OscConfig+0x248>)
 8002362:	2200      	movs	r2, #0
 8002364:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002366:	f7fe fe53 	bl	8001010 <HAL_GetTick>
 800236a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800236c:	e00e      	b.n	800238c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800236e:	f7fe fe4f 	bl	8001010 <HAL_GetTick>
 8002372:	4602      	mov	r2, r0
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	2b02      	cmp	r3, #2
 800237a:	d907      	bls.n	800238c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800237c:	2303      	movs	r3, #3
 800237e:	e150      	b.n	8002622 <HAL_RCC_OscConfig+0x4e2>
 8002380:	40023800 	.word	0x40023800
 8002384:	42470000 	.word	0x42470000
 8002388:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800238c:	4b88      	ldr	r3, [pc, #544]	; (80025b0 <HAL_RCC_OscConfig+0x470>)
 800238e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002390:	f003 0302 	and.w	r3, r3, #2
 8002394:	2b00      	cmp	r3, #0
 8002396:	d1ea      	bne.n	800236e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0304 	and.w	r3, r3, #4
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	f000 8097 	beq.w	80024d4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023a6:	2300      	movs	r3, #0
 80023a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023aa:	4b81      	ldr	r3, [pc, #516]	; (80025b0 <HAL_RCC_OscConfig+0x470>)
 80023ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d10f      	bne.n	80023d6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023b6:	2300      	movs	r3, #0
 80023b8:	60bb      	str	r3, [r7, #8]
 80023ba:	4b7d      	ldr	r3, [pc, #500]	; (80025b0 <HAL_RCC_OscConfig+0x470>)
 80023bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023be:	4a7c      	ldr	r2, [pc, #496]	; (80025b0 <HAL_RCC_OscConfig+0x470>)
 80023c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023c4:	6413      	str	r3, [r2, #64]	; 0x40
 80023c6:	4b7a      	ldr	r3, [pc, #488]	; (80025b0 <HAL_RCC_OscConfig+0x470>)
 80023c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ce:	60bb      	str	r3, [r7, #8]
 80023d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023d2:	2301      	movs	r3, #1
 80023d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023d6:	4b77      	ldr	r3, [pc, #476]	; (80025b4 <HAL_RCC_OscConfig+0x474>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d118      	bne.n	8002414 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023e2:	4b74      	ldr	r3, [pc, #464]	; (80025b4 <HAL_RCC_OscConfig+0x474>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a73      	ldr	r2, [pc, #460]	; (80025b4 <HAL_RCC_OscConfig+0x474>)
 80023e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023ee:	f7fe fe0f 	bl	8001010 <HAL_GetTick>
 80023f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023f4:	e008      	b.n	8002408 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023f6:	f7fe fe0b 	bl	8001010 <HAL_GetTick>
 80023fa:	4602      	mov	r2, r0
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	2b02      	cmp	r3, #2
 8002402:	d901      	bls.n	8002408 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002404:	2303      	movs	r3, #3
 8002406:	e10c      	b.n	8002622 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002408:	4b6a      	ldr	r3, [pc, #424]	; (80025b4 <HAL_RCC_OscConfig+0x474>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002410:	2b00      	cmp	r3, #0
 8002412:	d0f0      	beq.n	80023f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	2b01      	cmp	r3, #1
 800241a:	d106      	bne.n	800242a <HAL_RCC_OscConfig+0x2ea>
 800241c:	4b64      	ldr	r3, [pc, #400]	; (80025b0 <HAL_RCC_OscConfig+0x470>)
 800241e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002420:	4a63      	ldr	r2, [pc, #396]	; (80025b0 <HAL_RCC_OscConfig+0x470>)
 8002422:	f043 0301 	orr.w	r3, r3, #1
 8002426:	6713      	str	r3, [r2, #112]	; 0x70
 8002428:	e01c      	b.n	8002464 <HAL_RCC_OscConfig+0x324>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	2b05      	cmp	r3, #5
 8002430:	d10c      	bne.n	800244c <HAL_RCC_OscConfig+0x30c>
 8002432:	4b5f      	ldr	r3, [pc, #380]	; (80025b0 <HAL_RCC_OscConfig+0x470>)
 8002434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002436:	4a5e      	ldr	r2, [pc, #376]	; (80025b0 <HAL_RCC_OscConfig+0x470>)
 8002438:	f043 0304 	orr.w	r3, r3, #4
 800243c:	6713      	str	r3, [r2, #112]	; 0x70
 800243e:	4b5c      	ldr	r3, [pc, #368]	; (80025b0 <HAL_RCC_OscConfig+0x470>)
 8002440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002442:	4a5b      	ldr	r2, [pc, #364]	; (80025b0 <HAL_RCC_OscConfig+0x470>)
 8002444:	f043 0301 	orr.w	r3, r3, #1
 8002448:	6713      	str	r3, [r2, #112]	; 0x70
 800244a:	e00b      	b.n	8002464 <HAL_RCC_OscConfig+0x324>
 800244c:	4b58      	ldr	r3, [pc, #352]	; (80025b0 <HAL_RCC_OscConfig+0x470>)
 800244e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002450:	4a57      	ldr	r2, [pc, #348]	; (80025b0 <HAL_RCC_OscConfig+0x470>)
 8002452:	f023 0301 	bic.w	r3, r3, #1
 8002456:	6713      	str	r3, [r2, #112]	; 0x70
 8002458:	4b55      	ldr	r3, [pc, #340]	; (80025b0 <HAL_RCC_OscConfig+0x470>)
 800245a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800245c:	4a54      	ldr	r2, [pc, #336]	; (80025b0 <HAL_RCC_OscConfig+0x470>)
 800245e:	f023 0304 	bic.w	r3, r3, #4
 8002462:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d015      	beq.n	8002498 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800246c:	f7fe fdd0 	bl	8001010 <HAL_GetTick>
 8002470:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002472:	e00a      	b.n	800248a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002474:	f7fe fdcc 	bl	8001010 <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002482:	4293      	cmp	r3, r2
 8002484:	d901      	bls.n	800248a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e0cb      	b.n	8002622 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800248a:	4b49      	ldr	r3, [pc, #292]	; (80025b0 <HAL_RCC_OscConfig+0x470>)
 800248c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800248e:	f003 0302 	and.w	r3, r3, #2
 8002492:	2b00      	cmp	r3, #0
 8002494:	d0ee      	beq.n	8002474 <HAL_RCC_OscConfig+0x334>
 8002496:	e014      	b.n	80024c2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002498:	f7fe fdba 	bl	8001010 <HAL_GetTick>
 800249c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800249e:	e00a      	b.n	80024b6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024a0:	f7fe fdb6 	bl	8001010 <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d901      	bls.n	80024b6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e0b5      	b.n	8002622 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024b6:	4b3e      	ldr	r3, [pc, #248]	; (80025b0 <HAL_RCC_OscConfig+0x470>)
 80024b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ba:	f003 0302 	and.w	r3, r3, #2
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d1ee      	bne.n	80024a0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024c2:	7dfb      	ldrb	r3, [r7, #23]
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d105      	bne.n	80024d4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024c8:	4b39      	ldr	r3, [pc, #228]	; (80025b0 <HAL_RCC_OscConfig+0x470>)
 80024ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024cc:	4a38      	ldr	r2, [pc, #224]	; (80025b0 <HAL_RCC_OscConfig+0x470>)
 80024ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024d2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	699b      	ldr	r3, [r3, #24]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	f000 80a1 	beq.w	8002620 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80024de:	4b34      	ldr	r3, [pc, #208]	; (80025b0 <HAL_RCC_OscConfig+0x470>)
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	f003 030c 	and.w	r3, r3, #12
 80024e6:	2b08      	cmp	r3, #8
 80024e8:	d05c      	beq.n	80025a4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	699b      	ldr	r3, [r3, #24]
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d141      	bne.n	8002576 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024f2:	4b31      	ldr	r3, [pc, #196]	; (80025b8 <HAL_RCC_OscConfig+0x478>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f8:	f7fe fd8a 	bl	8001010 <HAL_GetTick>
 80024fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024fe:	e008      	b.n	8002512 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002500:	f7fe fd86 	bl	8001010 <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	2b02      	cmp	r3, #2
 800250c:	d901      	bls.n	8002512 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e087      	b.n	8002622 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002512:	4b27      	ldr	r3, [pc, #156]	; (80025b0 <HAL_RCC_OscConfig+0x470>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d1f0      	bne.n	8002500 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	69da      	ldr	r2, [r3, #28]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6a1b      	ldr	r3, [r3, #32]
 8002526:	431a      	orrs	r2, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252c:	019b      	lsls	r3, r3, #6
 800252e:	431a      	orrs	r2, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002534:	085b      	lsrs	r3, r3, #1
 8002536:	3b01      	subs	r3, #1
 8002538:	041b      	lsls	r3, r3, #16
 800253a:	431a      	orrs	r2, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002540:	061b      	lsls	r3, r3, #24
 8002542:	491b      	ldr	r1, [pc, #108]	; (80025b0 <HAL_RCC_OscConfig+0x470>)
 8002544:	4313      	orrs	r3, r2
 8002546:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002548:	4b1b      	ldr	r3, [pc, #108]	; (80025b8 <HAL_RCC_OscConfig+0x478>)
 800254a:	2201      	movs	r2, #1
 800254c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800254e:	f7fe fd5f 	bl	8001010 <HAL_GetTick>
 8002552:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002554:	e008      	b.n	8002568 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002556:	f7fe fd5b 	bl	8001010 <HAL_GetTick>
 800255a:	4602      	mov	r2, r0
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	2b02      	cmp	r3, #2
 8002562:	d901      	bls.n	8002568 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002564:	2303      	movs	r3, #3
 8002566:	e05c      	b.n	8002622 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002568:	4b11      	ldr	r3, [pc, #68]	; (80025b0 <HAL_RCC_OscConfig+0x470>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d0f0      	beq.n	8002556 <HAL_RCC_OscConfig+0x416>
 8002574:	e054      	b.n	8002620 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002576:	4b10      	ldr	r3, [pc, #64]	; (80025b8 <HAL_RCC_OscConfig+0x478>)
 8002578:	2200      	movs	r2, #0
 800257a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800257c:	f7fe fd48 	bl	8001010 <HAL_GetTick>
 8002580:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002582:	e008      	b.n	8002596 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002584:	f7fe fd44 	bl	8001010 <HAL_GetTick>
 8002588:	4602      	mov	r2, r0
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	2b02      	cmp	r3, #2
 8002590:	d901      	bls.n	8002596 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002592:	2303      	movs	r3, #3
 8002594:	e045      	b.n	8002622 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002596:	4b06      	ldr	r3, [pc, #24]	; (80025b0 <HAL_RCC_OscConfig+0x470>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d1f0      	bne.n	8002584 <HAL_RCC_OscConfig+0x444>
 80025a2:	e03d      	b.n	8002620 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	699b      	ldr	r3, [r3, #24]
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d107      	bne.n	80025bc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e038      	b.n	8002622 <HAL_RCC_OscConfig+0x4e2>
 80025b0:	40023800 	.word	0x40023800
 80025b4:	40007000 	.word	0x40007000
 80025b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80025bc:	4b1b      	ldr	r3, [pc, #108]	; (800262c <HAL_RCC_OscConfig+0x4ec>)
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	699b      	ldr	r3, [r3, #24]
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d028      	beq.n	800261c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d121      	bne.n	800261c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d11a      	bne.n	800261c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025e6:	68fa      	ldr	r2, [r7, #12]
 80025e8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80025ec:	4013      	ands	r3, r2
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80025f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d111      	bne.n	800261c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002602:	085b      	lsrs	r3, r3, #1
 8002604:	3b01      	subs	r3, #1
 8002606:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002608:	429a      	cmp	r2, r3
 800260a:	d107      	bne.n	800261c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002616:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002618:	429a      	cmp	r2, r3
 800261a:	d001      	beq.n	8002620 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e000      	b.n	8002622 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002620:	2300      	movs	r3, #0
}
 8002622:	4618      	mov	r0, r3
 8002624:	3718      	adds	r7, #24
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	40023800 	.word	0x40023800

08002630 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d101      	bne.n	8002644 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e0cc      	b.n	80027de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002644:	4b68      	ldr	r3, [pc, #416]	; (80027e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0307 	and.w	r3, r3, #7
 800264c:	683a      	ldr	r2, [r7, #0]
 800264e:	429a      	cmp	r2, r3
 8002650:	d90c      	bls.n	800266c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002652:	4b65      	ldr	r3, [pc, #404]	; (80027e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002654:	683a      	ldr	r2, [r7, #0]
 8002656:	b2d2      	uxtb	r2, r2
 8002658:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800265a:	4b63      	ldr	r3, [pc, #396]	; (80027e8 <HAL_RCC_ClockConfig+0x1b8>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0307 	and.w	r3, r3, #7
 8002662:	683a      	ldr	r2, [r7, #0]
 8002664:	429a      	cmp	r2, r3
 8002666:	d001      	beq.n	800266c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e0b8      	b.n	80027de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0302 	and.w	r3, r3, #2
 8002674:	2b00      	cmp	r3, #0
 8002676:	d020      	beq.n	80026ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0304 	and.w	r3, r3, #4
 8002680:	2b00      	cmp	r3, #0
 8002682:	d005      	beq.n	8002690 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002684:	4b59      	ldr	r3, [pc, #356]	; (80027ec <HAL_RCC_ClockConfig+0x1bc>)
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	4a58      	ldr	r2, [pc, #352]	; (80027ec <HAL_RCC_ClockConfig+0x1bc>)
 800268a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800268e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0308 	and.w	r3, r3, #8
 8002698:	2b00      	cmp	r3, #0
 800269a:	d005      	beq.n	80026a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800269c:	4b53      	ldr	r3, [pc, #332]	; (80027ec <HAL_RCC_ClockConfig+0x1bc>)
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	4a52      	ldr	r2, [pc, #328]	; (80027ec <HAL_RCC_ClockConfig+0x1bc>)
 80026a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80026a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026a8:	4b50      	ldr	r3, [pc, #320]	; (80027ec <HAL_RCC_ClockConfig+0x1bc>)
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	494d      	ldr	r1, [pc, #308]	; (80027ec <HAL_RCC_ClockConfig+0x1bc>)
 80026b6:	4313      	orrs	r3, r2
 80026b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0301 	and.w	r3, r3, #1
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d044      	beq.n	8002750 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d107      	bne.n	80026de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ce:	4b47      	ldr	r3, [pc, #284]	; (80027ec <HAL_RCC_ClockConfig+0x1bc>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d119      	bne.n	800270e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e07f      	b.n	80027de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d003      	beq.n	80026ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026ea:	2b03      	cmp	r3, #3
 80026ec:	d107      	bne.n	80026fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026ee:	4b3f      	ldr	r3, [pc, #252]	; (80027ec <HAL_RCC_ClockConfig+0x1bc>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d109      	bne.n	800270e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e06f      	b.n	80027de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026fe:	4b3b      	ldr	r3, [pc, #236]	; (80027ec <HAL_RCC_ClockConfig+0x1bc>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0302 	and.w	r3, r3, #2
 8002706:	2b00      	cmp	r3, #0
 8002708:	d101      	bne.n	800270e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e067      	b.n	80027de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800270e:	4b37      	ldr	r3, [pc, #220]	; (80027ec <HAL_RCC_ClockConfig+0x1bc>)
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	f023 0203 	bic.w	r2, r3, #3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	4934      	ldr	r1, [pc, #208]	; (80027ec <HAL_RCC_ClockConfig+0x1bc>)
 800271c:	4313      	orrs	r3, r2
 800271e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002720:	f7fe fc76 	bl	8001010 <HAL_GetTick>
 8002724:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002726:	e00a      	b.n	800273e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002728:	f7fe fc72 	bl	8001010 <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	f241 3288 	movw	r2, #5000	; 0x1388
 8002736:	4293      	cmp	r3, r2
 8002738:	d901      	bls.n	800273e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e04f      	b.n	80027de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800273e:	4b2b      	ldr	r3, [pc, #172]	; (80027ec <HAL_RCC_ClockConfig+0x1bc>)
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	f003 020c 	and.w	r2, r3, #12
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	429a      	cmp	r2, r3
 800274e:	d1eb      	bne.n	8002728 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002750:	4b25      	ldr	r3, [pc, #148]	; (80027e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0307 	and.w	r3, r3, #7
 8002758:	683a      	ldr	r2, [r7, #0]
 800275a:	429a      	cmp	r2, r3
 800275c:	d20c      	bcs.n	8002778 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800275e:	4b22      	ldr	r3, [pc, #136]	; (80027e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002760:	683a      	ldr	r2, [r7, #0]
 8002762:	b2d2      	uxtb	r2, r2
 8002764:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002766:	4b20      	ldr	r3, [pc, #128]	; (80027e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0307 	and.w	r3, r3, #7
 800276e:	683a      	ldr	r2, [r7, #0]
 8002770:	429a      	cmp	r2, r3
 8002772:	d001      	beq.n	8002778 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e032      	b.n	80027de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0304 	and.w	r3, r3, #4
 8002780:	2b00      	cmp	r3, #0
 8002782:	d008      	beq.n	8002796 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002784:	4b19      	ldr	r3, [pc, #100]	; (80027ec <HAL_RCC_ClockConfig+0x1bc>)
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	4916      	ldr	r1, [pc, #88]	; (80027ec <HAL_RCC_ClockConfig+0x1bc>)
 8002792:	4313      	orrs	r3, r2
 8002794:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0308 	and.w	r3, r3, #8
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d009      	beq.n	80027b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027a2:	4b12      	ldr	r3, [pc, #72]	; (80027ec <HAL_RCC_ClockConfig+0x1bc>)
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	691b      	ldr	r3, [r3, #16]
 80027ae:	00db      	lsls	r3, r3, #3
 80027b0:	490e      	ldr	r1, [pc, #56]	; (80027ec <HAL_RCC_ClockConfig+0x1bc>)
 80027b2:	4313      	orrs	r3, r2
 80027b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80027b6:	f000 f821 	bl	80027fc <HAL_RCC_GetSysClockFreq>
 80027ba:	4602      	mov	r2, r0
 80027bc:	4b0b      	ldr	r3, [pc, #44]	; (80027ec <HAL_RCC_ClockConfig+0x1bc>)
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	091b      	lsrs	r3, r3, #4
 80027c2:	f003 030f 	and.w	r3, r3, #15
 80027c6:	490a      	ldr	r1, [pc, #40]	; (80027f0 <HAL_RCC_ClockConfig+0x1c0>)
 80027c8:	5ccb      	ldrb	r3, [r1, r3]
 80027ca:	fa22 f303 	lsr.w	r3, r2, r3
 80027ce:	4a09      	ldr	r2, [pc, #36]	; (80027f4 <HAL_RCC_ClockConfig+0x1c4>)
 80027d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80027d2:	4b09      	ldr	r3, [pc, #36]	; (80027f8 <HAL_RCC_ClockConfig+0x1c8>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4618      	mov	r0, r3
 80027d8:	f7fe fbd6 	bl	8000f88 <HAL_InitTick>

  return HAL_OK;
 80027dc:	2300      	movs	r3, #0
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3710      	adds	r7, #16
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	40023c00 	.word	0x40023c00
 80027ec:	40023800 	.word	0x40023800
 80027f0:	08004144 	.word	0x08004144
 80027f4:	20000000 	.word	0x20000000
 80027f8:	20000004 	.word	0x20000004

080027fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002800:	b094      	sub	sp, #80	; 0x50
 8002802:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002804:	2300      	movs	r3, #0
 8002806:	647b      	str	r3, [r7, #68]	; 0x44
 8002808:	2300      	movs	r3, #0
 800280a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800280c:	2300      	movs	r3, #0
 800280e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002810:	2300      	movs	r3, #0
 8002812:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002814:	4b79      	ldr	r3, [pc, #484]	; (80029fc <HAL_RCC_GetSysClockFreq+0x200>)
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	f003 030c 	and.w	r3, r3, #12
 800281c:	2b08      	cmp	r3, #8
 800281e:	d00d      	beq.n	800283c <HAL_RCC_GetSysClockFreq+0x40>
 8002820:	2b08      	cmp	r3, #8
 8002822:	f200 80e1 	bhi.w	80029e8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002826:	2b00      	cmp	r3, #0
 8002828:	d002      	beq.n	8002830 <HAL_RCC_GetSysClockFreq+0x34>
 800282a:	2b04      	cmp	r3, #4
 800282c:	d003      	beq.n	8002836 <HAL_RCC_GetSysClockFreq+0x3a>
 800282e:	e0db      	b.n	80029e8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002830:	4b73      	ldr	r3, [pc, #460]	; (8002a00 <HAL_RCC_GetSysClockFreq+0x204>)
 8002832:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002834:	e0db      	b.n	80029ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002836:	4b73      	ldr	r3, [pc, #460]	; (8002a04 <HAL_RCC_GetSysClockFreq+0x208>)
 8002838:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800283a:	e0d8      	b.n	80029ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800283c:	4b6f      	ldr	r3, [pc, #444]	; (80029fc <HAL_RCC_GetSysClockFreq+0x200>)
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002844:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002846:	4b6d      	ldr	r3, [pc, #436]	; (80029fc <HAL_RCC_GetSysClockFreq+0x200>)
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d063      	beq.n	800291a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002852:	4b6a      	ldr	r3, [pc, #424]	; (80029fc <HAL_RCC_GetSysClockFreq+0x200>)
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	099b      	lsrs	r3, r3, #6
 8002858:	2200      	movs	r2, #0
 800285a:	63bb      	str	r3, [r7, #56]	; 0x38
 800285c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800285e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002860:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002864:	633b      	str	r3, [r7, #48]	; 0x30
 8002866:	2300      	movs	r3, #0
 8002868:	637b      	str	r3, [r7, #52]	; 0x34
 800286a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800286e:	4622      	mov	r2, r4
 8002870:	462b      	mov	r3, r5
 8002872:	f04f 0000 	mov.w	r0, #0
 8002876:	f04f 0100 	mov.w	r1, #0
 800287a:	0159      	lsls	r1, r3, #5
 800287c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002880:	0150      	lsls	r0, r2, #5
 8002882:	4602      	mov	r2, r0
 8002884:	460b      	mov	r3, r1
 8002886:	4621      	mov	r1, r4
 8002888:	1a51      	subs	r1, r2, r1
 800288a:	6139      	str	r1, [r7, #16]
 800288c:	4629      	mov	r1, r5
 800288e:	eb63 0301 	sbc.w	r3, r3, r1
 8002892:	617b      	str	r3, [r7, #20]
 8002894:	f04f 0200 	mov.w	r2, #0
 8002898:	f04f 0300 	mov.w	r3, #0
 800289c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80028a0:	4659      	mov	r1, fp
 80028a2:	018b      	lsls	r3, r1, #6
 80028a4:	4651      	mov	r1, sl
 80028a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80028aa:	4651      	mov	r1, sl
 80028ac:	018a      	lsls	r2, r1, #6
 80028ae:	4651      	mov	r1, sl
 80028b0:	ebb2 0801 	subs.w	r8, r2, r1
 80028b4:	4659      	mov	r1, fp
 80028b6:	eb63 0901 	sbc.w	r9, r3, r1
 80028ba:	f04f 0200 	mov.w	r2, #0
 80028be:	f04f 0300 	mov.w	r3, #0
 80028c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80028c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80028ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80028ce:	4690      	mov	r8, r2
 80028d0:	4699      	mov	r9, r3
 80028d2:	4623      	mov	r3, r4
 80028d4:	eb18 0303 	adds.w	r3, r8, r3
 80028d8:	60bb      	str	r3, [r7, #8]
 80028da:	462b      	mov	r3, r5
 80028dc:	eb49 0303 	adc.w	r3, r9, r3
 80028e0:	60fb      	str	r3, [r7, #12]
 80028e2:	f04f 0200 	mov.w	r2, #0
 80028e6:	f04f 0300 	mov.w	r3, #0
 80028ea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80028ee:	4629      	mov	r1, r5
 80028f0:	024b      	lsls	r3, r1, #9
 80028f2:	4621      	mov	r1, r4
 80028f4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80028f8:	4621      	mov	r1, r4
 80028fa:	024a      	lsls	r2, r1, #9
 80028fc:	4610      	mov	r0, r2
 80028fe:	4619      	mov	r1, r3
 8002900:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002902:	2200      	movs	r2, #0
 8002904:	62bb      	str	r3, [r7, #40]	; 0x28
 8002906:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002908:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800290c:	f7fd fc5c 	bl	80001c8 <__aeabi_uldivmod>
 8002910:	4602      	mov	r2, r0
 8002912:	460b      	mov	r3, r1
 8002914:	4613      	mov	r3, r2
 8002916:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002918:	e058      	b.n	80029cc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800291a:	4b38      	ldr	r3, [pc, #224]	; (80029fc <HAL_RCC_GetSysClockFreq+0x200>)
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	099b      	lsrs	r3, r3, #6
 8002920:	2200      	movs	r2, #0
 8002922:	4618      	mov	r0, r3
 8002924:	4611      	mov	r1, r2
 8002926:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800292a:	623b      	str	r3, [r7, #32]
 800292c:	2300      	movs	r3, #0
 800292e:	627b      	str	r3, [r7, #36]	; 0x24
 8002930:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002934:	4642      	mov	r2, r8
 8002936:	464b      	mov	r3, r9
 8002938:	f04f 0000 	mov.w	r0, #0
 800293c:	f04f 0100 	mov.w	r1, #0
 8002940:	0159      	lsls	r1, r3, #5
 8002942:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002946:	0150      	lsls	r0, r2, #5
 8002948:	4602      	mov	r2, r0
 800294a:	460b      	mov	r3, r1
 800294c:	4641      	mov	r1, r8
 800294e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002952:	4649      	mov	r1, r9
 8002954:	eb63 0b01 	sbc.w	fp, r3, r1
 8002958:	f04f 0200 	mov.w	r2, #0
 800295c:	f04f 0300 	mov.w	r3, #0
 8002960:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002964:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002968:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800296c:	ebb2 040a 	subs.w	r4, r2, sl
 8002970:	eb63 050b 	sbc.w	r5, r3, fp
 8002974:	f04f 0200 	mov.w	r2, #0
 8002978:	f04f 0300 	mov.w	r3, #0
 800297c:	00eb      	lsls	r3, r5, #3
 800297e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002982:	00e2      	lsls	r2, r4, #3
 8002984:	4614      	mov	r4, r2
 8002986:	461d      	mov	r5, r3
 8002988:	4643      	mov	r3, r8
 800298a:	18e3      	adds	r3, r4, r3
 800298c:	603b      	str	r3, [r7, #0]
 800298e:	464b      	mov	r3, r9
 8002990:	eb45 0303 	adc.w	r3, r5, r3
 8002994:	607b      	str	r3, [r7, #4]
 8002996:	f04f 0200 	mov.w	r2, #0
 800299a:	f04f 0300 	mov.w	r3, #0
 800299e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80029a2:	4629      	mov	r1, r5
 80029a4:	028b      	lsls	r3, r1, #10
 80029a6:	4621      	mov	r1, r4
 80029a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80029ac:	4621      	mov	r1, r4
 80029ae:	028a      	lsls	r2, r1, #10
 80029b0:	4610      	mov	r0, r2
 80029b2:	4619      	mov	r1, r3
 80029b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029b6:	2200      	movs	r2, #0
 80029b8:	61bb      	str	r3, [r7, #24]
 80029ba:	61fa      	str	r2, [r7, #28]
 80029bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029c0:	f7fd fc02 	bl	80001c8 <__aeabi_uldivmod>
 80029c4:	4602      	mov	r2, r0
 80029c6:	460b      	mov	r3, r1
 80029c8:	4613      	mov	r3, r2
 80029ca:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80029cc:	4b0b      	ldr	r3, [pc, #44]	; (80029fc <HAL_RCC_GetSysClockFreq+0x200>)
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	0c1b      	lsrs	r3, r3, #16
 80029d2:	f003 0303 	and.w	r3, r3, #3
 80029d6:	3301      	adds	r3, #1
 80029d8:	005b      	lsls	r3, r3, #1
 80029da:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80029dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80029de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80029e4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80029e6:	e002      	b.n	80029ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80029e8:	4b05      	ldr	r3, [pc, #20]	; (8002a00 <HAL_RCC_GetSysClockFreq+0x204>)
 80029ea:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80029ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3750      	adds	r7, #80	; 0x50
 80029f4:	46bd      	mov	sp, r7
 80029f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80029fa:	bf00      	nop
 80029fc:	40023800 	.word	0x40023800
 8002a00:	00f42400 	.word	0x00f42400
 8002a04:	007a1200 	.word	0x007a1200

08002a08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a0c:	4b03      	ldr	r3, [pc, #12]	; (8002a1c <HAL_RCC_GetHCLKFreq+0x14>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop
 8002a1c:	20000000 	.word	0x20000000

08002a20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002a24:	f7ff fff0 	bl	8002a08 <HAL_RCC_GetHCLKFreq>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	4b05      	ldr	r3, [pc, #20]	; (8002a40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	0a9b      	lsrs	r3, r3, #10
 8002a30:	f003 0307 	and.w	r3, r3, #7
 8002a34:	4903      	ldr	r1, [pc, #12]	; (8002a44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a36:	5ccb      	ldrb	r3, [r1, r3]
 8002a38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	40023800 	.word	0x40023800
 8002a44:	08004154 	.word	0x08004154

08002a48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002a4c:	f7ff ffdc 	bl	8002a08 <HAL_RCC_GetHCLKFreq>
 8002a50:	4602      	mov	r2, r0
 8002a52:	4b05      	ldr	r3, [pc, #20]	; (8002a68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	0b5b      	lsrs	r3, r3, #13
 8002a58:	f003 0307 	and.w	r3, r3, #7
 8002a5c:	4903      	ldr	r1, [pc, #12]	; (8002a6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a5e:	5ccb      	ldrb	r3, [r1, r3]
 8002a60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	40023800 	.word	0x40023800
 8002a6c:	08004154 	.word	0x08004154

08002a70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b082      	sub	sp, #8
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d101      	bne.n	8002a82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e041      	b.n	8002b06 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d106      	bne.n	8002a9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f7fe f85e 	bl	8000b58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2202      	movs	r2, #2
 8002aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	3304      	adds	r3, #4
 8002aac:	4619      	mov	r1, r3
 8002aae:	4610      	mov	r0, r2
 8002ab0:	f000 fa2e 	bl	8002f10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b04:	2300      	movs	r3, #0
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3708      	adds	r7, #8
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}

08002b0e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b0e:	b580      	push	{r7, lr}
 8002b10:	b082      	sub	sp, #8
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	691b      	ldr	r3, [r3, #16]
 8002b1c:	f003 0302 	and.w	r3, r3, #2
 8002b20:	2b02      	cmp	r3, #2
 8002b22:	d122      	bne.n	8002b6a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	f003 0302 	and.w	r3, r3, #2
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d11b      	bne.n	8002b6a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f06f 0202 	mvn.w	r2, #2
 8002b3a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	699b      	ldr	r3, [r3, #24]
 8002b48:	f003 0303 	and.w	r3, r3, #3
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d003      	beq.n	8002b58 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f000 f9bf 	bl	8002ed4 <HAL_TIM_IC_CaptureCallback>
 8002b56:	e005      	b.n	8002b64 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f000 f9b1 	bl	8002ec0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f000 f9c2 	bl	8002ee8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	691b      	ldr	r3, [r3, #16]
 8002b70:	f003 0304 	and.w	r3, r3, #4
 8002b74:	2b04      	cmp	r3, #4
 8002b76:	d122      	bne.n	8002bbe <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	68db      	ldr	r3, [r3, #12]
 8002b7e:	f003 0304 	and.w	r3, r3, #4
 8002b82:	2b04      	cmp	r3, #4
 8002b84:	d11b      	bne.n	8002bbe <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f06f 0204 	mvn.w	r2, #4
 8002b8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2202      	movs	r2, #2
 8002b94:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	699b      	ldr	r3, [r3, #24]
 8002b9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d003      	beq.n	8002bac <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f000 f995 	bl	8002ed4 <HAL_TIM_IC_CaptureCallback>
 8002baa:	e005      	b.n	8002bb8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f000 f987 	bl	8002ec0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f000 f998 	bl	8002ee8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	691b      	ldr	r3, [r3, #16]
 8002bc4:	f003 0308 	and.w	r3, r3, #8
 8002bc8:	2b08      	cmp	r3, #8
 8002bca:	d122      	bne.n	8002c12 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	68db      	ldr	r3, [r3, #12]
 8002bd2:	f003 0308 	and.w	r3, r3, #8
 8002bd6:	2b08      	cmp	r3, #8
 8002bd8:	d11b      	bne.n	8002c12 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f06f 0208 	mvn.w	r2, #8
 8002be2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2204      	movs	r2, #4
 8002be8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	69db      	ldr	r3, [r3, #28]
 8002bf0:	f003 0303 	and.w	r3, r3, #3
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d003      	beq.n	8002c00 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f000 f96b 	bl	8002ed4 <HAL_TIM_IC_CaptureCallback>
 8002bfe:	e005      	b.n	8002c0c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f000 f95d 	bl	8002ec0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f000 f96e 	bl	8002ee8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	691b      	ldr	r3, [r3, #16]
 8002c18:	f003 0310 	and.w	r3, r3, #16
 8002c1c:	2b10      	cmp	r3, #16
 8002c1e:	d122      	bne.n	8002c66 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	f003 0310 	and.w	r3, r3, #16
 8002c2a:	2b10      	cmp	r3, #16
 8002c2c:	d11b      	bne.n	8002c66 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f06f 0210 	mvn.w	r2, #16
 8002c36:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2208      	movs	r2, #8
 8002c3c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	69db      	ldr	r3, [r3, #28]
 8002c44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d003      	beq.n	8002c54 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f000 f941 	bl	8002ed4 <HAL_TIM_IC_CaptureCallback>
 8002c52:	e005      	b.n	8002c60 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f000 f933 	bl	8002ec0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f000 f944 	bl	8002ee8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2200      	movs	r2, #0
 8002c64:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	691b      	ldr	r3, [r3, #16]
 8002c6c:	f003 0301 	and.w	r3, r3, #1
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d10e      	bne.n	8002c92 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	f003 0301 	and.w	r3, r3, #1
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d107      	bne.n	8002c92 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f06f 0201 	mvn.w	r2, #1
 8002c8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f000 f90d 	bl	8002eac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	691b      	ldr	r3, [r3, #16]
 8002c98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c9c:	2b80      	cmp	r3, #128	; 0x80
 8002c9e:	d10e      	bne.n	8002cbe <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002caa:	2b80      	cmp	r3, #128	; 0x80
 8002cac:	d107      	bne.n	8002cbe <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002cb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f000 fae9 	bl	8003290 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	691b      	ldr	r3, [r3, #16]
 8002cc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cc8:	2b40      	cmp	r3, #64	; 0x40
 8002cca:	d10e      	bne.n	8002cea <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cd6:	2b40      	cmp	r3, #64	; 0x40
 8002cd8:	d107      	bne.n	8002cea <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ce2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f000 f909 	bl	8002efc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	691b      	ldr	r3, [r3, #16]
 8002cf0:	f003 0320 	and.w	r3, r3, #32
 8002cf4:	2b20      	cmp	r3, #32
 8002cf6:	d10e      	bne.n	8002d16 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	f003 0320 	and.w	r3, r3, #32
 8002d02:	2b20      	cmp	r3, #32
 8002d04:	d107      	bne.n	8002d16 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f06f 0220 	mvn.w	r2, #32
 8002d0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	f000 fab3 	bl	800327c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d16:	bf00      	nop
 8002d18:	3708      	adds	r7, #8
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}

08002d1e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d1e:	b580      	push	{r7, lr}
 8002d20:	b084      	sub	sp, #16
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]
 8002d26:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d101      	bne.n	8002d3a <HAL_TIM_ConfigClockSource+0x1c>
 8002d36:	2302      	movs	r3, #2
 8002d38:	e0b4      	b.n	8002ea4 <HAL_TIM_ConfigClockSource+0x186>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2202      	movs	r2, #2
 8002d46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002d58:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d60:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	68ba      	ldr	r2, [r7, #8]
 8002d68:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d72:	d03e      	beq.n	8002df2 <HAL_TIM_ConfigClockSource+0xd4>
 8002d74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d78:	f200 8087 	bhi.w	8002e8a <HAL_TIM_ConfigClockSource+0x16c>
 8002d7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d80:	f000 8086 	beq.w	8002e90 <HAL_TIM_ConfigClockSource+0x172>
 8002d84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d88:	d87f      	bhi.n	8002e8a <HAL_TIM_ConfigClockSource+0x16c>
 8002d8a:	2b70      	cmp	r3, #112	; 0x70
 8002d8c:	d01a      	beq.n	8002dc4 <HAL_TIM_ConfigClockSource+0xa6>
 8002d8e:	2b70      	cmp	r3, #112	; 0x70
 8002d90:	d87b      	bhi.n	8002e8a <HAL_TIM_ConfigClockSource+0x16c>
 8002d92:	2b60      	cmp	r3, #96	; 0x60
 8002d94:	d050      	beq.n	8002e38 <HAL_TIM_ConfigClockSource+0x11a>
 8002d96:	2b60      	cmp	r3, #96	; 0x60
 8002d98:	d877      	bhi.n	8002e8a <HAL_TIM_ConfigClockSource+0x16c>
 8002d9a:	2b50      	cmp	r3, #80	; 0x50
 8002d9c:	d03c      	beq.n	8002e18 <HAL_TIM_ConfigClockSource+0xfa>
 8002d9e:	2b50      	cmp	r3, #80	; 0x50
 8002da0:	d873      	bhi.n	8002e8a <HAL_TIM_ConfigClockSource+0x16c>
 8002da2:	2b40      	cmp	r3, #64	; 0x40
 8002da4:	d058      	beq.n	8002e58 <HAL_TIM_ConfigClockSource+0x13a>
 8002da6:	2b40      	cmp	r3, #64	; 0x40
 8002da8:	d86f      	bhi.n	8002e8a <HAL_TIM_ConfigClockSource+0x16c>
 8002daa:	2b30      	cmp	r3, #48	; 0x30
 8002dac:	d064      	beq.n	8002e78 <HAL_TIM_ConfigClockSource+0x15a>
 8002dae:	2b30      	cmp	r3, #48	; 0x30
 8002db0:	d86b      	bhi.n	8002e8a <HAL_TIM_ConfigClockSource+0x16c>
 8002db2:	2b20      	cmp	r3, #32
 8002db4:	d060      	beq.n	8002e78 <HAL_TIM_ConfigClockSource+0x15a>
 8002db6:	2b20      	cmp	r3, #32
 8002db8:	d867      	bhi.n	8002e8a <HAL_TIM_ConfigClockSource+0x16c>
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d05c      	beq.n	8002e78 <HAL_TIM_ConfigClockSource+0x15a>
 8002dbe:	2b10      	cmp	r3, #16
 8002dc0:	d05a      	beq.n	8002e78 <HAL_TIM_ConfigClockSource+0x15a>
 8002dc2:	e062      	b.n	8002e8a <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6818      	ldr	r0, [r3, #0]
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	6899      	ldr	r1, [r3, #8]
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	685a      	ldr	r2, [r3, #4]
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	f000 f9b6 	bl	8003144 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002de6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	68ba      	ldr	r2, [r7, #8]
 8002dee:	609a      	str	r2, [r3, #8]
      break;
 8002df0:	e04f      	b.n	8002e92 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6818      	ldr	r0, [r3, #0]
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	6899      	ldr	r1, [r3, #8]
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	685a      	ldr	r2, [r3, #4]
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	68db      	ldr	r3, [r3, #12]
 8002e02:	f000 f99f 	bl	8003144 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	689a      	ldr	r2, [r3, #8]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e14:	609a      	str	r2, [r3, #8]
      break;
 8002e16:	e03c      	b.n	8002e92 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6818      	ldr	r0, [r3, #0]
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	6859      	ldr	r1, [r3, #4]
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	461a      	mov	r2, r3
 8002e26:	f000 f913 	bl	8003050 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	2150      	movs	r1, #80	; 0x50
 8002e30:	4618      	mov	r0, r3
 8002e32:	f000 f96c 	bl	800310e <TIM_ITRx_SetConfig>
      break;
 8002e36:	e02c      	b.n	8002e92 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6818      	ldr	r0, [r3, #0]
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	6859      	ldr	r1, [r3, #4]
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	461a      	mov	r2, r3
 8002e46:	f000 f932 	bl	80030ae <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	2160      	movs	r1, #96	; 0x60
 8002e50:	4618      	mov	r0, r3
 8002e52:	f000 f95c 	bl	800310e <TIM_ITRx_SetConfig>
      break;
 8002e56:	e01c      	b.n	8002e92 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6818      	ldr	r0, [r3, #0]
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	6859      	ldr	r1, [r3, #4]
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	461a      	mov	r2, r3
 8002e66:	f000 f8f3 	bl	8003050 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	2140      	movs	r1, #64	; 0x40
 8002e70:	4618      	mov	r0, r3
 8002e72:	f000 f94c 	bl	800310e <TIM_ITRx_SetConfig>
      break;
 8002e76:	e00c      	b.n	8002e92 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4619      	mov	r1, r3
 8002e82:	4610      	mov	r0, r2
 8002e84:	f000 f943 	bl	800310e <TIM_ITRx_SetConfig>
      break;
 8002e88:	e003      	b.n	8002e92 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	73fb      	strb	r3, [r7, #15]
      break;
 8002e8e:	e000      	b.n	8002e92 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002e90:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2201      	movs	r2, #1
 8002e96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002ea2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3710      	adds	r7, #16
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}

08002eac <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b083      	sub	sp, #12
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002eb4:	bf00      	nop
 8002eb6:	370c      	adds	r7, #12
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr

08002ec0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b083      	sub	sp, #12
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ec8:	bf00      	nop
 8002eca:	370c      	adds	r7, #12
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr

08002ed4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002edc:	bf00      	nop
 8002ede:	370c      	adds	r7, #12
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr

08002ee8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b083      	sub	sp, #12
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ef0:	bf00      	nop
 8002ef2:	370c      	adds	r7, #12
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr

08002efc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b083      	sub	sp, #12
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f04:	bf00      	nop
 8002f06:	370c      	adds	r7, #12
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr

08002f10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b085      	sub	sp, #20
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	4a40      	ldr	r2, [pc, #256]	; (8003024 <TIM_Base_SetConfig+0x114>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d013      	beq.n	8002f50 <TIM_Base_SetConfig+0x40>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f2e:	d00f      	beq.n	8002f50 <TIM_Base_SetConfig+0x40>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	4a3d      	ldr	r2, [pc, #244]	; (8003028 <TIM_Base_SetConfig+0x118>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d00b      	beq.n	8002f50 <TIM_Base_SetConfig+0x40>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	4a3c      	ldr	r2, [pc, #240]	; (800302c <TIM_Base_SetConfig+0x11c>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d007      	beq.n	8002f50 <TIM_Base_SetConfig+0x40>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	4a3b      	ldr	r2, [pc, #236]	; (8003030 <TIM_Base_SetConfig+0x120>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d003      	beq.n	8002f50 <TIM_Base_SetConfig+0x40>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	4a3a      	ldr	r2, [pc, #232]	; (8003034 <TIM_Base_SetConfig+0x124>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d108      	bne.n	8002f62 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	68fa      	ldr	r2, [r7, #12]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4a2f      	ldr	r2, [pc, #188]	; (8003024 <TIM_Base_SetConfig+0x114>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d02b      	beq.n	8002fc2 <TIM_Base_SetConfig+0xb2>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f70:	d027      	beq.n	8002fc2 <TIM_Base_SetConfig+0xb2>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4a2c      	ldr	r2, [pc, #176]	; (8003028 <TIM_Base_SetConfig+0x118>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d023      	beq.n	8002fc2 <TIM_Base_SetConfig+0xb2>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4a2b      	ldr	r2, [pc, #172]	; (800302c <TIM_Base_SetConfig+0x11c>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d01f      	beq.n	8002fc2 <TIM_Base_SetConfig+0xb2>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4a2a      	ldr	r2, [pc, #168]	; (8003030 <TIM_Base_SetConfig+0x120>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d01b      	beq.n	8002fc2 <TIM_Base_SetConfig+0xb2>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4a29      	ldr	r2, [pc, #164]	; (8003034 <TIM_Base_SetConfig+0x124>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d017      	beq.n	8002fc2 <TIM_Base_SetConfig+0xb2>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4a28      	ldr	r2, [pc, #160]	; (8003038 <TIM_Base_SetConfig+0x128>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d013      	beq.n	8002fc2 <TIM_Base_SetConfig+0xb2>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	4a27      	ldr	r2, [pc, #156]	; (800303c <TIM_Base_SetConfig+0x12c>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d00f      	beq.n	8002fc2 <TIM_Base_SetConfig+0xb2>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4a26      	ldr	r2, [pc, #152]	; (8003040 <TIM_Base_SetConfig+0x130>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d00b      	beq.n	8002fc2 <TIM_Base_SetConfig+0xb2>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4a25      	ldr	r2, [pc, #148]	; (8003044 <TIM_Base_SetConfig+0x134>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d007      	beq.n	8002fc2 <TIM_Base_SetConfig+0xb2>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4a24      	ldr	r2, [pc, #144]	; (8003048 <TIM_Base_SetConfig+0x138>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d003      	beq.n	8002fc2 <TIM_Base_SetConfig+0xb2>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4a23      	ldr	r2, [pc, #140]	; (800304c <TIM_Base_SetConfig+0x13c>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d108      	bne.n	8002fd4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	68db      	ldr	r3, [r3, #12]
 8002fce:	68fa      	ldr	r2, [r7, #12]
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	695b      	ldr	r3, [r3, #20]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	68fa      	ldr	r2, [r7, #12]
 8002fe6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	689a      	ldr	r2, [r3, #8]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	4a0a      	ldr	r2, [pc, #40]	; (8003024 <TIM_Base_SetConfig+0x114>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d003      	beq.n	8003008 <TIM_Base_SetConfig+0xf8>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	4a0c      	ldr	r2, [pc, #48]	; (8003034 <TIM_Base_SetConfig+0x124>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d103      	bne.n	8003010 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	691a      	ldr	r2, [r3, #16]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2201      	movs	r2, #1
 8003014:	615a      	str	r2, [r3, #20]
}
 8003016:	bf00      	nop
 8003018:	3714      	adds	r7, #20
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr
 8003022:	bf00      	nop
 8003024:	40010000 	.word	0x40010000
 8003028:	40000400 	.word	0x40000400
 800302c:	40000800 	.word	0x40000800
 8003030:	40000c00 	.word	0x40000c00
 8003034:	40010400 	.word	0x40010400
 8003038:	40014000 	.word	0x40014000
 800303c:	40014400 	.word	0x40014400
 8003040:	40014800 	.word	0x40014800
 8003044:	40001800 	.word	0x40001800
 8003048:	40001c00 	.word	0x40001c00
 800304c:	40002000 	.word	0x40002000

08003050 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003050:	b480      	push	{r7}
 8003052:	b087      	sub	sp, #28
 8003054:	af00      	add	r7, sp, #0
 8003056:	60f8      	str	r0, [r7, #12]
 8003058:	60b9      	str	r1, [r7, #8]
 800305a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	6a1b      	ldr	r3, [r3, #32]
 8003060:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	6a1b      	ldr	r3, [r3, #32]
 8003066:	f023 0201 	bic.w	r2, r3, #1
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	699b      	ldr	r3, [r3, #24]
 8003072:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800307a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	011b      	lsls	r3, r3, #4
 8003080:	693a      	ldr	r2, [r7, #16]
 8003082:	4313      	orrs	r3, r2
 8003084:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	f023 030a 	bic.w	r3, r3, #10
 800308c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800308e:	697a      	ldr	r2, [r7, #20]
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	4313      	orrs	r3, r2
 8003094:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	693a      	ldr	r2, [r7, #16]
 800309a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	697a      	ldr	r2, [r7, #20]
 80030a0:	621a      	str	r2, [r3, #32]
}
 80030a2:	bf00      	nop
 80030a4:	371c      	adds	r7, #28
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr

080030ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030ae:	b480      	push	{r7}
 80030b0:	b087      	sub	sp, #28
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	60f8      	str	r0, [r7, #12]
 80030b6:	60b9      	str	r1, [r7, #8]
 80030b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	6a1b      	ldr	r3, [r3, #32]
 80030be:	f023 0210 	bic.w	r2, r3, #16
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	699b      	ldr	r3, [r3, #24]
 80030ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	6a1b      	ldr	r3, [r3, #32]
 80030d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80030d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	031b      	lsls	r3, r3, #12
 80030de:	697a      	ldr	r2, [r7, #20]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80030ea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	011b      	lsls	r3, r3, #4
 80030f0:	693a      	ldr	r2, [r7, #16]
 80030f2:	4313      	orrs	r3, r2
 80030f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	697a      	ldr	r2, [r7, #20]
 80030fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	693a      	ldr	r2, [r7, #16]
 8003100:	621a      	str	r2, [r3, #32]
}
 8003102:	bf00      	nop
 8003104:	371c      	adds	r7, #28
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr

0800310e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800310e:	b480      	push	{r7}
 8003110:	b085      	sub	sp, #20
 8003112:	af00      	add	r7, sp, #0
 8003114:	6078      	str	r0, [r7, #4]
 8003116:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003124:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003126:	683a      	ldr	r2, [r7, #0]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	4313      	orrs	r3, r2
 800312c:	f043 0307 	orr.w	r3, r3, #7
 8003130:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	68fa      	ldr	r2, [r7, #12]
 8003136:	609a      	str	r2, [r3, #8]
}
 8003138:	bf00      	nop
 800313a:	3714      	adds	r7, #20
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr

08003144 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003144:	b480      	push	{r7}
 8003146:	b087      	sub	sp, #28
 8003148:	af00      	add	r7, sp, #0
 800314a:	60f8      	str	r0, [r7, #12]
 800314c:	60b9      	str	r1, [r7, #8]
 800314e:	607a      	str	r2, [r7, #4]
 8003150:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800315e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	021a      	lsls	r2, r3, #8
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	431a      	orrs	r2, r3
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	4313      	orrs	r3, r2
 800316c:	697a      	ldr	r2, [r7, #20]
 800316e:	4313      	orrs	r3, r2
 8003170:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	697a      	ldr	r2, [r7, #20]
 8003176:	609a      	str	r2, [r3, #8]
}
 8003178:	bf00      	nop
 800317a:	371c      	adds	r7, #28
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr

08003184 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003184:	b480      	push	{r7}
 8003186:	b085      	sub	sp, #20
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003194:	2b01      	cmp	r3, #1
 8003196:	d101      	bne.n	800319c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003198:	2302      	movs	r3, #2
 800319a:	e05a      	b.n	8003252 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2201      	movs	r2, #1
 80031a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2202      	movs	r2, #2
 80031a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	68fa      	ldr	r2, [r7, #12]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	68fa      	ldr	r2, [r7, #12]
 80031d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a21      	ldr	r2, [pc, #132]	; (8003260 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d022      	beq.n	8003226 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031e8:	d01d      	beq.n	8003226 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a1d      	ldr	r2, [pc, #116]	; (8003264 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d018      	beq.n	8003226 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a1b      	ldr	r2, [pc, #108]	; (8003268 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d013      	beq.n	8003226 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a1a      	ldr	r2, [pc, #104]	; (800326c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d00e      	beq.n	8003226 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a18      	ldr	r2, [pc, #96]	; (8003270 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d009      	beq.n	8003226 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a17      	ldr	r2, [pc, #92]	; (8003274 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d004      	beq.n	8003226 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a15      	ldr	r2, [pc, #84]	; (8003278 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d10c      	bne.n	8003240 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800322c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	68ba      	ldr	r2, [r7, #8]
 8003234:	4313      	orrs	r3, r2
 8003236:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	68ba      	ldr	r2, [r7, #8]
 800323e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2201      	movs	r2, #1
 8003244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	3714      	adds	r7, #20
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr
 800325e:	bf00      	nop
 8003260:	40010000 	.word	0x40010000
 8003264:	40000400 	.word	0x40000400
 8003268:	40000800 	.word	0x40000800
 800326c:	40000c00 	.word	0x40000c00
 8003270:	40010400 	.word	0x40010400
 8003274:	40014000 	.word	0x40014000
 8003278:	40001800 	.word	0x40001800

0800327c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003284:	bf00      	nop
 8003286:	370c      	adds	r7, #12
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr

08003290 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003298:	bf00      	nop
 800329a:	370c      	adds	r7, #12
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr

080032a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b082      	sub	sp, #8
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d101      	bne.n	80032b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e03f      	b.n	8003336 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d106      	bne.n	80032d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f7fd fc6a 	bl	8000ba4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2224      	movs	r2, #36	; 0x24
 80032d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	68da      	ldr	r2, [r3, #12]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f000 fc71 	bl	8003bd0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	691a      	ldr	r2, [r3, #16]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80032fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	695a      	ldr	r2, [r3, #20]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800330c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	68da      	ldr	r2, [r3, #12]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800331c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2220      	movs	r2, #32
 8003328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2220      	movs	r2, #32
 8003330:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003334:	2300      	movs	r3, #0
}
 8003336:	4618      	mov	r0, r3
 8003338:	3708      	adds	r7, #8
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
	...

08003340 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b0ba      	sub	sp, #232	; 0xe8
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	695b      	ldr	r3, [r3, #20]
 8003362:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003366:	2300      	movs	r3, #0
 8003368:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800336c:	2300      	movs	r3, #0
 800336e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003372:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003376:	f003 030f 	and.w	r3, r3, #15
 800337a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800337e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003382:	2b00      	cmp	r3, #0
 8003384:	d10f      	bne.n	80033a6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003386:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800338a:	f003 0320 	and.w	r3, r3, #32
 800338e:	2b00      	cmp	r3, #0
 8003390:	d009      	beq.n	80033a6 <HAL_UART_IRQHandler+0x66>
 8003392:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003396:	f003 0320 	and.w	r3, r3, #32
 800339a:	2b00      	cmp	r3, #0
 800339c:	d003      	beq.n	80033a6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f000 fb5b 	bl	8003a5a <UART_Receive_IT>
      return;
 80033a4:	e256      	b.n	8003854 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80033a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	f000 80de 	beq.w	800356c <HAL_UART_IRQHandler+0x22c>
 80033b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80033b4:	f003 0301 	and.w	r3, r3, #1
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d106      	bne.n	80033ca <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80033bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033c0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	f000 80d1 	beq.w	800356c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80033ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033ce:	f003 0301 	and.w	r3, r3, #1
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d00b      	beq.n	80033ee <HAL_UART_IRQHandler+0xae>
 80033d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d005      	beq.n	80033ee <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e6:	f043 0201 	orr.w	r2, r3, #1
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80033ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033f2:	f003 0304 	and.w	r3, r3, #4
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d00b      	beq.n	8003412 <HAL_UART_IRQHandler+0xd2>
 80033fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80033fe:	f003 0301 	and.w	r3, r3, #1
 8003402:	2b00      	cmp	r3, #0
 8003404:	d005      	beq.n	8003412 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340a:	f043 0202 	orr.w	r2, r3, #2
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003412:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003416:	f003 0302 	and.w	r3, r3, #2
 800341a:	2b00      	cmp	r3, #0
 800341c:	d00b      	beq.n	8003436 <HAL_UART_IRQHandler+0xf6>
 800341e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003422:	f003 0301 	and.w	r3, r3, #1
 8003426:	2b00      	cmp	r3, #0
 8003428:	d005      	beq.n	8003436 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342e:	f043 0204 	orr.w	r2, r3, #4
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003436:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800343a:	f003 0308 	and.w	r3, r3, #8
 800343e:	2b00      	cmp	r3, #0
 8003440:	d011      	beq.n	8003466 <HAL_UART_IRQHandler+0x126>
 8003442:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003446:	f003 0320 	and.w	r3, r3, #32
 800344a:	2b00      	cmp	r3, #0
 800344c:	d105      	bne.n	800345a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800344e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003452:	f003 0301 	and.w	r3, r3, #1
 8003456:	2b00      	cmp	r3, #0
 8003458:	d005      	beq.n	8003466 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345e:	f043 0208 	orr.w	r2, r3, #8
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346a:	2b00      	cmp	r3, #0
 800346c:	f000 81ed 	beq.w	800384a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003470:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003474:	f003 0320 	and.w	r3, r3, #32
 8003478:	2b00      	cmp	r3, #0
 800347a:	d008      	beq.n	800348e <HAL_UART_IRQHandler+0x14e>
 800347c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003480:	f003 0320 	and.w	r3, r3, #32
 8003484:	2b00      	cmp	r3, #0
 8003486:	d002      	beq.n	800348e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f000 fae6 	bl	8003a5a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	695b      	ldr	r3, [r3, #20]
 8003494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003498:	2b40      	cmp	r3, #64	; 0x40
 800349a:	bf0c      	ite	eq
 800349c:	2301      	moveq	r3, #1
 800349e:	2300      	movne	r3, #0
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034aa:	f003 0308 	and.w	r3, r3, #8
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d103      	bne.n	80034ba <HAL_UART_IRQHandler+0x17a>
 80034b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d04f      	beq.n	800355a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f000 f9ee 	bl	800389c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	695b      	ldr	r3, [r3, #20]
 80034c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ca:	2b40      	cmp	r3, #64	; 0x40
 80034cc:	d141      	bne.n	8003552 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	3314      	adds	r3, #20
 80034d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80034dc:	e853 3f00 	ldrex	r3, [r3]
 80034e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80034e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80034e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	3314      	adds	r3, #20
 80034f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80034fa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80034fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003502:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003506:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800350a:	e841 2300 	strex	r3, r2, [r1]
 800350e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003512:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d1d9      	bne.n	80034ce <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800351e:	2b00      	cmp	r3, #0
 8003520:	d013      	beq.n	800354a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003526:	4a7d      	ldr	r2, [pc, #500]	; (800371c <HAL_UART_IRQHandler+0x3dc>)
 8003528:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800352e:	4618      	mov	r0, r3
 8003530:	f7fe fa0c 	bl	800194c <HAL_DMA_Abort_IT>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d016      	beq.n	8003568 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800353e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003544:	4610      	mov	r0, r2
 8003546:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003548:	e00e      	b.n	8003568 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f000 f990 	bl	8003870 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003550:	e00a      	b.n	8003568 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f000 f98c 	bl	8003870 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003558:	e006      	b.n	8003568 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f000 f988 	bl	8003870 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2200      	movs	r2, #0
 8003564:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003566:	e170      	b.n	800384a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003568:	bf00      	nop
    return;
 800356a:	e16e      	b.n	800384a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003570:	2b01      	cmp	r3, #1
 8003572:	f040 814a 	bne.w	800380a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003576:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800357a:	f003 0310 	and.w	r3, r3, #16
 800357e:	2b00      	cmp	r3, #0
 8003580:	f000 8143 	beq.w	800380a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003584:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003588:	f003 0310 	and.w	r3, r3, #16
 800358c:	2b00      	cmp	r3, #0
 800358e:	f000 813c 	beq.w	800380a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003592:	2300      	movs	r3, #0
 8003594:	60bb      	str	r3, [r7, #8]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	60bb      	str	r3, [r7, #8]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	60bb      	str	r3, [r7, #8]
 80035a6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	695b      	ldr	r3, [r3, #20]
 80035ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035b2:	2b40      	cmp	r3, #64	; 0x40
 80035b4:	f040 80b4 	bne.w	8003720 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80035c4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	f000 8140 	beq.w	800384e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80035d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80035d6:	429a      	cmp	r2, r3
 80035d8:	f080 8139 	bcs.w	800384e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80035e2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035e8:	69db      	ldr	r3, [r3, #28]
 80035ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035ee:	f000 8088 	beq.w	8003702 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	330c      	adds	r3, #12
 80035f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003600:	e853 3f00 	ldrex	r3, [r3]
 8003604:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003608:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800360c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003610:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	330c      	adds	r3, #12
 800361a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800361e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003622:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003626:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800362a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800362e:	e841 2300 	strex	r3, r2, [r1]
 8003632:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003636:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800363a:	2b00      	cmp	r3, #0
 800363c:	d1d9      	bne.n	80035f2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	3314      	adds	r3, #20
 8003644:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003646:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003648:	e853 3f00 	ldrex	r3, [r3]
 800364c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800364e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003650:	f023 0301 	bic.w	r3, r3, #1
 8003654:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	3314      	adds	r3, #20
 800365e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003662:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003666:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003668:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800366a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800366e:	e841 2300 	strex	r3, r2, [r1]
 8003672:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003674:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003676:	2b00      	cmp	r3, #0
 8003678:	d1e1      	bne.n	800363e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	3314      	adds	r3, #20
 8003680:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003682:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003684:	e853 3f00 	ldrex	r3, [r3]
 8003688:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800368a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800368c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003690:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	3314      	adds	r3, #20
 800369a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800369e:	66fa      	str	r2, [r7, #108]	; 0x6c
 80036a0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036a2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80036a4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80036a6:	e841 2300 	strex	r3, r2, [r1]
 80036aa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80036ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d1e3      	bne.n	800367a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2220      	movs	r2, #32
 80036b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	330c      	adds	r3, #12
 80036c6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036ca:	e853 3f00 	ldrex	r3, [r3]
 80036ce:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80036d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036d2:	f023 0310 	bic.w	r3, r3, #16
 80036d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	330c      	adds	r3, #12
 80036e0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80036e4:	65ba      	str	r2, [r7, #88]	; 0x58
 80036e6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036e8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80036ea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80036ec:	e841 2300 	strex	r3, r2, [r1]
 80036f0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80036f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d1e3      	bne.n	80036c0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036fc:	4618      	mov	r0, r3
 80036fe:	f7fe f8b5 	bl	800186c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800370a:	b29b      	uxth	r3, r3
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	b29b      	uxth	r3, r3
 8003710:	4619      	mov	r1, r3
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f000 f8b6 	bl	8003884 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003718:	e099      	b.n	800384e <HAL_UART_IRQHandler+0x50e>
 800371a:	bf00      	nop
 800371c:	08003963 	.word	0x08003963
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003728:	b29b      	uxth	r3, r3
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003734:	b29b      	uxth	r3, r3
 8003736:	2b00      	cmp	r3, #0
 8003738:	f000 808b 	beq.w	8003852 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800373c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003740:	2b00      	cmp	r3, #0
 8003742:	f000 8086 	beq.w	8003852 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	330c      	adds	r3, #12
 800374c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800374e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003750:	e853 3f00 	ldrex	r3, [r3]
 8003754:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003756:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003758:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800375c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	330c      	adds	r3, #12
 8003766:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800376a:	647a      	str	r2, [r7, #68]	; 0x44
 800376c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800376e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003770:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003772:	e841 2300 	strex	r3, r2, [r1]
 8003776:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003778:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800377a:	2b00      	cmp	r3, #0
 800377c:	d1e3      	bne.n	8003746 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	3314      	adds	r3, #20
 8003784:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003788:	e853 3f00 	ldrex	r3, [r3]
 800378c:	623b      	str	r3, [r7, #32]
   return(result);
 800378e:	6a3b      	ldr	r3, [r7, #32]
 8003790:	f023 0301 	bic.w	r3, r3, #1
 8003794:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	3314      	adds	r3, #20
 800379e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80037a2:	633a      	str	r2, [r7, #48]	; 0x30
 80037a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80037a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037aa:	e841 2300 	strex	r3, r2, [r1]
 80037ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80037b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d1e3      	bne.n	800377e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2220      	movs	r2, #32
 80037ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	330c      	adds	r3, #12
 80037ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	e853 3f00 	ldrex	r3, [r3]
 80037d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f023 0310 	bic.w	r3, r3, #16
 80037da:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	330c      	adds	r3, #12
 80037e4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80037e8:	61fa      	str	r2, [r7, #28]
 80037ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ec:	69b9      	ldr	r1, [r7, #24]
 80037ee:	69fa      	ldr	r2, [r7, #28]
 80037f0:	e841 2300 	strex	r3, r2, [r1]
 80037f4:	617b      	str	r3, [r7, #20]
   return(result);
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d1e3      	bne.n	80037c4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80037fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003800:	4619      	mov	r1, r3
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f000 f83e 	bl	8003884 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003808:	e023      	b.n	8003852 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800380a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800380e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003812:	2b00      	cmp	r3, #0
 8003814:	d009      	beq.n	800382a <HAL_UART_IRQHandler+0x4ea>
 8003816:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800381a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800381e:	2b00      	cmp	r3, #0
 8003820:	d003      	beq.n	800382a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f000 f8b1 	bl	800398a <UART_Transmit_IT>
    return;
 8003828:	e014      	b.n	8003854 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800382a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800382e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003832:	2b00      	cmp	r3, #0
 8003834:	d00e      	beq.n	8003854 <HAL_UART_IRQHandler+0x514>
 8003836:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800383a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800383e:	2b00      	cmp	r3, #0
 8003840:	d008      	beq.n	8003854 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f000 f8f1 	bl	8003a2a <UART_EndTransmit_IT>
    return;
 8003848:	e004      	b.n	8003854 <HAL_UART_IRQHandler+0x514>
    return;
 800384a:	bf00      	nop
 800384c:	e002      	b.n	8003854 <HAL_UART_IRQHandler+0x514>
      return;
 800384e:	bf00      	nop
 8003850:	e000      	b.n	8003854 <HAL_UART_IRQHandler+0x514>
      return;
 8003852:	bf00      	nop
  }
}
 8003854:	37e8      	adds	r7, #232	; 0xe8
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop

0800385c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003864:	bf00      	nop
 8003866:	370c      	adds	r7, #12
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr

08003870 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003878:	bf00      	nop
 800387a:	370c      	adds	r7, #12
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr

08003884 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003884:	b480      	push	{r7}
 8003886:	b083      	sub	sp, #12
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	460b      	mov	r3, r1
 800388e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003890:	bf00      	nop
 8003892:	370c      	adds	r7, #12
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr

0800389c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800389c:	b480      	push	{r7}
 800389e:	b095      	sub	sp, #84	; 0x54
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	330c      	adds	r3, #12
 80038aa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038ae:	e853 3f00 	ldrex	r3, [r3]
 80038b2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80038b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80038ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	330c      	adds	r3, #12
 80038c2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80038c4:	643a      	str	r2, [r7, #64]	; 0x40
 80038c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038c8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80038ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80038cc:	e841 2300 	strex	r3, r2, [r1]
 80038d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80038d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d1e5      	bne.n	80038a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	3314      	adds	r3, #20
 80038de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038e0:	6a3b      	ldr	r3, [r7, #32]
 80038e2:	e853 3f00 	ldrex	r3, [r3]
 80038e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	f023 0301 	bic.w	r3, r3, #1
 80038ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	3314      	adds	r3, #20
 80038f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80038f8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80038fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80038fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003900:	e841 2300 	strex	r3, r2, [r1]
 8003904:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003908:	2b00      	cmp	r3, #0
 800390a:	d1e5      	bne.n	80038d8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003910:	2b01      	cmp	r3, #1
 8003912:	d119      	bne.n	8003948 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	330c      	adds	r3, #12
 800391a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	e853 3f00 	ldrex	r3, [r3]
 8003922:	60bb      	str	r3, [r7, #8]
   return(result);
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	f023 0310 	bic.w	r3, r3, #16
 800392a:	647b      	str	r3, [r7, #68]	; 0x44
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	330c      	adds	r3, #12
 8003932:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003934:	61ba      	str	r2, [r7, #24]
 8003936:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003938:	6979      	ldr	r1, [r7, #20]
 800393a:	69ba      	ldr	r2, [r7, #24]
 800393c:	e841 2300 	strex	r3, r2, [r1]
 8003940:	613b      	str	r3, [r7, #16]
   return(result);
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d1e5      	bne.n	8003914 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2220      	movs	r2, #32
 800394c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2200      	movs	r2, #0
 8003954:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003956:	bf00      	nop
 8003958:	3754      	adds	r7, #84	; 0x54
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr

08003962 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003962:	b580      	push	{r7, lr}
 8003964:	b084      	sub	sp, #16
 8003966:	af00      	add	r7, sp, #0
 8003968:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800396e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2200      	movs	r2, #0
 8003974:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2200      	movs	r2, #0
 800397a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800397c:	68f8      	ldr	r0, [r7, #12]
 800397e:	f7ff ff77 	bl	8003870 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003982:	bf00      	nop
 8003984:	3710      	adds	r7, #16
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}

0800398a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800398a:	b480      	push	{r7}
 800398c:	b085      	sub	sp, #20
 800398e:	af00      	add	r7, sp, #0
 8003990:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003998:	b2db      	uxtb	r3, r3
 800399a:	2b21      	cmp	r3, #33	; 0x21
 800399c:	d13e      	bne.n	8003a1c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039a6:	d114      	bne.n	80039d2 <UART_Transmit_IT+0x48>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	691b      	ldr	r3, [r3, #16]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d110      	bne.n	80039d2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6a1b      	ldr	r3, [r3, #32]
 80039b4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	881b      	ldrh	r3, [r3, #0]
 80039ba:	461a      	mov	r2, r3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039c4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6a1b      	ldr	r3, [r3, #32]
 80039ca:	1c9a      	adds	r2, r3, #2
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	621a      	str	r2, [r3, #32]
 80039d0:	e008      	b.n	80039e4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a1b      	ldr	r3, [r3, #32]
 80039d6:	1c59      	adds	r1, r3, #1
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	6211      	str	r1, [r2, #32]
 80039dc:	781a      	ldrb	r2, [r3, #0]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	3b01      	subs	r3, #1
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	4619      	mov	r1, r3
 80039f2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d10f      	bne.n	8003a18 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	68da      	ldr	r2, [r3, #12]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a06:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	68da      	ldr	r2, [r3, #12]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a16:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	e000      	b.n	8003a1e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003a1c:	2302      	movs	r3, #2
  }
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3714      	adds	r7, #20
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr

08003a2a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003a2a:	b580      	push	{r7, lr}
 8003a2c:	b082      	sub	sp, #8
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	68da      	ldr	r2, [r3, #12]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a40:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2220      	movs	r2, #32
 8003a46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f7ff ff06 	bl	800385c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003a50:	2300      	movs	r3, #0
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3708      	adds	r7, #8
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}

08003a5a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003a5a:	b580      	push	{r7, lr}
 8003a5c:	b08c      	sub	sp, #48	; 0x30
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	2b22      	cmp	r3, #34	; 0x22
 8003a6c:	f040 80ab 	bne.w	8003bc6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a78:	d117      	bne.n	8003aaa <UART_Receive_IT+0x50>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	691b      	ldr	r3, [r3, #16]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d113      	bne.n	8003aaa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003a82:	2300      	movs	r3, #0
 8003a84:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a8a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a98:	b29a      	uxth	r2, r3
 8003a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a9c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa2:	1c9a      	adds	r2, r3, #2
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	629a      	str	r2, [r3, #40]	; 0x28
 8003aa8:	e026      	b.n	8003af8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aae:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003abc:	d007      	beq.n	8003ace <UART_Receive_IT+0x74>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d10a      	bne.n	8003adc <UART_Receive_IT+0x82>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	691b      	ldr	r3, [r3, #16]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d106      	bne.n	8003adc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	b2da      	uxtb	r2, r3
 8003ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ad8:	701a      	strb	r2, [r3, #0]
 8003ada:	e008      	b.n	8003aee <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	b2db      	uxtb	r3, r3
 8003ae4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ae8:	b2da      	uxtb	r2, r3
 8003aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aec:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003af2:	1c5a      	adds	r2, r3, #1
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	3b01      	subs	r3, #1
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	4619      	mov	r1, r3
 8003b06:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d15a      	bne.n	8003bc2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	68da      	ldr	r2, [r3, #12]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f022 0220 	bic.w	r2, r2, #32
 8003b1a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	68da      	ldr	r2, [r3, #12]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b2a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	695a      	ldr	r2, [r3, #20]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f022 0201 	bic.w	r2, r2, #1
 8003b3a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2220      	movs	r2, #32
 8003b40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d135      	bne.n	8003bb8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	330c      	adds	r3, #12
 8003b58:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	e853 3f00 	ldrex	r3, [r3]
 8003b60:	613b      	str	r3, [r7, #16]
   return(result);
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	f023 0310 	bic.w	r3, r3, #16
 8003b68:	627b      	str	r3, [r7, #36]	; 0x24
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	330c      	adds	r3, #12
 8003b70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b72:	623a      	str	r2, [r7, #32]
 8003b74:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b76:	69f9      	ldr	r1, [r7, #28]
 8003b78:	6a3a      	ldr	r2, [r7, #32]
 8003b7a:	e841 2300 	strex	r3, r2, [r1]
 8003b7e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b80:	69bb      	ldr	r3, [r7, #24]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d1e5      	bne.n	8003b52 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 0310 	and.w	r3, r3, #16
 8003b90:	2b10      	cmp	r3, #16
 8003b92:	d10a      	bne.n	8003baa <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b94:	2300      	movs	r3, #0
 8003b96:	60fb      	str	r3, [r7, #12]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	60fb      	str	r3, [r7, #12]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	60fb      	str	r3, [r7, #12]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003bae:	4619      	mov	r1, r3
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f7ff fe67 	bl	8003884 <HAL_UARTEx_RxEventCallback>
 8003bb6:	e002      	b.n	8003bbe <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f7fc fc87 	bl	80004cc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	e002      	b.n	8003bc8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	e000      	b.n	8003bc8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003bc6:	2302      	movs	r3, #2
  }
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3730      	adds	r7, #48	; 0x30
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}

08003bd0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bd4:	b0c0      	sub	sp, #256	; 0x100
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	691b      	ldr	r3, [r3, #16]
 8003be4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bec:	68d9      	ldr	r1, [r3, #12]
 8003bee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	ea40 0301 	orr.w	r3, r0, r1
 8003bf8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003bfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bfe:	689a      	ldr	r2, [r3, #8]
 8003c00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c04:	691b      	ldr	r3, [r3, #16]
 8003c06:	431a      	orrs	r2, r3
 8003c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c0c:	695b      	ldr	r3, [r3, #20]
 8003c0e:	431a      	orrs	r2, r3
 8003c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c14:	69db      	ldr	r3, [r3, #28]
 8003c16:	4313      	orrs	r3, r2
 8003c18:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003c28:	f021 010c 	bic.w	r1, r1, #12
 8003c2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003c36:	430b      	orrs	r3, r1
 8003c38:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	695b      	ldr	r3, [r3, #20]
 8003c42:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003c46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c4a:	6999      	ldr	r1, [r3, #24]
 8003c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	ea40 0301 	orr.w	r3, r0, r1
 8003c56:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	4b8f      	ldr	r3, [pc, #572]	; (8003e9c <UART_SetConfig+0x2cc>)
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d005      	beq.n	8003c70 <UART_SetConfig+0xa0>
 8003c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	4b8d      	ldr	r3, [pc, #564]	; (8003ea0 <UART_SetConfig+0x2d0>)
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d104      	bne.n	8003c7a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003c70:	f7fe feea 	bl	8002a48 <HAL_RCC_GetPCLK2Freq>
 8003c74:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003c78:	e003      	b.n	8003c82 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003c7a:	f7fe fed1 	bl	8002a20 <HAL_RCC_GetPCLK1Freq>
 8003c7e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c86:	69db      	ldr	r3, [r3, #28]
 8003c88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c8c:	f040 810c 	bne.w	8003ea8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003c90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c94:	2200      	movs	r2, #0
 8003c96:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003c9a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003c9e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003ca2:	4622      	mov	r2, r4
 8003ca4:	462b      	mov	r3, r5
 8003ca6:	1891      	adds	r1, r2, r2
 8003ca8:	65b9      	str	r1, [r7, #88]	; 0x58
 8003caa:	415b      	adcs	r3, r3
 8003cac:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003cae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003cb2:	4621      	mov	r1, r4
 8003cb4:	eb12 0801 	adds.w	r8, r2, r1
 8003cb8:	4629      	mov	r1, r5
 8003cba:	eb43 0901 	adc.w	r9, r3, r1
 8003cbe:	f04f 0200 	mov.w	r2, #0
 8003cc2:	f04f 0300 	mov.w	r3, #0
 8003cc6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003cca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003cce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003cd2:	4690      	mov	r8, r2
 8003cd4:	4699      	mov	r9, r3
 8003cd6:	4623      	mov	r3, r4
 8003cd8:	eb18 0303 	adds.w	r3, r8, r3
 8003cdc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003ce0:	462b      	mov	r3, r5
 8003ce2:	eb49 0303 	adc.w	r3, r9, r3
 8003ce6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003cea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003cf6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003cfa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003cfe:	460b      	mov	r3, r1
 8003d00:	18db      	adds	r3, r3, r3
 8003d02:	653b      	str	r3, [r7, #80]	; 0x50
 8003d04:	4613      	mov	r3, r2
 8003d06:	eb42 0303 	adc.w	r3, r2, r3
 8003d0a:	657b      	str	r3, [r7, #84]	; 0x54
 8003d0c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003d10:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003d14:	f7fc fa58 	bl	80001c8 <__aeabi_uldivmod>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	460b      	mov	r3, r1
 8003d1c:	4b61      	ldr	r3, [pc, #388]	; (8003ea4 <UART_SetConfig+0x2d4>)
 8003d1e:	fba3 2302 	umull	r2, r3, r3, r2
 8003d22:	095b      	lsrs	r3, r3, #5
 8003d24:	011c      	lsls	r4, r3, #4
 8003d26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003d30:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003d34:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003d38:	4642      	mov	r2, r8
 8003d3a:	464b      	mov	r3, r9
 8003d3c:	1891      	adds	r1, r2, r2
 8003d3e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003d40:	415b      	adcs	r3, r3
 8003d42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d44:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003d48:	4641      	mov	r1, r8
 8003d4a:	eb12 0a01 	adds.w	sl, r2, r1
 8003d4e:	4649      	mov	r1, r9
 8003d50:	eb43 0b01 	adc.w	fp, r3, r1
 8003d54:	f04f 0200 	mov.w	r2, #0
 8003d58:	f04f 0300 	mov.w	r3, #0
 8003d5c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003d60:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003d64:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d68:	4692      	mov	sl, r2
 8003d6a:	469b      	mov	fp, r3
 8003d6c:	4643      	mov	r3, r8
 8003d6e:	eb1a 0303 	adds.w	r3, sl, r3
 8003d72:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003d76:	464b      	mov	r3, r9
 8003d78:	eb4b 0303 	adc.w	r3, fp, r3
 8003d7c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	2200      	movs	r2, #0
 8003d88:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003d8c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003d90:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003d94:	460b      	mov	r3, r1
 8003d96:	18db      	adds	r3, r3, r3
 8003d98:	643b      	str	r3, [r7, #64]	; 0x40
 8003d9a:	4613      	mov	r3, r2
 8003d9c:	eb42 0303 	adc.w	r3, r2, r3
 8003da0:	647b      	str	r3, [r7, #68]	; 0x44
 8003da2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003da6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003daa:	f7fc fa0d 	bl	80001c8 <__aeabi_uldivmod>
 8003dae:	4602      	mov	r2, r0
 8003db0:	460b      	mov	r3, r1
 8003db2:	4611      	mov	r1, r2
 8003db4:	4b3b      	ldr	r3, [pc, #236]	; (8003ea4 <UART_SetConfig+0x2d4>)
 8003db6:	fba3 2301 	umull	r2, r3, r3, r1
 8003dba:	095b      	lsrs	r3, r3, #5
 8003dbc:	2264      	movs	r2, #100	; 0x64
 8003dbe:	fb02 f303 	mul.w	r3, r2, r3
 8003dc2:	1acb      	subs	r3, r1, r3
 8003dc4:	00db      	lsls	r3, r3, #3
 8003dc6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003dca:	4b36      	ldr	r3, [pc, #216]	; (8003ea4 <UART_SetConfig+0x2d4>)
 8003dcc:	fba3 2302 	umull	r2, r3, r3, r2
 8003dd0:	095b      	lsrs	r3, r3, #5
 8003dd2:	005b      	lsls	r3, r3, #1
 8003dd4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003dd8:	441c      	add	r4, r3
 8003dda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003dde:	2200      	movs	r2, #0
 8003de0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003de4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003de8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003dec:	4642      	mov	r2, r8
 8003dee:	464b      	mov	r3, r9
 8003df0:	1891      	adds	r1, r2, r2
 8003df2:	63b9      	str	r1, [r7, #56]	; 0x38
 8003df4:	415b      	adcs	r3, r3
 8003df6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003df8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003dfc:	4641      	mov	r1, r8
 8003dfe:	1851      	adds	r1, r2, r1
 8003e00:	6339      	str	r1, [r7, #48]	; 0x30
 8003e02:	4649      	mov	r1, r9
 8003e04:	414b      	adcs	r3, r1
 8003e06:	637b      	str	r3, [r7, #52]	; 0x34
 8003e08:	f04f 0200 	mov.w	r2, #0
 8003e0c:	f04f 0300 	mov.w	r3, #0
 8003e10:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003e14:	4659      	mov	r1, fp
 8003e16:	00cb      	lsls	r3, r1, #3
 8003e18:	4651      	mov	r1, sl
 8003e1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e1e:	4651      	mov	r1, sl
 8003e20:	00ca      	lsls	r2, r1, #3
 8003e22:	4610      	mov	r0, r2
 8003e24:	4619      	mov	r1, r3
 8003e26:	4603      	mov	r3, r0
 8003e28:	4642      	mov	r2, r8
 8003e2a:	189b      	adds	r3, r3, r2
 8003e2c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003e30:	464b      	mov	r3, r9
 8003e32:	460a      	mov	r2, r1
 8003e34:	eb42 0303 	adc.w	r3, r2, r3
 8003e38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003e3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003e48:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003e4c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003e50:	460b      	mov	r3, r1
 8003e52:	18db      	adds	r3, r3, r3
 8003e54:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e56:	4613      	mov	r3, r2
 8003e58:	eb42 0303 	adc.w	r3, r2, r3
 8003e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e5e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003e62:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003e66:	f7fc f9af 	bl	80001c8 <__aeabi_uldivmod>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	460b      	mov	r3, r1
 8003e6e:	4b0d      	ldr	r3, [pc, #52]	; (8003ea4 <UART_SetConfig+0x2d4>)
 8003e70:	fba3 1302 	umull	r1, r3, r3, r2
 8003e74:	095b      	lsrs	r3, r3, #5
 8003e76:	2164      	movs	r1, #100	; 0x64
 8003e78:	fb01 f303 	mul.w	r3, r1, r3
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	00db      	lsls	r3, r3, #3
 8003e80:	3332      	adds	r3, #50	; 0x32
 8003e82:	4a08      	ldr	r2, [pc, #32]	; (8003ea4 <UART_SetConfig+0x2d4>)
 8003e84:	fba2 2303 	umull	r2, r3, r2, r3
 8003e88:	095b      	lsrs	r3, r3, #5
 8003e8a:	f003 0207 	and.w	r2, r3, #7
 8003e8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4422      	add	r2, r4
 8003e96:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003e98:	e105      	b.n	80040a6 <UART_SetConfig+0x4d6>
 8003e9a:	bf00      	nop
 8003e9c:	40011000 	.word	0x40011000
 8003ea0:	40011400 	.word	0x40011400
 8003ea4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ea8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003eac:	2200      	movs	r2, #0
 8003eae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003eb2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003eb6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003eba:	4642      	mov	r2, r8
 8003ebc:	464b      	mov	r3, r9
 8003ebe:	1891      	adds	r1, r2, r2
 8003ec0:	6239      	str	r1, [r7, #32]
 8003ec2:	415b      	adcs	r3, r3
 8003ec4:	627b      	str	r3, [r7, #36]	; 0x24
 8003ec6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003eca:	4641      	mov	r1, r8
 8003ecc:	1854      	adds	r4, r2, r1
 8003ece:	4649      	mov	r1, r9
 8003ed0:	eb43 0501 	adc.w	r5, r3, r1
 8003ed4:	f04f 0200 	mov.w	r2, #0
 8003ed8:	f04f 0300 	mov.w	r3, #0
 8003edc:	00eb      	lsls	r3, r5, #3
 8003ede:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ee2:	00e2      	lsls	r2, r4, #3
 8003ee4:	4614      	mov	r4, r2
 8003ee6:	461d      	mov	r5, r3
 8003ee8:	4643      	mov	r3, r8
 8003eea:	18e3      	adds	r3, r4, r3
 8003eec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003ef0:	464b      	mov	r3, r9
 8003ef2:	eb45 0303 	adc.w	r3, r5, r3
 8003ef6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003efa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	2200      	movs	r2, #0
 8003f02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003f06:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003f0a:	f04f 0200 	mov.w	r2, #0
 8003f0e:	f04f 0300 	mov.w	r3, #0
 8003f12:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003f16:	4629      	mov	r1, r5
 8003f18:	008b      	lsls	r3, r1, #2
 8003f1a:	4621      	mov	r1, r4
 8003f1c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f20:	4621      	mov	r1, r4
 8003f22:	008a      	lsls	r2, r1, #2
 8003f24:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003f28:	f7fc f94e 	bl	80001c8 <__aeabi_uldivmod>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	460b      	mov	r3, r1
 8003f30:	4b60      	ldr	r3, [pc, #384]	; (80040b4 <UART_SetConfig+0x4e4>)
 8003f32:	fba3 2302 	umull	r2, r3, r3, r2
 8003f36:	095b      	lsrs	r3, r3, #5
 8003f38:	011c      	lsls	r4, r3, #4
 8003f3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003f44:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003f48:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003f4c:	4642      	mov	r2, r8
 8003f4e:	464b      	mov	r3, r9
 8003f50:	1891      	adds	r1, r2, r2
 8003f52:	61b9      	str	r1, [r7, #24]
 8003f54:	415b      	adcs	r3, r3
 8003f56:	61fb      	str	r3, [r7, #28]
 8003f58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f5c:	4641      	mov	r1, r8
 8003f5e:	1851      	adds	r1, r2, r1
 8003f60:	6139      	str	r1, [r7, #16]
 8003f62:	4649      	mov	r1, r9
 8003f64:	414b      	adcs	r3, r1
 8003f66:	617b      	str	r3, [r7, #20]
 8003f68:	f04f 0200 	mov.w	r2, #0
 8003f6c:	f04f 0300 	mov.w	r3, #0
 8003f70:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f74:	4659      	mov	r1, fp
 8003f76:	00cb      	lsls	r3, r1, #3
 8003f78:	4651      	mov	r1, sl
 8003f7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f7e:	4651      	mov	r1, sl
 8003f80:	00ca      	lsls	r2, r1, #3
 8003f82:	4610      	mov	r0, r2
 8003f84:	4619      	mov	r1, r3
 8003f86:	4603      	mov	r3, r0
 8003f88:	4642      	mov	r2, r8
 8003f8a:	189b      	adds	r3, r3, r2
 8003f8c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003f90:	464b      	mov	r3, r9
 8003f92:	460a      	mov	r2, r1
 8003f94:	eb42 0303 	adc.w	r3, r2, r3
 8003f98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	67bb      	str	r3, [r7, #120]	; 0x78
 8003fa6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003fa8:	f04f 0200 	mov.w	r2, #0
 8003fac:	f04f 0300 	mov.w	r3, #0
 8003fb0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003fb4:	4649      	mov	r1, r9
 8003fb6:	008b      	lsls	r3, r1, #2
 8003fb8:	4641      	mov	r1, r8
 8003fba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003fbe:	4641      	mov	r1, r8
 8003fc0:	008a      	lsls	r2, r1, #2
 8003fc2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003fc6:	f7fc f8ff 	bl	80001c8 <__aeabi_uldivmod>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	460b      	mov	r3, r1
 8003fce:	4b39      	ldr	r3, [pc, #228]	; (80040b4 <UART_SetConfig+0x4e4>)
 8003fd0:	fba3 1302 	umull	r1, r3, r3, r2
 8003fd4:	095b      	lsrs	r3, r3, #5
 8003fd6:	2164      	movs	r1, #100	; 0x64
 8003fd8:	fb01 f303 	mul.w	r3, r1, r3
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	011b      	lsls	r3, r3, #4
 8003fe0:	3332      	adds	r3, #50	; 0x32
 8003fe2:	4a34      	ldr	r2, [pc, #208]	; (80040b4 <UART_SetConfig+0x4e4>)
 8003fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8003fe8:	095b      	lsrs	r3, r3, #5
 8003fea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fee:	441c      	add	r4, r3
 8003ff0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	673b      	str	r3, [r7, #112]	; 0x70
 8003ff8:	677a      	str	r2, [r7, #116]	; 0x74
 8003ffa:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003ffe:	4642      	mov	r2, r8
 8004000:	464b      	mov	r3, r9
 8004002:	1891      	adds	r1, r2, r2
 8004004:	60b9      	str	r1, [r7, #8]
 8004006:	415b      	adcs	r3, r3
 8004008:	60fb      	str	r3, [r7, #12]
 800400a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800400e:	4641      	mov	r1, r8
 8004010:	1851      	adds	r1, r2, r1
 8004012:	6039      	str	r1, [r7, #0]
 8004014:	4649      	mov	r1, r9
 8004016:	414b      	adcs	r3, r1
 8004018:	607b      	str	r3, [r7, #4]
 800401a:	f04f 0200 	mov.w	r2, #0
 800401e:	f04f 0300 	mov.w	r3, #0
 8004022:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004026:	4659      	mov	r1, fp
 8004028:	00cb      	lsls	r3, r1, #3
 800402a:	4651      	mov	r1, sl
 800402c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004030:	4651      	mov	r1, sl
 8004032:	00ca      	lsls	r2, r1, #3
 8004034:	4610      	mov	r0, r2
 8004036:	4619      	mov	r1, r3
 8004038:	4603      	mov	r3, r0
 800403a:	4642      	mov	r2, r8
 800403c:	189b      	adds	r3, r3, r2
 800403e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004040:	464b      	mov	r3, r9
 8004042:	460a      	mov	r2, r1
 8004044:	eb42 0303 	adc.w	r3, r2, r3
 8004048:	66fb      	str	r3, [r7, #108]	; 0x6c
 800404a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	663b      	str	r3, [r7, #96]	; 0x60
 8004054:	667a      	str	r2, [r7, #100]	; 0x64
 8004056:	f04f 0200 	mov.w	r2, #0
 800405a:	f04f 0300 	mov.w	r3, #0
 800405e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004062:	4649      	mov	r1, r9
 8004064:	008b      	lsls	r3, r1, #2
 8004066:	4641      	mov	r1, r8
 8004068:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800406c:	4641      	mov	r1, r8
 800406e:	008a      	lsls	r2, r1, #2
 8004070:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004074:	f7fc f8a8 	bl	80001c8 <__aeabi_uldivmod>
 8004078:	4602      	mov	r2, r0
 800407a:	460b      	mov	r3, r1
 800407c:	4b0d      	ldr	r3, [pc, #52]	; (80040b4 <UART_SetConfig+0x4e4>)
 800407e:	fba3 1302 	umull	r1, r3, r3, r2
 8004082:	095b      	lsrs	r3, r3, #5
 8004084:	2164      	movs	r1, #100	; 0x64
 8004086:	fb01 f303 	mul.w	r3, r1, r3
 800408a:	1ad3      	subs	r3, r2, r3
 800408c:	011b      	lsls	r3, r3, #4
 800408e:	3332      	adds	r3, #50	; 0x32
 8004090:	4a08      	ldr	r2, [pc, #32]	; (80040b4 <UART_SetConfig+0x4e4>)
 8004092:	fba2 2303 	umull	r2, r3, r2, r3
 8004096:	095b      	lsrs	r3, r3, #5
 8004098:	f003 020f 	and.w	r2, r3, #15
 800409c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4422      	add	r2, r4
 80040a4:	609a      	str	r2, [r3, #8]
}
 80040a6:	bf00      	nop
 80040a8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80040ac:	46bd      	mov	sp, r7
 80040ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040b2:	bf00      	nop
 80040b4:	51eb851f 	.word	0x51eb851f

080040b8 <__libc_init_array>:
 80040b8:	b570      	push	{r4, r5, r6, lr}
 80040ba:	4d0d      	ldr	r5, [pc, #52]	; (80040f0 <__libc_init_array+0x38>)
 80040bc:	4c0d      	ldr	r4, [pc, #52]	; (80040f4 <__libc_init_array+0x3c>)
 80040be:	1b64      	subs	r4, r4, r5
 80040c0:	10a4      	asrs	r4, r4, #2
 80040c2:	2600      	movs	r6, #0
 80040c4:	42a6      	cmp	r6, r4
 80040c6:	d109      	bne.n	80040dc <__libc_init_array+0x24>
 80040c8:	4d0b      	ldr	r5, [pc, #44]	; (80040f8 <__libc_init_array+0x40>)
 80040ca:	4c0c      	ldr	r4, [pc, #48]	; (80040fc <__libc_init_array+0x44>)
 80040cc:	f000 f82e 	bl	800412c <_init>
 80040d0:	1b64      	subs	r4, r4, r5
 80040d2:	10a4      	asrs	r4, r4, #2
 80040d4:	2600      	movs	r6, #0
 80040d6:	42a6      	cmp	r6, r4
 80040d8:	d105      	bne.n	80040e6 <__libc_init_array+0x2e>
 80040da:	bd70      	pop	{r4, r5, r6, pc}
 80040dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80040e0:	4798      	blx	r3
 80040e2:	3601      	adds	r6, #1
 80040e4:	e7ee      	b.n	80040c4 <__libc_init_array+0xc>
 80040e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80040ea:	4798      	blx	r3
 80040ec:	3601      	adds	r6, #1
 80040ee:	e7f2      	b.n	80040d6 <__libc_init_array+0x1e>
 80040f0:	0800416c 	.word	0x0800416c
 80040f4:	0800416c 	.word	0x0800416c
 80040f8:	0800416c 	.word	0x0800416c
 80040fc:	08004170 	.word	0x08004170

08004100 <memcpy>:
 8004100:	440a      	add	r2, r1
 8004102:	4291      	cmp	r1, r2
 8004104:	f100 33ff 	add.w	r3, r0, #4294967295
 8004108:	d100      	bne.n	800410c <memcpy+0xc>
 800410a:	4770      	bx	lr
 800410c:	b510      	push	{r4, lr}
 800410e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004112:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004116:	4291      	cmp	r1, r2
 8004118:	d1f9      	bne.n	800410e <memcpy+0xe>
 800411a:	bd10      	pop	{r4, pc}

0800411c <memset>:
 800411c:	4402      	add	r2, r0
 800411e:	4603      	mov	r3, r0
 8004120:	4293      	cmp	r3, r2
 8004122:	d100      	bne.n	8004126 <memset+0xa>
 8004124:	4770      	bx	lr
 8004126:	f803 1b01 	strb.w	r1, [r3], #1
 800412a:	e7f9      	b.n	8004120 <memset+0x4>

0800412c <_init>:
 800412c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800412e:	bf00      	nop
 8004130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004132:	bc08      	pop	{r3}
 8004134:	469e      	mov	lr, r3
 8004136:	4770      	bx	lr

08004138 <_fini>:
 8004138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800413a:	bf00      	nop
 800413c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800413e:	bc08      	pop	{r3}
 8004140:	469e      	mov	lr, r3
 8004142:	4770      	bx	lr
