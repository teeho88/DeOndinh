
IMU_50.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e80  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08004008  08004008  00014008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004028  08004028  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004028  08004028  00014028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004030  08004030  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004030  08004030  00014030  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004034  08004034  00014034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004038  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          0000036c  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000378  20000378  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a90c  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b50  00000000  00000000  0002a948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000838  00000000  00000000  0002c498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000007a0  00000000  00000000  0002ccd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021bc3  00000000  00000000  0002d470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ac8b  00000000  00000000  0004f033  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cf2f4  00000000  00000000  00059cbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00128fb2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000020cc  00000000  00000000  00129004  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003ff0 	.word	0x08003ff0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003ff0 	.word	0x08003ff0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <IMU50_SendCommand>:
uint8_t READ_QUATERNION[5] = {0x77,0x04,0x00,0x57,0x5B};
uint8_t READ_ALL[5] = {0x77,0x04,0x00,0x59,0x5D};
uint8_t SAVE_SETTING[5] = {0x77,0x04,0x00,0x0A,0x0E};

void IMU50_SendCommand(uint8_t *cmd, uint16_t len)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
 80004d4:	460b      	mov	r3, r1
 80004d6:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&MyUart,cmd, len, 100);
 80004d8:	887a      	ldrh	r2, [r7, #2]
 80004da:	2364      	movs	r3, #100	; 0x64
 80004dc:	6879      	ldr	r1, [r7, #4]
 80004de:	4803      	ldr	r0, [pc, #12]	; (80004ec <IMU50_SendCommand+0x20>)
 80004e0:	f002 fb97 	bl	8002c12 <HAL_UART_Transmit>
}
 80004e4:	bf00      	nop
 80004e6:	3708      	adds	r7, #8
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bd80      	pop	{r7, pc}
 80004ec:	20000028 	.word	0x20000028

080004f0 <IMU50_Init>:
	return x;
}


void IMU50_Init(UART_HandleTypeDef *huart, uint8_t out_freq, uint8_t out_mode, uint8_t *inBuff, uint16_t len)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b088      	sub	sp, #32
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	60f8      	str	r0, [r7, #12]
 80004f8:	607b      	str	r3, [r7, #4]
 80004fa:	460b      	mov	r3, r1
 80004fc:	72fb      	strb	r3, [r7, #11]
 80004fe:	4613      	mov	r3, r2
 8000500:	72bb      	strb	r3, [r7, #10]
    uint8_t SET_OUT_FREQ[6] = {0x77,0x05,0x00,0x0C,out_freq,0x11};
 8000502:	2377      	movs	r3, #119	; 0x77
 8000504:	763b      	strb	r3, [r7, #24]
 8000506:	2305      	movs	r3, #5
 8000508:	767b      	strb	r3, [r7, #25]
 800050a:	2300      	movs	r3, #0
 800050c:	76bb      	strb	r3, [r7, #26]
 800050e:	230c      	movs	r3, #12
 8000510:	76fb      	strb	r3, [r7, #27]
 8000512:	7afb      	ldrb	r3, [r7, #11]
 8000514:	773b      	strb	r3, [r7, #28]
 8000516:	2311      	movs	r3, #17
 8000518:	777b      	strb	r3, [r7, #29]
    uint8_t SET_AUTO_OUT[6] = {0x77,0x05,0x00,0x56,out_mode,0x5B};
 800051a:	2377      	movs	r3, #119	; 0x77
 800051c:	743b      	strb	r3, [r7, #16]
 800051e:	2305      	movs	r3, #5
 8000520:	747b      	strb	r3, [r7, #17]
 8000522:	2300      	movs	r3, #0
 8000524:	74bb      	strb	r3, [r7, #18]
 8000526:	2356      	movs	r3, #86	; 0x56
 8000528:	74fb      	strb	r3, [r7, #19]
 800052a:	7abb      	ldrb	r3, [r7, #10]
 800052c:	753b      	strb	r3, [r7, #20]
 800052e:	235b      	movs	r3, #91	; 0x5b
 8000530:	757b      	strb	r3, [r7, #21]
	respond  = inBuff;
 8000532:	4a10      	ldr	r2, [pc, #64]	; (8000574 <IMU50_Init+0x84>)
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	6013      	str	r3, [r2, #0]
	lenBuffer = len;
 8000538:	4a0f      	ldr	r2, [pc, #60]	; (8000578 <IMU50_Init+0x88>)
 800053a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800053c:	8013      	strh	r3, [r2, #0]
	memcpy(&MyUart,huart,sizeof(*huart));
 800053e:	2244      	movs	r2, #68	; 0x44
 8000540:	68f9      	ldr	r1, [r7, #12]
 8000542:	480e      	ldr	r0, [pc, #56]	; (800057c <IMU50_Init+0x8c>)
 8000544:	f003 fd3e 	bl	8003fc4 <memcpy>
	IMU50_SendCommand(SET_OUT_FREQ,6);
 8000548:	f107 0318 	add.w	r3, r7, #24
 800054c:	2106      	movs	r1, #6
 800054e:	4618      	mov	r0, r3
 8000550:	f7ff ffbc 	bl	80004cc <IMU50_SendCommand>
	HAL_Delay(100);
 8000554:	2064      	movs	r0, #100	; 0x64
 8000556:	f000 fd41 	bl	8000fdc <HAL_Delay>
	IMU50_SendCommand(SET_AUTO_OUT,6);
 800055a:	f107 0310 	add.w	r3, r7, #16
 800055e:	2106      	movs	r1, #6
 8000560:	4618      	mov	r0, r3
 8000562:	f7ff ffb3 	bl	80004cc <IMU50_SendCommand>
	HAL_Delay(100);
 8000566:	2064      	movs	r0, #100	; 0x64
 8000568:	f000 fd38 	bl	8000fdc <HAL_Delay>
}
 800056c:	bf00      	nop
 800056e:	3720      	adds	r7, #32
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}
 8000574:	2000006c 	.word	0x2000006c
 8000578:	20000070 	.word	0x20000070
 800057c:	20000028 	.word	0x20000028

08000580 <HAL_UART_RxCpltCallback>:
uint16_t rxLastPos1 = 0, rxThisPos1 = 0;
uint8_t rxRing2[2*BUFFER_SIZE_2];
uint16_t rxLastPos2 = 0, rxThisPos2 = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a0e      	ldr	r2, [pc, #56]	; (80005c8 <HAL_UART_RxCpltCallback+0x48>)
 800058e:	4293      	cmp	r3, r2
 8000590:	d108      	bne.n	80005a4 <HAL_UART_RxCpltCallback+0x24>
		if (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE)) {
 8000592:	4b0e      	ldr	r3, [pc, #56]	; (80005cc <HAL_UART_RxCpltCallback+0x4c>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	f003 0310 	and.w	r3, r3, #16
 800059c:	2b10      	cmp	r3, #16
 800059e:	d101      	bne.n	80005a4 <HAL_UART_RxCpltCallback+0x24>
			UART1Complete();
 80005a0:	f000 f81a 	bl	80005d8 <UART1Complete>
		}
	}
	if (huart->Instance == USART2) {
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a09      	ldr	r2, [pc, #36]	; (80005d0 <HAL_UART_RxCpltCallback+0x50>)
 80005aa:	4293      	cmp	r3, r2
 80005ac:	d108      	bne.n	80005c0 <HAL_UART_RxCpltCallback+0x40>
		if (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_IDLE)) {
 80005ae:	4b09      	ldr	r3, [pc, #36]	; (80005d4 <HAL_UART_RxCpltCallback+0x54>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	f003 0310 	and.w	r3, r3, #16
 80005b8:	2b10      	cmp	r3, #16
 80005ba:	d101      	bne.n	80005c0 <HAL_UART_RxCpltCallback+0x40>
			UART2Complete();
 80005bc:	f000 f85a 	bl	8000674 <UART2Complete>
		}
	}
}
 80005c0:	bf00      	nop
 80005c2:	3708      	adds	r7, #8
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	40011000 	.word	0x40011000
 80005cc:	20000134 	.word	0x20000134
 80005d0:	40004400 	.word	0x40004400
 80005d4:	20000178 	.word	0x20000178

080005d8 <UART1Complete>:

void UART1Complete(void) {
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
  uint16_t len;
  rxThisPos1 = sizeof(rxRing1) - __HAL_DMA_GET_COUNTER(&hdma_usart1_rx); //get current write pointer
 80005de:	4b20      	ldr	r3, [pc, #128]	; (8000660 <UART1Complete+0x88>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	685b      	ldr	r3, [r3, #4]
 80005e4:	b29b      	uxth	r3, r3
 80005e6:	f1c3 0328 	rsb	r3, r3, #40	; 0x28
 80005ea:	b29a      	uxth	r2, r3
 80005ec:	4b1d      	ldr	r3, [pc, #116]	; (8000664 <UART1Complete+0x8c>)
 80005ee:	801a      	strh	r2, [r3, #0]
  if(rxThisPos1 > rxLastPos1)
 80005f0:	4b1c      	ldr	r3, [pc, #112]	; (8000664 <UART1Complete+0x8c>)
 80005f2:	881a      	ldrh	r2, [r3, #0]
 80005f4:	4b1c      	ldr	r3, [pc, #112]	; (8000668 <UART1Complete+0x90>)
 80005f6:	881b      	ldrh	r3, [r3, #0]
 80005f8:	429a      	cmp	r2, r3
 80005fa:	d910      	bls.n	800061e <UART1Complete+0x46>
  {
	  len = rxThisPos1 - rxLastPos1; //calculate how far the DMA write pointer has moved
 80005fc:	4b19      	ldr	r3, [pc, #100]	; (8000664 <UART1Complete+0x8c>)
 80005fe:	881a      	ldrh	r2, [r3, #0]
 8000600:	4b19      	ldr	r3, [pc, #100]	; (8000668 <UART1Complete+0x90>)
 8000602:	881b      	ldrh	r3, [r3, #0]
 8000604:	1ad3      	subs	r3, r2, r3
 8000606:	80fb      	strh	r3, [r7, #6]
	  memcpy(inData1, (rxRing1 + rxLastPos1), len);
 8000608:	4b17      	ldr	r3, [pc, #92]	; (8000668 <UART1Complete+0x90>)
 800060a:	881b      	ldrh	r3, [r3, #0]
 800060c:	461a      	mov	r2, r3
 800060e:	4b17      	ldr	r3, [pc, #92]	; (800066c <UART1Complete+0x94>)
 8000610:	4413      	add	r3, r2
 8000612:	88fa      	ldrh	r2, [r7, #6]
 8000614:	4619      	mov	r1, r3
 8000616:	4816      	ldr	r0, [pc, #88]	; (8000670 <UART1Complete+0x98>)
 8000618:	f003 fcd4 	bl	8003fc4 <memcpy>
 800061c:	e017      	b.n	800064e <UART1Complete+0x76>
  }
  else
  {
	  len = sizeof(rxRing1) - rxLastPos1;
 800061e:	4b12      	ldr	r3, [pc, #72]	; (8000668 <UART1Complete+0x90>)
 8000620:	881b      	ldrh	r3, [r3, #0]
 8000622:	f1c3 0328 	rsb	r3, r3, #40	; 0x28
 8000626:	80fb      	strh	r3, [r7, #6]
	  memcpy(inData1, (rxRing1 + rxLastPos1), len);
 8000628:	4b0f      	ldr	r3, [pc, #60]	; (8000668 <UART1Complete+0x90>)
 800062a:	881b      	ldrh	r3, [r3, #0]
 800062c:	461a      	mov	r2, r3
 800062e:	4b0f      	ldr	r3, [pc, #60]	; (800066c <UART1Complete+0x94>)
 8000630:	4413      	add	r3, r2
 8000632:	88fa      	ldrh	r2, [r7, #6]
 8000634:	4619      	mov	r1, r3
 8000636:	480e      	ldr	r0, [pc, #56]	; (8000670 <UART1Complete+0x98>)
 8000638:	f003 fcc4 	bl	8003fc4 <memcpy>
	  memcpy((inData1 +  len), rxRing1, rxThisPos1);
 800063c:	88fb      	ldrh	r3, [r7, #6]
 800063e:	4a0c      	ldr	r2, [pc, #48]	; (8000670 <UART1Complete+0x98>)
 8000640:	4413      	add	r3, r2
 8000642:	4a08      	ldr	r2, [pc, #32]	; (8000664 <UART1Complete+0x8c>)
 8000644:	8812      	ldrh	r2, [r2, #0]
 8000646:	4909      	ldr	r1, [pc, #36]	; (800066c <UART1Complete+0x94>)
 8000648:	4618      	mov	r0, r3
 800064a:	f003 fcbb 	bl	8003fc4 <memcpy>

  }
  rxLastPos1 = rxThisPos1;
 800064e:	4b05      	ldr	r3, [pc, #20]	; (8000664 <UART1Complete+0x8c>)
 8000650:	881a      	ldrh	r2, [r3, #0]
 8000652:	4b05      	ldr	r3, [pc, #20]	; (8000668 <UART1Complete+0x90>)
 8000654:	801a      	strh	r2, [r3, #0]
}
 8000656:	bf00      	nop
 8000658:	3708      	adds	r7, #8
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	200001bc 	.word	0x200001bc
 8000664:	200002a6 	.word	0x200002a6
 8000668:	200002a4 	.word	0x200002a4
 800066c:	2000027c 	.word	0x2000027c
 8000670:	20000074 	.word	0x20000074

08000674 <UART2Complete>:

void UART2Complete(void) {
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
  uint16_t len;
  rxThisPos2 = sizeof(rxRing2) - __HAL_DMA_GET_COUNTER(&hdma_usart2_rx); //get current write pointer
 800067a:	4b20      	ldr	r3, [pc, #128]	; (80006fc <UART2Complete+0x88>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	685b      	ldr	r3, [r3, #4]
 8000680:	b29b      	uxth	r3, r3
 8000682:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 8000686:	b29a      	uxth	r2, r3
 8000688:	4b1d      	ldr	r3, [pc, #116]	; (8000700 <UART2Complete+0x8c>)
 800068a:	801a      	strh	r2, [r3, #0]
  if(rxThisPos2 > rxLastPos2)
 800068c:	4b1c      	ldr	r3, [pc, #112]	; (8000700 <UART2Complete+0x8c>)
 800068e:	881a      	ldrh	r2, [r3, #0]
 8000690:	4b1c      	ldr	r3, [pc, #112]	; (8000704 <UART2Complete+0x90>)
 8000692:	881b      	ldrh	r3, [r3, #0]
 8000694:	429a      	cmp	r2, r3
 8000696:	d910      	bls.n	80006ba <UART2Complete+0x46>
  {
	  len = rxThisPos2 - rxLastPos2; //calculate how far the DMA write pointer has moved
 8000698:	4b19      	ldr	r3, [pc, #100]	; (8000700 <UART2Complete+0x8c>)
 800069a:	881a      	ldrh	r2, [r3, #0]
 800069c:	4b19      	ldr	r3, [pc, #100]	; (8000704 <UART2Complete+0x90>)
 800069e:	881b      	ldrh	r3, [r3, #0]
 80006a0:	1ad3      	subs	r3, r2, r3
 80006a2:	80fb      	strh	r3, [r7, #6]
	  memcpy(inData2, (rxRing2 + rxLastPos2), len);
 80006a4:	4b17      	ldr	r3, [pc, #92]	; (8000704 <UART2Complete+0x90>)
 80006a6:	881b      	ldrh	r3, [r3, #0]
 80006a8:	461a      	mov	r2, r3
 80006aa:	4b17      	ldr	r3, [pc, #92]	; (8000708 <UART2Complete+0x94>)
 80006ac:	4413      	add	r3, r2
 80006ae:	88fa      	ldrh	r2, [r7, #6]
 80006b0:	4619      	mov	r1, r3
 80006b2:	4816      	ldr	r0, [pc, #88]	; (800070c <UART2Complete+0x98>)
 80006b4:	f003 fc86 	bl	8003fc4 <memcpy>
 80006b8:	e017      	b.n	80006ea <UART2Complete+0x76>
  }
  else
  {
	  len = sizeof(rxRing2) - rxLastPos2;
 80006ba:	4b12      	ldr	r3, [pc, #72]	; (8000704 <UART2Complete+0x90>)
 80006bc:	881b      	ldrh	r3, [r3, #0]
 80006be:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 80006c2:	80fb      	strh	r3, [r7, #6]
	  memcpy(inData2, (rxRing2 + rxLastPos2), len);
 80006c4:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <UART2Complete+0x90>)
 80006c6:	881b      	ldrh	r3, [r3, #0]
 80006c8:	461a      	mov	r2, r3
 80006ca:	4b0f      	ldr	r3, [pc, #60]	; (8000708 <UART2Complete+0x94>)
 80006cc:	4413      	add	r3, r2
 80006ce:	88fa      	ldrh	r2, [r7, #6]
 80006d0:	4619      	mov	r1, r3
 80006d2:	480e      	ldr	r0, [pc, #56]	; (800070c <UART2Complete+0x98>)
 80006d4:	f003 fc76 	bl	8003fc4 <memcpy>
	  memcpy((inData2 +  len), rxRing2, rxThisPos2);
 80006d8:	88fb      	ldrh	r3, [r7, #6]
 80006da:	4a0c      	ldr	r2, [pc, #48]	; (800070c <UART2Complete+0x98>)
 80006dc:	4413      	add	r3, r2
 80006de:	4a08      	ldr	r2, [pc, #32]	; (8000700 <UART2Complete+0x8c>)
 80006e0:	8812      	ldrh	r2, [r2, #0]
 80006e2:	4909      	ldr	r1, [pc, #36]	; (8000708 <UART2Complete+0x94>)
 80006e4:	4618      	mov	r0, r3
 80006e6:	f003 fc6d 	bl	8003fc4 <memcpy>

  }
  rxLastPos2 = rxThisPos2;
 80006ea:	4b05      	ldr	r3, [pc, #20]	; (8000700 <UART2Complete+0x8c>)
 80006ec:	881a      	ldrh	r2, [r3, #0]
 80006ee:	4b05      	ldr	r3, [pc, #20]	; (8000704 <UART2Complete+0x90>)
 80006f0:	801a      	strh	r2, [r3, #0]
}
 80006f2:	bf00      	nop
 80006f4:	3708      	adds	r7, #8
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	2000021c 	.word	0x2000021c
 8000700:	20000372 	.word	0x20000372
 8000704:	20000370 	.word	0x20000370
 8000708:	200002a8 	.word	0x200002a8
 800070c:	20000088 	.word	0x20000088

08000710 <UARTRXInit>:

void UARTRXInit(void) {
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);   // enable idle line interrupt
 8000714:	4b15      	ldr	r3, [pc, #84]	; (800076c <UARTRXInit+0x5c>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	68da      	ldr	r2, [r3, #12]
 800071a:	4b14      	ldr	r3, [pc, #80]	; (800076c <UARTRXInit+0x5c>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	f042 0210 	orr.w	r2, r2, #16
 8000722:	60da      	str	r2, [r3, #12]
	hdma_usart1_rx.Instance->CR &= ~DMA_SxCR_HTIE; // disable uart half tx interrupt
 8000724:	4b12      	ldr	r3, [pc, #72]	; (8000770 <UARTRXInit+0x60>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	681a      	ldr	r2, [r3, #0]
 800072a:	4b11      	ldr	r3, [pc, #68]	; (8000770 <UARTRXInit+0x60>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	f022 0208 	bic.w	r2, r2, #8
 8000732:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(&huart1, rxRing1, 2 * BUFFER_SIZE_1);
 8000734:	2228      	movs	r2, #40	; 0x28
 8000736:	490f      	ldr	r1, [pc, #60]	; (8000774 <UARTRXInit+0x64>)
 8000738:	480c      	ldr	r0, [pc, #48]	; (800076c <UARTRXInit+0x5c>)
 800073a:	f002 fafc 	bl	8002d36 <HAL_UART_Receive_DMA>
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);   // enable idle line interrupt
 800073e:	4b0b      	ldr	r3, [pc, #44]	; (800076c <UARTRXInit+0x5c>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	68da      	ldr	r2, [r3, #12]
 8000744:	4b09      	ldr	r3, [pc, #36]	; (800076c <UARTRXInit+0x5c>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	f042 0210 	orr.w	r2, r2, #16
 800074c:	60da      	str	r2, [r3, #12]
	hdma_usart2_rx.Instance->CR &= ~DMA_SxCR_HTIE; // disable uart half tx interrupt
 800074e:	4b0a      	ldr	r3, [pc, #40]	; (8000778 <UARTRXInit+0x68>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	681a      	ldr	r2, [r3, #0]
 8000754:	4b08      	ldr	r3, [pc, #32]	; (8000778 <UARTRXInit+0x68>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	f022 0208 	bic.w	r2, r2, #8
 800075c:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(&huart2, rxRing2, 2 * BUFFER_SIZE_2);
 800075e:	22c8      	movs	r2, #200	; 0xc8
 8000760:	4906      	ldr	r1, [pc, #24]	; (800077c <UARTRXInit+0x6c>)
 8000762:	4807      	ldr	r0, [pc, #28]	; (8000780 <UARTRXInit+0x70>)
 8000764:	f002 fae7 	bl	8002d36 <HAL_UART_Receive_DMA>
}
 8000768:	bf00      	nop
 800076a:	bd80      	pop	{r7, pc}
 800076c:	20000134 	.word	0x20000134
 8000770:	200001bc 	.word	0x200001bc
 8000774:	2000027c 	.word	0x2000027c
 8000778:	2000021c 	.word	0x2000021c
 800077c:	200002a8 	.word	0x200002a8
 8000780:	20000178 	.word	0x20000178

08000784 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800078a:	f000 fbb5 	bl	8000ef8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800078e:	f000 f819 	bl	80007c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000792:	f000 f95d 	bl	8000a50 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000796:	f000 f87f 	bl	8000898 <MX_ADC1_Init>
  MX_DMA_Init();
 800079a:	f000 f923 	bl	80009e4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800079e:	f000 f8f7 	bl	8000990 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80007a2:	f000 f8cb 	bl	800093c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  UARTRXInit();
 80007a6:	f7ff ffb3 	bl	8000710 <UARTRXInit>
  IMU50_Init(&huart1, ANSWER, AUT_ANGLE, inData1, BUFFER_SIZE_1);
 80007aa:	2314      	movs	r3, #20
 80007ac:	9300      	str	r3, [sp, #0]
 80007ae:	4b03      	ldr	r3, [pc, #12]	; (80007bc <main+0x38>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	2100      	movs	r1, #0
 80007b4:	4802      	ldr	r0, [pc, #8]	; (80007c0 <main+0x3c>)
 80007b6:	f7ff fe9b 	bl	80004f0 <IMU50_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007ba:	e7fe      	b.n	80007ba <main+0x36>
 80007bc:	20000074 	.word	0x20000074
 80007c0:	20000134 	.word	0x20000134

080007c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b094      	sub	sp, #80	; 0x50
 80007c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ca:	f107 0320 	add.w	r3, r7, #32
 80007ce:	2230      	movs	r2, #48	; 0x30
 80007d0:	2100      	movs	r1, #0
 80007d2:	4618      	mov	r0, r3
 80007d4:	f003 fc04 	bl	8003fe0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007d8:	f107 030c 	add.w	r3, r7, #12
 80007dc:	2200      	movs	r2, #0
 80007de:	601a      	str	r2, [r3, #0]
 80007e0:	605a      	str	r2, [r3, #4]
 80007e2:	609a      	str	r2, [r3, #8]
 80007e4:	60da      	str	r2, [r3, #12]
 80007e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007e8:	2300      	movs	r3, #0
 80007ea:	60bb      	str	r3, [r7, #8]
 80007ec:	4b28      	ldr	r3, [pc, #160]	; (8000890 <SystemClock_Config+0xcc>)
 80007ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f0:	4a27      	ldr	r2, [pc, #156]	; (8000890 <SystemClock_Config+0xcc>)
 80007f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007f6:	6413      	str	r3, [r2, #64]	; 0x40
 80007f8:	4b25      	ldr	r3, [pc, #148]	; (8000890 <SystemClock_Config+0xcc>)
 80007fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000800:	60bb      	str	r3, [r7, #8]
 8000802:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000804:	2300      	movs	r3, #0
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	4b22      	ldr	r3, [pc, #136]	; (8000894 <SystemClock_Config+0xd0>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a21      	ldr	r2, [pc, #132]	; (8000894 <SystemClock_Config+0xd0>)
 800080e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000812:	6013      	str	r3, [r2, #0]
 8000814:	4b1f      	ldr	r3, [pc, #124]	; (8000894 <SystemClock_Config+0xd0>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800081c:	607b      	str	r3, [r7, #4]
 800081e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000820:	2301      	movs	r3, #1
 8000822:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000824:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000828:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800082a:	2302      	movs	r3, #2
 800082c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800082e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000832:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000834:	2304      	movs	r3, #4
 8000836:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000838:	23a8      	movs	r3, #168	; 0xa8
 800083a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800083c:	2302      	movs	r3, #2
 800083e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000840:	2304      	movs	r3, #4
 8000842:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000844:	f107 0320 	add.w	r3, r7, #32
 8000848:	4618      	mov	r0, r3
 800084a:	f001 fcfd 	bl	8002248 <HAL_RCC_OscConfig>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000854:	f000 f924 	bl	8000aa0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000858:	230f      	movs	r3, #15
 800085a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800085c:	2302      	movs	r3, #2
 800085e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000860:	2300      	movs	r3, #0
 8000862:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000864:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000868:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800086a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800086e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000870:	f107 030c 	add.w	r3, r7, #12
 8000874:	2105      	movs	r1, #5
 8000876:	4618      	mov	r0, r3
 8000878:	f001 ff5e 	bl	8002738 <HAL_RCC_ClockConfig>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000882:	f000 f90d 	bl	8000aa0 <Error_Handler>
  }
}
 8000886:	bf00      	nop
 8000888:	3750      	adds	r7, #80	; 0x50
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	40023800 	.word	0x40023800
 8000894:	40007000 	.word	0x40007000

08000898 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b084      	sub	sp, #16
 800089c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800089e:	463b      	mov	r3, r7
 80008a0:	2200      	movs	r2, #0
 80008a2:	601a      	str	r2, [r3, #0]
 80008a4:	605a      	str	r2, [r3, #4]
 80008a6:	609a      	str	r2, [r3, #8]
 80008a8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80008aa:	4b21      	ldr	r3, [pc, #132]	; (8000930 <MX_ADC1_Init+0x98>)
 80008ac:	4a21      	ldr	r2, [pc, #132]	; (8000934 <MX_ADC1_Init+0x9c>)
 80008ae:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80008b0:	4b1f      	ldr	r3, [pc, #124]	; (8000930 <MX_ADC1_Init+0x98>)
 80008b2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80008b6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008b8:	4b1d      	ldr	r3, [pc, #116]	; (8000930 <MX_ADC1_Init+0x98>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80008be:	4b1c      	ldr	r3, [pc, #112]	; (8000930 <MX_ADC1_Init+0x98>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008c4:	4b1a      	ldr	r3, [pc, #104]	; (8000930 <MX_ADC1_Init+0x98>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008ca:	4b19      	ldr	r3, [pc, #100]	; (8000930 <MX_ADC1_Init+0x98>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008d2:	4b17      	ldr	r3, [pc, #92]	; (8000930 <MX_ADC1_Init+0x98>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008d8:	4b15      	ldr	r3, [pc, #84]	; (8000930 <MX_ADC1_Init+0x98>)
 80008da:	4a17      	ldr	r2, [pc, #92]	; (8000938 <MX_ADC1_Init+0xa0>)
 80008dc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008de:	4b14      	ldr	r3, [pc, #80]	; (8000930 <MX_ADC1_Init+0x98>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80008e4:	4b12      	ldr	r3, [pc, #72]	; (8000930 <MX_ADC1_Init+0x98>)
 80008e6:	2201      	movs	r2, #1
 80008e8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80008ea:	4b11      	ldr	r3, [pc, #68]	; (8000930 <MX_ADC1_Init+0x98>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008f2:	4b0f      	ldr	r3, [pc, #60]	; (8000930 <MX_ADC1_Init+0x98>)
 80008f4:	2201      	movs	r2, #1
 80008f6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008f8:	480d      	ldr	r0, [pc, #52]	; (8000930 <MX_ADC1_Init+0x98>)
 80008fa:	f000 fb93 	bl	8001024 <HAL_ADC_Init>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000904:	f000 f8cc 	bl	8000aa0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000908:	2300      	movs	r3, #0
 800090a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800090c:	2301      	movs	r3, #1
 800090e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000910:	2300      	movs	r3, #0
 8000912:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000914:	463b      	mov	r3, r7
 8000916:	4619      	mov	r1, r3
 8000918:	4805      	ldr	r0, [pc, #20]	; (8000930 <MX_ADC1_Init+0x98>)
 800091a:	f000 fbc7 	bl	80010ac <HAL_ADC_ConfigChannel>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000924:	f000 f8bc 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000928:	bf00      	nop
 800092a:	3710      	adds	r7, #16
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	200000ec 	.word	0x200000ec
 8000934:	40012000 	.word	0x40012000
 8000938:	0f000001 	.word	0x0f000001

0800093c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000940:	4b11      	ldr	r3, [pc, #68]	; (8000988 <MX_USART1_UART_Init+0x4c>)
 8000942:	4a12      	ldr	r2, [pc, #72]	; (800098c <MX_USART1_UART_Init+0x50>)
 8000944:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000946:	4b10      	ldr	r3, [pc, #64]	; (8000988 <MX_USART1_UART_Init+0x4c>)
 8000948:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800094c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800094e:	4b0e      	ldr	r3, [pc, #56]	; (8000988 <MX_USART1_UART_Init+0x4c>)
 8000950:	2200      	movs	r2, #0
 8000952:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000954:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <MX_USART1_UART_Init+0x4c>)
 8000956:	2200      	movs	r2, #0
 8000958:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800095a:	4b0b      	ldr	r3, [pc, #44]	; (8000988 <MX_USART1_UART_Init+0x4c>)
 800095c:	2200      	movs	r2, #0
 800095e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000960:	4b09      	ldr	r3, [pc, #36]	; (8000988 <MX_USART1_UART_Init+0x4c>)
 8000962:	220c      	movs	r2, #12
 8000964:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000966:	4b08      	ldr	r3, [pc, #32]	; (8000988 <MX_USART1_UART_Init+0x4c>)
 8000968:	2200      	movs	r2, #0
 800096a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800096c:	4b06      	ldr	r3, [pc, #24]	; (8000988 <MX_USART1_UART_Init+0x4c>)
 800096e:	2200      	movs	r2, #0
 8000970:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000972:	4805      	ldr	r0, [pc, #20]	; (8000988 <MX_USART1_UART_Init+0x4c>)
 8000974:	f002 f900 	bl	8002b78 <HAL_UART_Init>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800097e:	f000 f88f 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	20000134 	.word	0x20000134
 800098c:	40011000 	.word	0x40011000

08000990 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000994:	4b11      	ldr	r3, [pc, #68]	; (80009dc <MX_USART2_UART_Init+0x4c>)
 8000996:	4a12      	ldr	r2, [pc, #72]	; (80009e0 <MX_USART2_UART_Init+0x50>)
 8000998:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800099a:	4b10      	ldr	r3, [pc, #64]	; (80009dc <MX_USART2_UART_Init+0x4c>)
 800099c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009a2:	4b0e      	ldr	r3, [pc, #56]	; (80009dc <MX_USART2_UART_Init+0x4c>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009a8:	4b0c      	ldr	r3, [pc, #48]	; (80009dc <MX_USART2_UART_Init+0x4c>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009ae:	4b0b      	ldr	r3, [pc, #44]	; (80009dc <MX_USART2_UART_Init+0x4c>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009b4:	4b09      	ldr	r3, [pc, #36]	; (80009dc <MX_USART2_UART_Init+0x4c>)
 80009b6:	220c      	movs	r2, #12
 80009b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ba:	4b08      	ldr	r3, [pc, #32]	; (80009dc <MX_USART2_UART_Init+0x4c>)
 80009bc:	2200      	movs	r2, #0
 80009be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009c0:	4b06      	ldr	r3, [pc, #24]	; (80009dc <MX_USART2_UART_Init+0x4c>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009c6:	4805      	ldr	r0, [pc, #20]	; (80009dc <MX_USART2_UART_Init+0x4c>)
 80009c8:	f002 f8d6 	bl	8002b78 <HAL_UART_Init>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009d2:	f000 f865 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	20000178 	.word	0x20000178
 80009e0:	40004400 	.word	0x40004400

080009e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	607b      	str	r3, [r7, #4]
 80009ee:	4b17      	ldr	r3, [pc, #92]	; (8000a4c <MX_DMA_Init+0x68>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	4a16      	ldr	r2, [pc, #88]	; (8000a4c <MX_DMA_Init+0x68>)
 80009f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009f8:	6313      	str	r3, [r2, #48]	; 0x30
 80009fa:	4b14      	ldr	r3, [pc, #80]	; (8000a4c <MX_DMA_Init+0x68>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a02:	607b      	str	r3, [r7, #4]
 8000a04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	603b      	str	r3, [r7, #0]
 8000a0a:	4b10      	ldr	r3, [pc, #64]	; (8000a4c <MX_DMA_Init+0x68>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	4a0f      	ldr	r2, [pc, #60]	; (8000a4c <MX_DMA_Init+0x68>)
 8000a10:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a14:	6313      	str	r3, [r2, #48]	; 0x30
 8000a16:	4b0d      	ldr	r3, [pc, #52]	; (8000a4c <MX_DMA_Init+0x68>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a1e:	603b      	str	r3, [r7, #0]
 8000a20:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000a22:	2200      	movs	r2, #0
 8000a24:	2100      	movs	r1, #0
 8000a26:	2010      	movs	r0, #16
 8000a28:	f000 fe39 	bl	800169e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000a2c:	2010      	movs	r0, #16
 8000a2e:	f000 fe52 	bl	80016d6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000a32:	2200      	movs	r2, #0
 8000a34:	2100      	movs	r1, #0
 8000a36:	203a      	movs	r0, #58	; 0x3a
 8000a38:	f000 fe31 	bl	800169e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000a3c:	203a      	movs	r0, #58	; 0x3a
 8000a3e:	f000 fe4a 	bl	80016d6 <HAL_NVIC_EnableIRQ>

}
 8000a42:	bf00      	nop
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40023800 	.word	0x40023800

08000a50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	607b      	str	r3, [r7, #4]
 8000a5a:	4b10      	ldr	r3, [pc, #64]	; (8000a9c <MX_GPIO_Init+0x4c>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	4a0f      	ldr	r2, [pc, #60]	; (8000a9c <MX_GPIO_Init+0x4c>)
 8000a60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a64:	6313      	str	r3, [r2, #48]	; 0x30
 8000a66:	4b0d      	ldr	r3, [pc, #52]	; (8000a9c <MX_GPIO_Init+0x4c>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a6e:	607b      	str	r3, [r7, #4]
 8000a70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	603b      	str	r3, [r7, #0]
 8000a76:	4b09      	ldr	r3, [pc, #36]	; (8000a9c <MX_GPIO_Init+0x4c>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	4a08      	ldr	r2, [pc, #32]	; (8000a9c <MX_GPIO_Init+0x4c>)
 8000a7c:	f043 0301 	orr.w	r3, r3, #1
 8000a80:	6313      	str	r3, [r2, #48]	; 0x30
 8000a82:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <MX_GPIO_Init+0x4c>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	f003 0301 	and.w	r3, r3, #1
 8000a8a:	603b      	str	r3, [r7, #0]
 8000a8c:	683b      	ldr	r3, [r7, #0]

}
 8000a8e:	bf00      	nop
 8000a90:	370c      	adds	r7, #12
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	40023800 	.word	0x40023800

08000aa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa4:	b672      	cpsid	i
}
 8000aa6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aa8:	e7fe      	b.n	8000aa8 <Error_Handler+0x8>
	...

08000aac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	607b      	str	r3, [r7, #4]
 8000ab6:	4b10      	ldr	r3, [pc, #64]	; (8000af8 <HAL_MspInit+0x4c>)
 8000ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aba:	4a0f      	ldr	r2, [pc, #60]	; (8000af8 <HAL_MspInit+0x4c>)
 8000abc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ac0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ac2:	4b0d      	ldr	r3, [pc, #52]	; (8000af8 <HAL_MspInit+0x4c>)
 8000ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ac6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aca:	607b      	str	r3, [r7, #4]
 8000acc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	603b      	str	r3, [r7, #0]
 8000ad2:	4b09      	ldr	r3, [pc, #36]	; (8000af8 <HAL_MspInit+0x4c>)
 8000ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad6:	4a08      	ldr	r2, [pc, #32]	; (8000af8 <HAL_MspInit+0x4c>)
 8000ad8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000adc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ade:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <HAL_MspInit+0x4c>)
 8000ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ae6:	603b      	str	r3, [r7, #0]
 8000ae8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aea:	bf00      	nop
 8000aec:	370c      	adds	r7, #12
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	40023800 	.word	0x40023800

08000afc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b08a      	sub	sp, #40	; 0x28
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b04:	f107 0314 	add.w	r3, r7, #20
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	605a      	str	r2, [r3, #4]
 8000b0e:	609a      	str	r2, [r3, #8]
 8000b10:	60da      	str	r2, [r3, #12]
 8000b12:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a17      	ldr	r2, [pc, #92]	; (8000b78 <HAL_ADC_MspInit+0x7c>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d127      	bne.n	8000b6e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b1e:	2300      	movs	r3, #0
 8000b20:	613b      	str	r3, [r7, #16]
 8000b22:	4b16      	ldr	r3, [pc, #88]	; (8000b7c <HAL_ADC_MspInit+0x80>)
 8000b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b26:	4a15      	ldr	r2, [pc, #84]	; (8000b7c <HAL_ADC_MspInit+0x80>)
 8000b28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b2c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b2e:	4b13      	ldr	r3, [pc, #76]	; (8000b7c <HAL_ADC_MspInit+0x80>)
 8000b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b36:	613b      	str	r3, [r7, #16]
 8000b38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	60fb      	str	r3, [r7, #12]
 8000b3e:	4b0f      	ldr	r3, [pc, #60]	; (8000b7c <HAL_ADC_MspInit+0x80>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	4a0e      	ldr	r2, [pc, #56]	; (8000b7c <HAL_ADC_MspInit+0x80>)
 8000b44:	f043 0301 	orr.w	r3, r3, #1
 8000b48:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4a:	4b0c      	ldr	r3, [pc, #48]	; (8000b7c <HAL_ADC_MspInit+0x80>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	f003 0301 	and.w	r3, r3, #1
 8000b52:	60fb      	str	r3, [r7, #12]
 8000b54:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b56:	2301      	movs	r3, #1
 8000b58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b5a:	2303      	movs	r3, #3
 8000b5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b62:	f107 0314 	add.w	r3, r7, #20
 8000b66:	4619      	mov	r1, r3
 8000b68:	4805      	ldr	r0, [pc, #20]	; (8000b80 <HAL_ADC_MspInit+0x84>)
 8000b6a:	f001 f9d1 	bl	8001f10 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b6e:	bf00      	nop
 8000b70:	3728      	adds	r7, #40	; 0x28
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	40012000 	.word	0x40012000
 8000b7c:	40023800 	.word	0x40023800
 8000b80:	40020000 	.word	0x40020000

08000b84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b08c      	sub	sp, #48	; 0x30
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b8c:	f107 031c 	add.w	r3, r7, #28
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	605a      	str	r2, [r3, #4]
 8000b96:	609a      	str	r2, [r3, #8]
 8000b98:	60da      	str	r2, [r3, #12]
 8000b9a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a68      	ldr	r2, [pc, #416]	; (8000d44 <HAL_UART_MspInit+0x1c0>)
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	d163      	bne.n	8000c6e <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	61bb      	str	r3, [r7, #24]
 8000baa:	4b67      	ldr	r3, [pc, #412]	; (8000d48 <HAL_UART_MspInit+0x1c4>)
 8000bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bae:	4a66      	ldr	r2, [pc, #408]	; (8000d48 <HAL_UART_MspInit+0x1c4>)
 8000bb0:	f043 0310 	orr.w	r3, r3, #16
 8000bb4:	6453      	str	r3, [r2, #68]	; 0x44
 8000bb6:	4b64      	ldr	r3, [pc, #400]	; (8000d48 <HAL_UART_MspInit+0x1c4>)
 8000bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bba:	f003 0310 	and.w	r3, r3, #16
 8000bbe:	61bb      	str	r3, [r7, #24]
 8000bc0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	617b      	str	r3, [r7, #20]
 8000bc6:	4b60      	ldr	r3, [pc, #384]	; (8000d48 <HAL_UART_MspInit+0x1c4>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	4a5f      	ldr	r2, [pc, #380]	; (8000d48 <HAL_UART_MspInit+0x1c4>)
 8000bcc:	f043 0301 	orr.w	r3, r3, #1
 8000bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd2:	4b5d      	ldr	r3, [pc, #372]	; (8000d48 <HAL_UART_MspInit+0x1c4>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	f003 0301 	and.w	r3, r3, #1
 8000bda:	617b      	str	r3, [r7, #20]
 8000bdc:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000bde:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000be2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be4:	2302      	movs	r3, #2
 8000be6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bec:	2303      	movs	r3, #3
 8000bee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000bf0:	2307      	movs	r3, #7
 8000bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf4:	f107 031c 	add.w	r3, r7, #28
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	4854      	ldr	r0, [pc, #336]	; (8000d4c <HAL_UART_MspInit+0x1c8>)
 8000bfc:	f001 f988 	bl	8001f10 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8000c00:	4b53      	ldr	r3, [pc, #332]	; (8000d50 <HAL_UART_MspInit+0x1cc>)
 8000c02:	4a54      	ldr	r2, [pc, #336]	; (8000d54 <HAL_UART_MspInit+0x1d0>)
 8000c04:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8000c06:	4b52      	ldr	r3, [pc, #328]	; (8000d50 <HAL_UART_MspInit+0x1cc>)
 8000c08:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c0c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c0e:	4b50      	ldr	r3, [pc, #320]	; (8000d50 <HAL_UART_MspInit+0x1cc>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c14:	4b4e      	ldr	r3, [pc, #312]	; (8000d50 <HAL_UART_MspInit+0x1cc>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c1a:	4b4d      	ldr	r3, [pc, #308]	; (8000d50 <HAL_UART_MspInit+0x1cc>)
 8000c1c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c20:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c22:	4b4b      	ldr	r3, [pc, #300]	; (8000d50 <HAL_UART_MspInit+0x1cc>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c28:	4b49      	ldr	r3, [pc, #292]	; (8000d50 <HAL_UART_MspInit+0x1cc>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000c2e:	4b48      	ldr	r3, [pc, #288]	; (8000d50 <HAL_UART_MspInit+0x1cc>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000c34:	4b46      	ldr	r3, [pc, #280]	; (8000d50 <HAL_UART_MspInit+0x1cc>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c3a:	4b45      	ldr	r3, [pc, #276]	; (8000d50 <HAL_UART_MspInit+0x1cc>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000c40:	4843      	ldr	r0, [pc, #268]	; (8000d50 <HAL_UART_MspInit+0x1cc>)
 8000c42:	f000 fd63 	bl	800170c <HAL_DMA_Init>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8000c4c:	f7ff ff28 	bl	8000aa0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	4a3f      	ldr	r2, [pc, #252]	; (8000d50 <HAL_UART_MspInit+0x1cc>)
 8000c54:	639a      	str	r2, [r3, #56]	; 0x38
 8000c56:	4a3e      	ldr	r2, [pc, #248]	; (8000d50 <HAL_UART_MspInit+0x1cc>)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	2100      	movs	r1, #0
 8000c60:	2025      	movs	r0, #37	; 0x25
 8000c62:	f000 fd1c 	bl	800169e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c66:	2025      	movs	r0, #37	; 0x25
 8000c68:	f000 fd35 	bl	80016d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c6c:	e066      	b.n	8000d3c <HAL_UART_MspInit+0x1b8>
  else if(huart->Instance==USART2)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4a39      	ldr	r2, [pc, #228]	; (8000d58 <HAL_UART_MspInit+0x1d4>)
 8000c74:	4293      	cmp	r3, r2
 8000c76:	d161      	bne.n	8000d3c <HAL_UART_MspInit+0x1b8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c78:	2300      	movs	r3, #0
 8000c7a:	613b      	str	r3, [r7, #16]
 8000c7c:	4b32      	ldr	r3, [pc, #200]	; (8000d48 <HAL_UART_MspInit+0x1c4>)
 8000c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c80:	4a31      	ldr	r2, [pc, #196]	; (8000d48 <HAL_UART_MspInit+0x1c4>)
 8000c82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c86:	6413      	str	r3, [r2, #64]	; 0x40
 8000c88:	4b2f      	ldr	r3, [pc, #188]	; (8000d48 <HAL_UART_MspInit+0x1c4>)
 8000c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c90:	613b      	str	r3, [r7, #16]
 8000c92:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c94:	2300      	movs	r3, #0
 8000c96:	60fb      	str	r3, [r7, #12]
 8000c98:	4b2b      	ldr	r3, [pc, #172]	; (8000d48 <HAL_UART_MspInit+0x1c4>)
 8000c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9c:	4a2a      	ldr	r2, [pc, #168]	; (8000d48 <HAL_UART_MspInit+0x1c4>)
 8000c9e:	f043 0301 	orr.w	r3, r3, #1
 8000ca2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca4:	4b28      	ldr	r3, [pc, #160]	; (8000d48 <HAL_UART_MspInit+0x1c4>)
 8000ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca8:	f003 0301 	and.w	r3, r3, #1
 8000cac:	60fb      	str	r3, [r7, #12]
 8000cae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000cb0:	230c      	movs	r3, #12
 8000cb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cbc:	2303      	movs	r3, #3
 8000cbe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cc0:	2307      	movs	r3, #7
 8000cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc4:	f107 031c 	add.w	r3, r7, #28
 8000cc8:	4619      	mov	r1, r3
 8000cca:	4820      	ldr	r0, [pc, #128]	; (8000d4c <HAL_UART_MspInit+0x1c8>)
 8000ccc:	f001 f920 	bl	8001f10 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000cd0:	4b22      	ldr	r3, [pc, #136]	; (8000d5c <HAL_UART_MspInit+0x1d8>)
 8000cd2:	4a23      	ldr	r2, [pc, #140]	; (8000d60 <HAL_UART_MspInit+0x1dc>)
 8000cd4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000cd6:	4b21      	ldr	r3, [pc, #132]	; (8000d5c <HAL_UART_MspInit+0x1d8>)
 8000cd8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000cdc:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cde:	4b1f      	ldr	r3, [pc, #124]	; (8000d5c <HAL_UART_MspInit+0x1d8>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ce4:	4b1d      	ldr	r3, [pc, #116]	; (8000d5c <HAL_UART_MspInit+0x1d8>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000cea:	4b1c      	ldr	r3, [pc, #112]	; (8000d5c <HAL_UART_MspInit+0x1d8>)
 8000cec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cf0:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000cf2:	4b1a      	ldr	r3, [pc, #104]	; (8000d5c <HAL_UART_MspInit+0x1d8>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000cf8:	4b18      	ldr	r3, [pc, #96]	; (8000d5c <HAL_UART_MspInit+0x1d8>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000cfe:	4b17      	ldr	r3, [pc, #92]	; (8000d5c <HAL_UART_MspInit+0x1d8>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d04:	4b15      	ldr	r3, [pc, #84]	; (8000d5c <HAL_UART_MspInit+0x1d8>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d0a:	4b14      	ldr	r3, [pc, #80]	; (8000d5c <HAL_UART_MspInit+0x1d8>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000d10:	4812      	ldr	r0, [pc, #72]	; (8000d5c <HAL_UART_MspInit+0x1d8>)
 8000d12:	f000 fcfb 	bl	800170c <HAL_DMA_Init>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <HAL_UART_MspInit+0x19c>
      Error_Handler();
 8000d1c:	f7ff fec0 	bl	8000aa0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	4a0e      	ldr	r2, [pc, #56]	; (8000d5c <HAL_UART_MspInit+0x1d8>)
 8000d24:	639a      	str	r2, [r3, #56]	; 0x38
 8000d26:	4a0d      	ldr	r2, [pc, #52]	; (8000d5c <HAL_UART_MspInit+0x1d8>)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	2100      	movs	r1, #0
 8000d30:	2026      	movs	r0, #38	; 0x26
 8000d32:	f000 fcb4 	bl	800169e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d36:	2026      	movs	r0, #38	; 0x26
 8000d38:	f000 fccd 	bl	80016d6 <HAL_NVIC_EnableIRQ>
}
 8000d3c:	bf00      	nop
 8000d3e:	3730      	adds	r7, #48	; 0x30
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	40011000 	.word	0x40011000
 8000d48:	40023800 	.word	0x40023800
 8000d4c:	40020000 	.word	0x40020000
 8000d50:	200001bc 	.word	0x200001bc
 8000d54:	40026440 	.word	0x40026440
 8000d58:	40004400 	.word	0x40004400
 8000d5c:	2000021c 	.word	0x2000021c
 8000d60:	40026088 	.word	0x40026088

08000d64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d68:	e7fe      	b.n	8000d68 <NMI_Handler+0x4>

08000d6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d6a:	b480      	push	{r7}
 8000d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d6e:	e7fe      	b.n	8000d6e <HardFault_Handler+0x4>

08000d70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d74:	e7fe      	b.n	8000d74 <MemManage_Handler+0x4>

08000d76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d76:	b480      	push	{r7}
 8000d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d7a:	e7fe      	b.n	8000d7a <BusFault_Handler+0x4>

08000d7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d80:	e7fe      	b.n	8000d80 <UsageFault_Handler+0x4>

08000d82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d82:	b480      	push	{r7}
 8000d84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d86:	bf00      	nop
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr

08000d90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d94:	bf00      	nop
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr

08000d9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d9e:	b480      	push	{r7}
 8000da0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000da2:	bf00      	nop
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr

08000dac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000db0:	f000 f8f4 	bl	8000f9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000db4:	bf00      	nop
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000dbc:	4802      	ldr	r0, [pc, #8]	; (8000dc8 <DMA1_Stream5_IRQHandler+0x10>)
 8000dbe:	f000 fe3d 	bl	8001a3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	2000021c 	.word	0x2000021c

08000dcc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000dd2:	4811      	ldr	r0, [pc, #68]	; (8000e18 <USART1_IRQHandler+0x4c>)
 8000dd4:	f001 ffe0 	bl	8002d98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  if (__HAL_UART_GET_IT_SOURCE(&huart1, UART_IT_IDLE) && __HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE))
 8000dd8:	4b0f      	ldr	r3, [pc, #60]	; (8000e18 <USART1_IRQHandler+0x4c>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	68db      	ldr	r3, [r3, #12]
 8000dde:	f003 0310 	and.w	r3, r3, #16
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d014      	beq.n	8000e10 <USART1_IRQHandler+0x44>
 8000de6:	4b0c      	ldr	r3, [pc, #48]	; (8000e18 <USART1_IRQHandler+0x4c>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f003 0310 	and.w	r3, r3, #16
 8000df0:	2b10      	cmp	r3, #16
 8000df2:	d10d      	bne.n	8000e10 <USART1_IRQHandler+0x44>
    {
  	  HAL_UART_RxCpltCallback (&huart1);
 8000df4:	4808      	ldr	r0, [pc, #32]	; (8000e18 <USART1_IRQHandler+0x4c>)
 8000df6:	f7ff fbc3 	bl	8000580 <HAL_UART_RxCpltCallback>
  	  __HAL_UART_CLEAR_IDLEFLAG (&huart1);
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	607b      	str	r3, [r7, #4]
 8000dfe:	4b06      	ldr	r3, [pc, #24]	; (8000e18 <USART1_IRQHandler+0x4c>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	607b      	str	r3, [r7, #4]
 8000e06:	4b04      	ldr	r3, [pc, #16]	; (8000e18 <USART1_IRQHandler+0x4c>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	607b      	str	r3, [r7, #4]
 8000e0e:	687b      	ldr	r3, [r7, #4]
    }

  /* USER CODE END USART1_IRQn 1 */
}
 8000e10:	bf00      	nop
 8000e12:	3708      	adds	r7, #8
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	20000134 	.word	0x20000134

08000e1c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e22:	4811      	ldr	r0, [pc, #68]	; (8000e68 <USART2_IRQHandler+0x4c>)
 8000e24:	f001 ffb8 	bl	8002d98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  if (__HAL_UART_GET_IT_SOURCE(&huart2, UART_IT_IDLE) && __HAL_UART_GET_FLAG(&huart2, UART_FLAG_IDLE))
 8000e28:	4b0f      	ldr	r3, [pc, #60]	; (8000e68 <USART2_IRQHandler+0x4c>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	68db      	ldr	r3, [r3, #12]
 8000e2e:	f003 0310 	and.w	r3, r3, #16
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d014      	beq.n	8000e60 <USART2_IRQHandler+0x44>
 8000e36:	4b0c      	ldr	r3, [pc, #48]	; (8000e68 <USART2_IRQHandler+0x4c>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f003 0310 	and.w	r3, r3, #16
 8000e40:	2b10      	cmp	r3, #16
 8000e42:	d10d      	bne.n	8000e60 <USART2_IRQHandler+0x44>
      {
    	  HAL_UART_RxCpltCallback (&huart2);
 8000e44:	4808      	ldr	r0, [pc, #32]	; (8000e68 <USART2_IRQHandler+0x4c>)
 8000e46:	f7ff fb9b 	bl	8000580 <HAL_UART_RxCpltCallback>
    	  __HAL_UART_CLEAR_IDLEFLAG (&huart2);
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	607b      	str	r3, [r7, #4]
 8000e4e:	4b06      	ldr	r3, [pc, #24]	; (8000e68 <USART2_IRQHandler+0x4c>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	607b      	str	r3, [r7, #4]
 8000e56:	4b04      	ldr	r3, [pc, #16]	; (8000e68 <USART2_IRQHandler+0x4c>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	607b      	str	r3, [r7, #4]
 8000e5e:	687b      	ldr	r3, [r7, #4]
      }

  /* USER CODE END USART2_IRQn 1 */
}
 8000e60:	bf00      	nop
 8000e62:	3708      	adds	r7, #8
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	20000178 	.word	0x20000178

08000e6c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000e70:	4802      	ldr	r0, [pc, #8]	; (8000e7c <DMA2_Stream2_IRQHandler+0x10>)
 8000e72:	f000 fde3 	bl	8001a3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000e76:	bf00      	nop
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	200001bc 	.word	0x200001bc

08000e80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e84:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <SystemInit+0x20>)
 8000e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e8a:	4a05      	ldr	r2, [pc, #20]	; (8000ea0 <SystemInit+0x20>)
 8000e8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e94:	bf00      	nop
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	e000ed00 	.word	0xe000ed00

08000ea4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ea4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000edc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ea8:	480d      	ldr	r0, [pc, #52]	; (8000ee0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000eaa:	490e      	ldr	r1, [pc, #56]	; (8000ee4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000eac:	4a0e      	ldr	r2, [pc, #56]	; (8000ee8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000eae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000eb0:	e002      	b.n	8000eb8 <LoopCopyDataInit>

08000eb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000eb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eb6:	3304      	adds	r3, #4

08000eb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000eb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ebc:	d3f9      	bcc.n	8000eb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ebe:	4a0b      	ldr	r2, [pc, #44]	; (8000eec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ec0:	4c0b      	ldr	r4, [pc, #44]	; (8000ef0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ec2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ec4:	e001      	b.n	8000eca <LoopFillZerobss>

08000ec6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ec6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ec8:	3204      	adds	r2, #4

08000eca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ecc:	d3fb      	bcc.n	8000ec6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ece:	f7ff ffd7 	bl	8000e80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ed2:	f003 f853 	bl	8003f7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ed6:	f7ff fc55 	bl	8000784 <main>
  bx  lr    
 8000eda:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000edc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ee0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ee4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ee8:	08004038 	.word	0x08004038
  ldr r2, =_sbss
 8000eec:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ef0:	20000378 	.word	0x20000378

08000ef4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ef4:	e7fe      	b.n	8000ef4 <ADC_IRQHandler>
	...

08000ef8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000efc:	4b0e      	ldr	r3, [pc, #56]	; (8000f38 <HAL_Init+0x40>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a0d      	ldr	r2, [pc, #52]	; (8000f38 <HAL_Init+0x40>)
 8000f02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f08:	4b0b      	ldr	r3, [pc, #44]	; (8000f38 <HAL_Init+0x40>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a0a      	ldr	r2, [pc, #40]	; (8000f38 <HAL_Init+0x40>)
 8000f0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f14:	4b08      	ldr	r3, [pc, #32]	; (8000f38 <HAL_Init+0x40>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a07      	ldr	r2, [pc, #28]	; (8000f38 <HAL_Init+0x40>)
 8000f1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f20:	2003      	movs	r0, #3
 8000f22:	f000 fbb1 	bl	8001688 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f26:	200f      	movs	r0, #15
 8000f28:	f000 f808 	bl	8000f3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f2c:	f7ff fdbe 	bl	8000aac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f30:	2300      	movs	r3, #0
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	40023c00 	.word	0x40023c00

08000f3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f44:	4b12      	ldr	r3, [pc, #72]	; (8000f90 <HAL_InitTick+0x54>)
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	4b12      	ldr	r3, [pc, #72]	; (8000f94 <HAL_InitTick+0x58>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f52:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f000 fbc9 	bl	80016f2 <HAL_SYSTICK_Config>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f66:	2301      	movs	r3, #1
 8000f68:	e00e      	b.n	8000f88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2b0f      	cmp	r3, #15
 8000f6e:	d80a      	bhi.n	8000f86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f70:	2200      	movs	r2, #0
 8000f72:	6879      	ldr	r1, [r7, #4]
 8000f74:	f04f 30ff 	mov.w	r0, #4294967295
 8000f78:	f000 fb91 	bl	800169e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f7c:	4a06      	ldr	r2, [pc, #24]	; (8000f98 <HAL_InitTick+0x5c>)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f82:	2300      	movs	r3, #0
 8000f84:	e000      	b.n	8000f88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f86:	2301      	movs	r3, #1
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3708      	adds	r7, #8
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	20000000 	.word	0x20000000
 8000f94:	20000008 	.word	0x20000008
 8000f98:	20000004 	.word	0x20000004

08000f9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fa0:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <HAL_IncTick+0x20>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <HAL_IncTick+0x24>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4413      	add	r3, r2
 8000fac:	4a04      	ldr	r2, [pc, #16]	; (8000fc0 <HAL_IncTick+0x24>)
 8000fae:	6013      	str	r3, [r2, #0]
}
 8000fb0:	bf00      	nop
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	20000008 	.word	0x20000008
 8000fc0:	20000374 	.word	0x20000374

08000fc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fc8:	4b03      	ldr	r3, [pc, #12]	; (8000fd8 <HAL_GetTick+0x14>)
 8000fca:	681b      	ldr	r3, [r3, #0]
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	20000374 	.word	0x20000374

08000fdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fe4:	f7ff ffee 	bl	8000fc4 <HAL_GetTick>
 8000fe8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ff4:	d005      	beq.n	8001002 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ff6:	4b0a      	ldr	r3, [pc, #40]	; (8001020 <HAL_Delay+0x44>)
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	4413      	add	r3, r2
 8001000:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001002:	bf00      	nop
 8001004:	f7ff ffde 	bl	8000fc4 <HAL_GetTick>
 8001008:	4602      	mov	r2, r0
 800100a:	68bb      	ldr	r3, [r7, #8]
 800100c:	1ad3      	subs	r3, r2, r3
 800100e:	68fa      	ldr	r2, [r7, #12]
 8001010:	429a      	cmp	r2, r3
 8001012:	d8f7      	bhi.n	8001004 <HAL_Delay+0x28>
  {
  }
}
 8001014:	bf00      	nop
 8001016:	bf00      	nop
 8001018:	3710      	adds	r7, #16
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	20000008 	.word	0x20000008

08001024 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800102c:	2300      	movs	r3, #0
 800102e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d101      	bne.n	800103a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001036:	2301      	movs	r3, #1
 8001038:	e033      	b.n	80010a2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103e:	2b00      	cmp	r3, #0
 8001040:	d109      	bne.n	8001056 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	f7ff fd5a 	bl	8000afc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2200      	movs	r2, #0
 800104c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2200      	movs	r2, #0
 8001052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105a:	f003 0310 	and.w	r3, r3, #16
 800105e:	2b00      	cmp	r3, #0
 8001060:	d118      	bne.n	8001094 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001066:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800106a:	f023 0302 	bic.w	r3, r3, #2
 800106e:	f043 0202 	orr.w	r2, r3, #2
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f000 f93a 	bl	80012f0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2200      	movs	r2, #0
 8001080:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001086:	f023 0303 	bic.w	r3, r3, #3
 800108a:	f043 0201 	orr.w	r2, r3, #1
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	641a      	str	r2, [r3, #64]	; 0x40
 8001092:	e001      	b.n	8001098 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001094:	2301      	movs	r3, #1
 8001096:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2200      	movs	r2, #0
 800109c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80010a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3710      	adds	r7, #16
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
	...

080010ac <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b085      	sub	sp, #20
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80010b6:	2300      	movs	r3, #0
 80010b8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d101      	bne.n	80010c8 <HAL_ADC_ConfigChannel+0x1c>
 80010c4:	2302      	movs	r3, #2
 80010c6:	e105      	b.n	80012d4 <HAL_ADC_ConfigChannel+0x228>
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2201      	movs	r2, #1
 80010cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	2b09      	cmp	r3, #9
 80010d6:	d925      	bls.n	8001124 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	68d9      	ldr	r1, [r3, #12]
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	b29b      	uxth	r3, r3
 80010e4:	461a      	mov	r2, r3
 80010e6:	4613      	mov	r3, r2
 80010e8:	005b      	lsls	r3, r3, #1
 80010ea:	4413      	add	r3, r2
 80010ec:	3b1e      	subs	r3, #30
 80010ee:	2207      	movs	r2, #7
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	43da      	mvns	r2, r3
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	400a      	ands	r2, r1
 80010fc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	68d9      	ldr	r1, [r3, #12]
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	689a      	ldr	r2, [r3, #8]
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	b29b      	uxth	r3, r3
 800110e:	4618      	mov	r0, r3
 8001110:	4603      	mov	r3, r0
 8001112:	005b      	lsls	r3, r3, #1
 8001114:	4403      	add	r3, r0
 8001116:	3b1e      	subs	r3, #30
 8001118:	409a      	lsls	r2, r3
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	430a      	orrs	r2, r1
 8001120:	60da      	str	r2, [r3, #12]
 8001122:	e022      	b.n	800116a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	6919      	ldr	r1, [r3, #16]
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	b29b      	uxth	r3, r3
 8001130:	461a      	mov	r2, r3
 8001132:	4613      	mov	r3, r2
 8001134:	005b      	lsls	r3, r3, #1
 8001136:	4413      	add	r3, r2
 8001138:	2207      	movs	r2, #7
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	43da      	mvns	r2, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	400a      	ands	r2, r1
 8001146:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	6919      	ldr	r1, [r3, #16]
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	689a      	ldr	r2, [r3, #8]
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	b29b      	uxth	r3, r3
 8001158:	4618      	mov	r0, r3
 800115a:	4603      	mov	r3, r0
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	4403      	add	r3, r0
 8001160:	409a      	lsls	r2, r3
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	430a      	orrs	r2, r1
 8001168:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	2b06      	cmp	r3, #6
 8001170:	d824      	bhi.n	80011bc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685a      	ldr	r2, [r3, #4]
 800117c:	4613      	mov	r3, r2
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	4413      	add	r3, r2
 8001182:	3b05      	subs	r3, #5
 8001184:	221f      	movs	r2, #31
 8001186:	fa02 f303 	lsl.w	r3, r2, r3
 800118a:	43da      	mvns	r2, r3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	400a      	ands	r2, r1
 8001192:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	b29b      	uxth	r3, r3
 80011a0:	4618      	mov	r0, r3
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685a      	ldr	r2, [r3, #4]
 80011a6:	4613      	mov	r3, r2
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	4413      	add	r3, r2
 80011ac:	3b05      	subs	r3, #5
 80011ae:	fa00 f203 	lsl.w	r2, r0, r3
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	430a      	orrs	r2, r1
 80011b8:	635a      	str	r2, [r3, #52]	; 0x34
 80011ba:	e04c      	b.n	8001256 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	2b0c      	cmp	r3, #12
 80011c2:	d824      	bhi.n	800120e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	685a      	ldr	r2, [r3, #4]
 80011ce:	4613      	mov	r3, r2
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	4413      	add	r3, r2
 80011d4:	3b23      	subs	r3, #35	; 0x23
 80011d6:	221f      	movs	r2, #31
 80011d8:	fa02 f303 	lsl.w	r3, r2, r3
 80011dc:	43da      	mvns	r2, r3
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	400a      	ands	r2, r1
 80011e4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	b29b      	uxth	r3, r3
 80011f2:	4618      	mov	r0, r3
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685a      	ldr	r2, [r3, #4]
 80011f8:	4613      	mov	r3, r2
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	4413      	add	r3, r2
 80011fe:	3b23      	subs	r3, #35	; 0x23
 8001200:	fa00 f203 	lsl.w	r2, r0, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	430a      	orrs	r2, r1
 800120a:	631a      	str	r2, [r3, #48]	; 0x30
 800120c:	e023      	b.n	8001256 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685a      	ldr	r2, [r3, #4]
 8001218:	4613      	mov	r3, r2
 800121a:	009b      	lsls	r3, r3, #2
 800121c:	4413      	add	r3, r2
 800121e:	3b41      	subs	r3, #65	; 0x41
 8001220:	221f      	movs	r2, #31
 8001222:	fa02 f303 	lsl.w	r3, r2, r3
 8001226:	43da      	mvns	r2, r3
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	400a      	ands	r2, r1
 800122e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	b29b      	uxth	r3, r3
 800123c:	4618      	mov	r0, r3
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	685a      	ldr	r2, [r3, #4]
 8001242:	4613      	mov	r3, r2
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	4413      	add	r3, r2
 8001248:	3b41      	subs	r3, #65	; 0x41
 800124a:	fa00 f203 	lsl.w	r2, r0, r3
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	430a      	orrs	r2, r1
 8001254:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001256:	4b22      	ldr	r3, [pc, #136]	; (80012e0 <HAL_ADC_ConfigChannel+0x234>)
 8001258:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a21      	ldr	r2, [pc, #132]	; (80012e4 <HAL_ADC_ConfigChannel+0x238>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d109      	bne.n	8001278 <HAL_ADC_ConfigChannel+0x1cc>
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	2b12      	cmp	r3, #18
 800126a:	d105      	bne.n	8001278 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a19      	ldr	r2, [pc, #100]	; (80012e4 <HAL_ADC_ConfigChannel+0x238>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d123      	bne.n	80012ca <HAL_ADC_ConfigChannel+0x21e>
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	2b10      	cmp	r3, #16
 8001288:	d003      	beq.n	8001292 <HAL_ADC_ConfigChannel+0x1e6>
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	2b11      	cmp	r3, #17
 8001290:	d11b      	bne.n	80012ca <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	2b10      	cmp	r3, #16
 80012a4:	d111      	bne.n	80012ca <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80012a6:	4b10      	ldr	r3, [pc, #64]	; (80012e8 <HAL_ADC_ConfigChannel+0x23c>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a10      	ldr	r2, [pc, #64]	; (80012ec <HAL_ADC_ConfigChannel+0x240>)
 80012ac:	fba2 2303 	umull	r2, r3, r2, r3
 80012b0:	0c9a      	lsrs	r2, r3, #18
 80012b2:	4613      	mov	r3, r2
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	4413      	add	r3, r2
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80012bc:	e002      	b.n	80012c4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80012be:	68bb      	ldr	r3, [r7, #8]
 80012c0:	3b01      	subs	r3, #1
 80012c2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d1f9      	bne.n	80012be <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2200      	movs	r2, #0
 80012ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80012d2:	2300      	movs	r3, #0
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3714      	adds	r7, #20
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr
 80012e0:	40012300 	.word	0x40012300
 80012e4:	40012000 	.word	0x40012000
 80012e8:	20000000 	.word	0x20000000
 80012ec:	431bde83 	.word	0x431bde83

080012f0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b085      	sub	sp, #20
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80012f8:	4b79      	ldr	r3, [pc, #484]	; (80014e0 <ADC_Init+0x1f0>)
 80012fa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	685a      	ldr	r2, [r3, #4]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	431a      	orrs	r2, r3
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	685a      	ldr	r2, [r3, #4]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001324:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	6859      	ldr	r1, [r3, #4]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	691b      	ldr	r3, [r3, #16]
 8001330:	021a      	lsls	r2, r3, #8
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	430a      	orrs	r2, r1
 8001338:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	685a      	ldr	r2, [r3, #4]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001348:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	6859      	ldr	r1, [r3, #4]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	689a      	ldr	r2, [r3, #8]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	430a      	orrs	r2, r1
 800135a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	689a      	ldr	r2, [r3, #8]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800136a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	6899      	ldr	r1, [r3, #8]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	68da      	ldr	r2, [r3, #12]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	430a      	orrs	r2, r1
 800137c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001382:	4a58      	ldr	r2, [pc, #352]	; (80014e4 <ADC_Init+0x1f4>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d022      	beq.n	80013ce <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	689a      	ldr	r2, [r3, #8]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001396:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	6899      	ldr	r1, [r3, #8]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	430a      	orrs	r2, r1
 80013a8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	689a      	ldr	r2, [r3, #8]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80013b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	6899      	ldr	r1, [r3, #8]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	430a      	orrs	r2, r1
 80013ca:	609a      	str	r2, [r3, #8]
 80013cc:	e00f      	b.n	80013ee <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	689a      	ldr	r2, [r3, #8]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80013dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	689a      	ldr	r2, [r3, #8]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80013ec:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	689a      	ldr	r2, [r3, #8]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f022 0202 	bic.w	r2, r2, #2
 80013fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	6899      	ldr	r1, [r3, #8]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	7e1b      	ldrb	r3, [r3, #24]
 8001408:	005a      	lsls	r2, r3, #1
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	430a      	orrs	r2, r1
 8001410:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d01b      	beq.n	8001454 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	685a      	ldr	r2, [r3, #4]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800142a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	685a      	ldr	r2, [r3, #4]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800143a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	6859      	ldr	r1, [r3, #4]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001446:	3b01      	subs	r3, #1
 8001448:	035a      	lsls	r2, r3, #13
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	430a      	orrs	r2, r1
 8001450:	605a      	str	r2, [r3, #4]
 8001452:	e007      	b.n	8001464 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	685a      	ldr	r2, [r3, #4]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001462:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001472:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	69db      	ldr	r3, [r3, #28]
 800147e:	3b01      	subs	r3, #1
 8001480:	051a      	lsls	r2, r3, #20
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	430a      	orrs	r2, r1
 8001488:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	689a      	ldr	r2, [r3, #8]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001498:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	6899      	ldr	r1, [r3, #8]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80014a6:	025a      	lsls	r2, r3, #9
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	430a      	orrs	r2, r1
 80014ae:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	689a      	ldr	r2, [r3, #8]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80014be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	6899      	ldr	r1, [r3, #8]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	695b      	ldr	r3, [r3, #20]
 80014ca:	029a      	lsls	r2, r3, #10
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	430a      	orrs	r2, r1
 80014d2:	609a      	str	r2, [r3, #8]
}
 80014d4:	bf00      	nop
 80014d6:	3714      	adds	r7, #20
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr
 80014e0:	40012300 	.word	0x40012300
 80014e4:	0f000001 	.word	0x0f000001

080014e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b085      	sub	sp, #20
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	f003 0307 	and.w	r3, r3, #7
 80014f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014f8:	4b0c      	ldr	r3, [pc, #48]	; (800152c <__NVIC_SetPriorityGrouping+0x44>)
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014fe:	68ba      	ldr	r2, [r7, #8]
 8001500:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001504:	4013      	ands	r3, r2
 8001506:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001510:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001514:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001518:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800151a:	4a04      	ldr	r2, [pc, #16]	; (800152c <__NVIC_SetPriorityGrouping+0x44>)
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	60d3      	str	r3, [r2, #12]
}
 8001520:	bf00      	nop
 8001522:	3714      	adds	r7, #20
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr
 800152c:	e000ed00 	.word	0xe000ed00

08001530 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001534:	4b04      	ldr	r3, [pc, #16]	; (8001548 <__NVIC_GetPriorityGrouping+0x18>)
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	0a1b      	lsrs	r3, r3, #8
 800153a:	f003 0307 	and.w	r3, r3, #7
}
 800153e:	4618      	mov	r0, r3
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr
 8001548:	e000ed00 	.word	0xe000ed00

0800154c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	4603      	mov	r3, r0
 8001554:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155a:	2b00      	cmp	r3, #0
 800155c:	db0b      	blt.n	8001576 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800155e:	79fb      	ldrb	r3, [r7, #7]
 8001560:	f003 021f 	and.w	r2, r3, #31
 8001564:	4907      	ldr	r1, [pc, #28]	; (8001584 <__NVIC_EnableIRQ+0x38>)
 8001566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156a:	095b      	lsrs	r3, r3, #5
 800156c:	2001      	movs	r0, #1
 800156e:	fa00 f202 	lsl.w	r2, r0, r2
 8001572:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001576:	bf00      	nop
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	e000e100 	.word	0xe000e100

08001588 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	4603      	mov	r3, r0
 8001590:	6039      	str	r1, [r7, #0]
 8001592:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001594:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001598:	2b00      	cmp	r3, #0
 800159a:	db0a      	blt.n	80015b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	b2da      	uxtb	r2, r3
 80015a0:	490c      	ldr	r1, [pc, #48]	; (80015d4 <__NVIC_SetPriority+0x4c>)
 80015a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a6:	0112      	lsls	r2, r2, #4
 80015a8:	b2d2      	uxtb	r2, r2
 80015aa:	440b      	add	r3, r1
 80015ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015b0:	e00a      	b.n	80015c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	b2da      	uxtb	r2, r3
 80015b6:	4908      	ldr	r1, [pc, #32]	; (80015d8 <__NVIC_SetPriority+0x50>)
 80015b8:	79fb      	ldrb	r3, [r7, #7]
 80015ba:	f003 030f 	and.w	r3, r3, #15
 80015be:	3b04      	subs	r3, #4
 80015c0:	0112      	lsls	r2, r2, #4
 80015c2:	b2d2      	uxtb	r2, r2
 80015c4:	440b      	add	r3, r1
 80015c6:	761a      	strb	r2, [r3, #24]
}
 80015c8:	bf00      	nop
 80015ca:	370c      	adds	r7, #12
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr
 80015d4:	e000e100 	.word	0xe000e100
 80015d8:	e000ed00 	.word	0xe000ed00

080015dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015dc:	b480      	push	{r7}
 80015de:	b089      	sub	sp, #36	; 0x24
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	60f8      	str	r0, [r7, #12]
 80015e4:	60b9      	str	r1, [r7, #8]
 80015e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	f003 0307 	and.w	r3, r3, #7
 80015ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	f1c3 0307 	rsb	r3, r3, #7
 80015f6:	2b04      	cmp	r3, #4
 80015f8:	bf28      	it	cs
 80015fa:	2304      	movcs	r3, #4
 80015fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	3304      	adds	r3, #4
 8001602:	2b06      	cmp	r3, #6
 8001604:	d902      	bls.n	800160c <NVIC_EncodePriority+0x30>
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	3b03      	subs	r3, #3
 800160a:	e000      	b.n	800160e <NVIC_EncodePriority+0x32>
 800160c:	2300      	movs	r3, #0
 800160e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001610:	f04f 32ff 	mov.w	r2, #4294967295
 8001614:	69bb      	ldr	r3, [r7, #24]
 8001616:	fa02 f303 	lsl.w	r3, r2, r3
 800161a:	43da      	mvns	r2, r3
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	401a      	ands	r2, r3
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001624:	f04f 31ff 	mov.w	r1, #4294967295
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	fa01 f303 	lsl.w	r3, r1, r3
 800162e:	43d9      	mvns	r1, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001634:	4313      	orrs	r3, r2
         );
}
 8001636:	4618      	mov	r0, r3
 8001638:	3724      	adds	r7, #36	; 0x24
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
	...

08001644 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	3b01      	subs	r3, #1
 8001650:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001654:	d301      	bcc.n	800165a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001656:	2301      	movs	r3, #1
 8001658:	e00f      	b.n	800167a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800165a:	4a0a      	ldr	r2, [pc, #40]	; (8001684 <SysTick_Config+0x40>)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	3b01      	subs	r3, #1
 8001660:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001662:	210f      	movs	r1, #15
 8001664:	f04f 30ff 	mov.w	r0, #4294967295
 8001668:	f7ff ff8e 	bl	8001588 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800166c:	4b05      	ldr	r3, [pc, #20]	; (8001684 <SysTick_Config+0x40>)
 800166e:	2200      	movs	r2, #0
 8001670:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001672:	4b04      	ldr	r3, [pc, #16]	; (8001684 <SysTick_Config+0x40>)
 8001674:	2207      	movs	r2, #7
 8001676:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001678:	2300      	movs	r3, #0
}
 800167a:	4618      	mov	r0, r3
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	e000e010 	.word	0xe000e010

08001688 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f7ff ff29 	bl	80014e8 <__NVIC_SetPriorityGrouping>
}
 8001696:	bf00      	nop
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}

0800169e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800169e:	b580      	push	{r7, lr}
 80016a0:	b086      	sub	sp, #24
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	4603      	mov	r3, r0
 80016a6:	60b9      	str	r1, [r7, #8]
 80016a8:	607a      	str	r2, [r7, #4]
 80016aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016ac:	2300      	movs	r3, #0
 80016ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016b0:	f7ff ff3e 	bl	8001530 <__NVIC_GetPriorityGrouping>
 80016b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016b6:	687a      	ldr	r2, [r7, #4]
 80016b8:	68b9      	ldr	r1, [r7, #8]
 80016ba:	6978      	ldr	r0, [r7, #20]
 80016bc:	f7ff ff8e 	bl	80015dc <NVIC_EncodePriority>
 80016c0:	4602      	mov	r2, r0
 80016c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016c6:	4611      	mov	r1, r2
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7ff ff5d 	bl	8001588 <__NVIC_SetPriority>
}
 80016ce:	bf00      	nop
 80016d0:	3718      	adds	r7, #24
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}

080016d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016d6:	b580      	push	{r7, lr}
 80016d8:	b082      	sub	sp, #8
 80016da:	af00      	add	r7, sp, #0
 80016dc:	4603      	mov	r3, r0
 80016de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7ff ff31 	bl	800154c <__NVIC_EnableIRQ>
}
 80016ea:	bf00      	nop
 80016ec:	3708      	adds	r7, #8
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}

080016f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016f2:	b580      	push	{r7, lr}
 80016f4:	b082      	sub	sp, #8
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f7ff ffa2 	bl	8001644 <SysTick_Config>
 8001700:	4603      	mov	r3, r0
}
 8001702:	4618      	mov	r0, r3
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
	...

0800170c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b086      	sub	sp, #24
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001714:	2300      	movs	r3, #0
 8001716:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001718:	f7ff fc54 	bl	8000fc4 <HAL_GetTick>
 800171c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d101      	bne.n	8001728 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	e099      	b.n	800185c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2202      	movs	r2, #2
 800172c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2200      	movs	r2, #0
 8001734:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f022 0201 	bic.w	r2, r2, #1
 8001746:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001748:	e00f      	b.n	800176a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800174a:	f7ff fc3b 	bl	8000fc4 <HAL_GetTick>
 800174e:	4602      	mov	r2, r0
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	2b05      	cmp	r3, #5
 8001756:	d908      	bls.n	800176a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2220      	movs	r2, #32
 800175c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2203      	movs	r2, #3
 8001762:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e078      	b.n	800185c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 0301 	and.w	r3, r3, #1
 8001774:	2b00      	cmp	r3, #0
 8001776:	d1e8      	bne.n	800174a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001780:	697a      	ldr	r2, [r7, #20]
 8001782:	4b38      	ldr	r3, [pc, #224]	; (8001864 <HAL_DMA_Init+0x158>)
 8001784:	4013      	ands	r3, r2
 8001786:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	685a      	ldr	r2, [r3, #4]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001796:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	691b      	ldr	r3, [r3, #16]
 800179c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	699b      	ldr	r3, [r3, #24]
 80017a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6a1b      	ldr	r3, [r3, #32]
 80017b4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017b6:	697a      	ldr	r2, [r7, #20]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c0:	2b04      	cmp	r3, #4
 80017c2:	d107      	bne.n	80017d4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017cc:	4313      	orrs	r3, r2
 80017ce:	697a      	ldr	r2, [r7, #20]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	697a      	ldr	r2, [r7, #20]
 80017da:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	695b      	ldr	r3, [r3, #20]
 80017e2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	f023 0307 	bic.w	r3, r3, #7
 80017ea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f0:	697a      	ldr	r2, [r7, #20]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017fa:	2b04      	cmp	r3, #4
 80017fc:	d117      	bne.n	800182e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001802:	697a      	ldr	r2, [r7, #20]
 8001804:	4313      	orrs	r3, r2
 8001806:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800180c:	2b00      	cmp	r3, #0
 800180e:	d00e      	beq.n	800182e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	f000 fb01 	bl	8001e18 <DMA_CheckFifoParam>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d008      	beq.n	800182e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2240      	movs	r2, #64	; 0x40
 8001820:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2201      	movs	r2, #1
 8001826:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800182a:	2301      	movs	r3, #1
 800182c:	e016      	b.n	800185c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	697a      	ldr	r2, [r7, #20]
 8001834:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f000 fab8 	bl	8001dac <DMA_CalcBaseAndBitshift>
 800183c:	4603      	mov	r3, r0
 800183e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001844:	223f      	movs	r2, #63	; 0x3f
 8001846:	409a      	lsls	r2, r3
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2200      	movs	r2, #0
 8001850:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2201      	movs	r2, #1
 8001856:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800185a:	2300      	movs	r3, #0
}
 800185c:	4618      	mov	r0, r3
 800185e:	3718      	adds	r7, #24
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	f010803f 	.word	0xf010803f

08001868 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b086      	sub	sp, #24
 800186c:	af00      	add	r7, sp, #0
 800186e:	60f8      	str	r0, [r7, #12]
 8001870:	60b9      	str	r1, [r7, #8]
 8001872:	607a      	str	r2, [r7, #4]
 8001874:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001876:	2300      	movs	r3, #0
 8001878:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800187e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001886:	2b01      	cmp	r3, #1
 8001888:	d101      	bne.n	800188e <HAL_DMA_Start_IT+0x26>
 800188a:	2302      	movs	r3, #2
 800188c:	e040      	b.n	8001910 <HAL_DMA_Start_IT+0xa8>
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	2201      	movs	r2, #1
 8001892:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800189c:	b2db      	uxtb	r3, r3
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d12f      	bne.n	8001902 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	2202      	movs	r2, #2
 80018a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	2200      	movs	r2, #0
 80018ae:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	68b9      	ldr	r1, [r7, #8]
 80018b6:	68f8      	ldr	r0, [r7, #12]
 80018b8:	f000 fa4a 	bl	8001d50 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018c0:	223f      	movs	r2, #63	; 0x3f
 80018c2:	409a      	lsls	r2, r3
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f042 0216 	orr.w	r2, r2, #22
 80018d6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d007      	beq.n	80018f0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f042 0208 	orr.w	r2, r2, #8
 80018ee:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f042 0201 	orr.w	r2, r2, #1
 80018fe:	601a      	str	r2, [r3, #0]
 8001900:	e005      	b.n	800190e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	2200      	movs	r2, #0
 8001906:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800190a:	2302      	movs	r3, #2
 800190c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800190e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001910:	4618      	mov	r0, r3
 8001912:	3718      	adds	r7, #24
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}

08001918 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001924:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001926:	f7ff fb4d 	bl	8000fc4 <HAL_GetTick>
 800192a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001932:	b2db      	uxtb	r3, r3
 8001934:	2b02      	cmp	r3, #2
 8001936:	d008      	beq.n	800194a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2280      	movs	r2, #128	; 0x80
 800193c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2200      	movs	r2, #0
 8001942:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e052      	b.n	80019f0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f022 0216 	bic.w	r2, r2, #22
 8001958:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	695a      	ldr	r2, [r3, #20]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001968:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196e:	2b00      	cmp	r3, #0
 8001970:	d103      	bne.n	800197a <HAL_DMA_Abort+0x62>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001976:	2b00      	cmp	r3, #0
 8001978:	d007      	beq.n	800198a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f022 0208 	bic.w	r2, r2, #8
 8001988:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f022 0201 	bic.w	r2, r2, #1
 8001998:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800199a:	e013      	b.n	80019c4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800199c:	f7ff fb12 	bl	8000fc4 <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	2b05      	cmp	r3, #5
 80019a8:	d90c      	bls.n	80019c4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2220      	movs	r2, #32
 80019ae:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2203      	movs	r2, #3
 80019b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2200      	movs	r2, #0
 80019bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80019c0:	2303      	movs	r3, #3
 80019c2:	e015      	b.n	80019f0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 0301 	and.w	r3, r3, #1
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d1e4      	bne.n	800199c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019d6:	223f      	movs	r2, #63	; 0x3f
 80019d8:	409a      	lsls	r2, r3
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2201      	movs	r2, #1
 80019e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2200      	movs	r2, #0
 80019ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80019ee:	2300      	movs	r3, #0
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3710      	adds	r7, #16
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d004      	beq.n	8001a16 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2280      	movs	r2, #128	; 0x80
 8001a10:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e00c      	b.n	8001a30 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2205      	movs	r2, #5
 8001a1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f022 0201 	bic.w	r2, r2, #1
 8001a2c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001a2e:	2300      	movs	r3, #0
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	370c      	adds	r7, #12
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr

08001a3c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b086      	sub	sp, #24
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001a44:	2300      	movs	r3, #0
 8001a46:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001a48:	4b8e      	ldr	r3, [pc, #568]	; (8001c84 <HAL_DMA_IRQHandler+0x248>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a8e      	ldr	r2, [pc, #568]	; (8001c88 <HAL_DMA_IRQHandler+0x24c>)
 8001a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a52:	0a9b      	lsrs	r3, r3, #10
 8001a54:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a5a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a66:	2208      	movs	r2, #8
 8001a68:	409a      	lsls	r2, r3
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d01a      	beq.n	8001aa8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0304 	and.w	r3, r3, #4
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d013      	beq.n	8001aa8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f022 0204 	bic.w	r2, r2, #4
 8001a8e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a94:	2208      	movs	r2, #8
 8001a96:	409a      	lsls	r2, r3
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aa0:	f043 0201 	orr.w	r2, r3, #1
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aac:	2201      	movs	r2, #1
 8001aae:	409a      	lsls	r2, r3
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d012      	beq.n	8001ade <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	695b      	ldr	r3, [r3, #20]
 8001abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d00b      	beq.n	8001ade <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aca:	2201      	movs	r2, #1
 8001acc:	409a      	lsls	r2, r3
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ad6:	f043 0202 	orr.w	r2, r3, #2
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ae2:	2204      	movs	r2, #4
 8001ae4:	409a      	lsls	r2, r3
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	4013      	ands	r3, r2
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d012      	beq.n	8001b14 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0302 	and.w	r3, r3, #2
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d00b      	beq.n	8001b14 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b00:	2204      	movs	r2, #4
 8001b02:	409a      	lsls	r2, r3
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b0c:	f043 0204 	orr.w	r2, r3, #4
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b18:	2210      	movs	r2, #16
 8001b1a:	409a      	lsls	r2, r3
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	4013      	ands	r3, r2
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d043      	beq.n	8001bac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 0308 	and.w	r3, r3, #8
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d03c      	beq.n	8001bac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b36:	2210      	movs	r2, #16
 8001b38:	409a      	lsls	r2, r3
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d018      	beq.n	8001b7e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d108      	bne.n	8001b6c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d024      	beq.n	8001bac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	4798      	blx	r3
 8001b6a:	e01f      	b.n	8001bac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d01b      	beq.n	8001bac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	4798      	blx	r3
 8001b7c:	e016      	b.n	8001bac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d107      	bne.n	8001b9c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f022 0208 	bic.w	r2, r2, #8
 8001b9a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d003      	beq.n	8001bac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bb0:	2220      	movs	r2, #32
 8001bb2:	409a      	lsls	r2, r3
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	f000 808f 	beq.w	8001cdc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0310 	and.w	r3, r3, #16
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	f000 8087 	beq.w	8001cdc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bd2:	2220      	movs	r2, #32
 8001bd4:	409a      	lsls	r2, r3
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	2b05      	cmp	r3, #5
 8001be4:	d136      	bne.n	8001c54 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f022 0216 	bic.w	r2, r2, #22
 8001bf4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	695a      	ldr	r2, [r3, #20]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c04:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d103      	bne.n	8001c16 <HAL_DMA_IRQHandler+0x1da>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d007      	beq.n	8001c26 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f022 0208 	bic.w	r2, r2, #8
 8001c24:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c2a:	223f      	movs	r2, #63	; 0x3f
 8001c2c:	409a      	lsls	r2, r3
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2201      	movs	r2, #1
 8001c36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d07e      	beq.n	8001d48 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	4798      	blx	r3
        }
        return;
 8001c52:	e079      	b.n	8001d48 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d01d      	beq.n	8001c9e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d10d      	bne.n	8001c8c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d031      	beq.n	8001cdc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	4798      	blx	r3
 8001c80:	e02c      	b.n	8001cdc <HAL_DMA_IRQHandler+0x2a0>
 8001c82:	bf00      	nop
 8001c84:	20000000 	.word	0x20000000
 8001c88:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d023      	beq.n	8001cdc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	4798      	blx	r3
 8001c9c:	e01e      	b.n	8001cdc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d10f      	bne.n	8001ccc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f022 0210 	bic.w	r2, r2, #16
 8001cba:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d003      	beq.n	8001cdc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d032      	beq.n	8001d4a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ce8:	f003 0301 	and.w	r3, r3, #1
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d022      	beq.n	8001d36 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2205      	movs	r2, #5
 8001cf4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f022 0201 	bic.w	r2, r2, #1
 8001d06:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	60bb      	str	r3, [r7, #8]
 8001d0e:	697a      	ldr	r2, [r7, #20]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d307      	bcc.n	8001d24 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0301 	and.w	r3, r3, #1
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d1f2      	bne.n	8001d08 <HAL_DMA_IRQHandler+0x2cc>
 8001d22:	e000      	b.n	8001d26 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001d24:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2201      	movs	r2, #1
 8001d2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2200      	movs	r2, #0
 8001d32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d005      	beq.n	8001d4a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	4798      	blx	r3
 8001d46:	e000      	b.n	8001d4a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001d48:	bf00      	nop
    }
  }
}
 8001d4a:	3718      	adds	r7, #24
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}

08001d50 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b085      	sub	sp, #20
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	60f8      	str	r0, [r7, #12]
 8001d58:	60b9      	str	r1, [r7, #8]
 8001d5a:	607a      	str	r2, [r7, #4]
 8001d5c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001d6c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	683a      	ldr	r2, [r7, #0]
 8001d74:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	2b40      	cmp	r3, #64	; 0x40
 8001d7c:	d108      	bne.n	8001d90 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	68ba      	ldr	r2, [r7, #8]
 8001d8c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001d8e:	e007      	b.n	8001da0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	68ba      	ldr	r2, [r7, #8]
 8001d96:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	687a      	ldr	r2, [r7, #4]
 8001d9e:	60da      	str	r2, [r3, #12]
}
 8001da0:	bf00      	nop
 8001da2:	3714      	adds	r7, #20
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b085      	sub	sp, #20
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	3b10      	subs	r3, #16
 8001dbc:	4a14      	ldr	r2, [pc, #80]	; (8001e10 <DMA_CalcBaseAndBitshift+0x64>)
 8001dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8001dc2:	091b      	lsrs	r3, r3, #4
 8001dc4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001dc6:	4a13      	ldr	r2, [pc, #76]	; (8001e14 <DMA_CalcBaseAndBitshift+0x68>)
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	4413      	add	r3, r2
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	461a      	mov	r2, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	2b03      	cmp	r3, #3
 8001dd8:	d909      	bls.n	8001dee <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001de2:	f023 0303 	bic.w	r3, r3, #3
 8001de6:	1d1a      	adds	r2, r3, #4
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	659a      	str	r2, [r3, #88]	; 0x58
 8001dec:	e007      	b.n	8001dfe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001df6:	f023 0303 	bic.w	r3, r3, #3
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3714      	adds	r7, #20
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	aaaaaaab 	.word	0xaaaaaaab
 8001e14:	08004020 	.word	0x08004020

08001e18 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b085      	sub	sp, #20
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e20:	2300      	movs	r3, #0
 8001e22:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e28:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	699b      	ldr	r3, [r3, #24]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d11f      	bne.n	8001e72 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	2b03      	cmp	r3, #3
 8001e36:	d856      	bhi.n	8001ee6 <DMA_CheckFifoParam+0xce>
 8001e38:	a201      	add	r2, pc, #4	; (adr r2, 8001e40 <DMA_CheckFifoParam+0x28>)
 8001e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e3e:	bf00      	nop
 8001e40:	08001e51 	.word	0x08001e51
 8001e44:	08001e63 	.word	0x08001e63
 8001e48:	08001e51 	.word	0x08001e51
 8001e4c:	08001ee7 	.word	0x08001ee7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d046      	beq.n	8001eea <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e60:	e043      	b.n	8001eea <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e66:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001e6a:	d140      	bne.n	8001eee <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e70:	e03d      	b.n	8001eee <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	699b      	ldr	r3, [r3, #24]
 8001e76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e7a:	d121      	bne.n	8001ec0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	2b03      	cmp	r3, #3
 8001e80:	d837      	bhi.n	8001ef2 <DMA_CheckFifoParam+0xda>
 8001e82:	a201      	add	r2, pc, #4	; (adr r2, 8001e88 <DMA_CheckFifoParam+0x70>)
 8001e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e88:	08001e99 	.word	0x08001e99
 8001e8c:	08001e9f 	.word	0x08001e9f
 8001e90:	08001e99 	.word	0x08001e99
 8001e94:	08001eb1 	.word	0x08001eb1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	73fb      	strb	r3, [r7, #15]
      break;
 8001e9c:	e030      	b.n	8001f00 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ea2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d025      	beq.n	8001ef6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001eae:	e022      	b.n	8001ef6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001eb8:	d11f      	bne.n	8001efa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001ebe:	e01c      	b.n	8001efa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d903      	bls.n	8001ece <DMA_CheckFifoParam+0xb6>
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	2b03      	cmp	r3, #3
 8001eca:	d003      	beq.n	8001ed4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001ecc:	e018      	b.n	8001f00 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	73fb      	strb	r3, [r7, #15]
      break;
 8001ed2:	e015      	b.n	8001f00 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d00e      	beq.n	8001efe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	73fb      	strb	r3, [r7, #15]
      break;
 8001ee4:	e00b      	b.n	8001efe <DMA_CheckFifoParam+0xe6>
      break;
 8001ee6:	bf00      	nop
 8001ee8:	e00a      	b.n	8001f00 <DMA_CheckFifoParam+0xe8>
      break;
 8001eea:	bf00      	nop
 8001eec:	e008      	b.n	8001f00 <DMA_CheckFifoParam+0xe8>
      break;
 8001eee:	bf00      	nop
 8001ef0:	e006      	b.n	8001f00 <DMA_CheckFifoParam+0xe8>
      break;
 8001ef2:	bf00      	nop
 8001ef4:	e004      	b.n	8001f00 <DMA_CheckFifoParam+0xe8>
      break;
 8001ef6:	bf00      	nop
 8001ef8:	e002      	b.n	8001f00 <DMA_CheckFifoParam+0xe8>
      break;   
 8001efa:	bf00      	nop
 8001efc:	e000      	b.n	8001f00 <DMA_CheckFifoParam+0xe8>
      break;
 8001efe:	bf00      	nop
    }
  } 
  
  return status; 
 8001f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3714      	adds	r7, #20
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop

08001f10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b089      	sub	sp, #36	; 0x24
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f22:	2300      	movs	r3, #0
 8001f24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f26:	2300      	movs	r3, #0
 8001f28:	61fb      	str	r3, [r7, #28]
 8001f2a:	e16b      	b.n	8002204 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	fa02 f303 	lsl.w	r3, r2, r3
 8001f34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	697a      	ldr	r2, [r7, #20]
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f40:	693a      	ldr	r2, [r7, #16]
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	f040 815a 	bne.w	80021fe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f003 0303 	and.w	r3, r3, #3
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d005      	beq.n	8001f62 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d130      	bne.n	8001fc4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	005b      	lsls	r3, r3, #1
 8001f6c:	2203      	movs	r2, #3
 8001f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f72:	43db      	mvns	r3, r3
 8001f74:	69ba      	ldr	r2, [r7, #24]
 8001f76:	4013      	ands	r3, r2
 8001f78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	68da      	ldr	r2, [r3, #12]
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	fa02 f303 	lsl.w	r3, r2, r3
 8001f86:	69ba      	ldr	r2, [r7, #24]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	69ba      	ldr	r2, [r7, #24]
 8001f90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f98:	2201      	movs	r2, #1
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa0:	43db      	mvns	r3, r3
 8001fa2:	69ba      	ldr	r2, [r7, #24]
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	091b      	lsrs	r3, r3, #4
 8001fae:	f003 0201 	and.w	r2, r3, #1
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb8:	69ba      	ldr	r2, [r7, #24]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	69ba      	ldr	r2, [r7, #24]
 8001fc2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f003 0303 	and.w	r3, r3, #3
 8001fcc:	2b03      	cmp	r3, #3
 8001fce:	d017      	beq.n	8002000 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	005b      	lsls	r3, r3, #1
 8001fda:	2203      	movs	r2, #3
 8001fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe0:	43db      	mvns	r3, r3
 8001fe2:	69ba      	ldr	r2, [r7, #24]
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	689a      	ldr	r2, [r3, #8]
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	005b      	lsls	r3, r3, #1
 8001ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff4:	69ba      	ldr	r2, [r7, #24]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	69ba      	ldr	r2, [r7, #24]
 8001ffe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f003 0303 	and.w	r3, r3, #3
 8002008:	2b02      	cmp	r3, #2
 800200a:	d123      	bne.n	8002054 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	08da      	lsrs	r2, r3, #3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	3208      	adds	r2, #8
 8002014:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002018:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	f003 0307 	and.w	r3, r3, #7
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	220f      	movs	r2, #15
 8002024:	fa02 f303 	lsl.w	r3, r2, r3
 8002028:	43db      	mvns	r3, r3
 800202a:	69ba      	ldr	r2, [r7, #24]
 800202c:	4013      	ands	r3, r2
 800202e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	691a      	ldr	r2, [r3, #16]
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	f003 0307 	and.w	r3, r3, #7
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	fa02 f303 	lsl.w	r3, r2, r3
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	4313      	orrs	r3, r2
 8002044:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	08da      	lsrs	r2, r3, #3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	3208      	adds	r2, #8
 800204e:	69b9      	ldr	r1, [r7, #24]
 8002050:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	005b      	lsls	r3, r3, #1
 800205e:	2203      	movs	r2, #3
 8002060:	fa02 f303 	lsl.w	r3, r2, r3
 8002064:	43db      	mvns	r3, r3
 8002066:	69ba      	ldr	r2, [r7, #24]
 8002068:	4013      	ands	r3, r2
 800206a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f003 0203 	and.w	r2, r3, #3
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	005b      	lsls	r3, r3, #1
 8002078:	fa02 f303 	lsl.w	r3, r2, r3
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	4313      	orrs	r3, r2
 8002080:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	69ba      	ldr	r2, [r7, #24]
 8002086:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002090:	2b00      	cmp	r3, #0
 8002092:	f000 80b4 	beq.w	80021fe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002096:	2300      	movs	r3, #0
 8002098:	60fb      	str	r3, [r7, #12]
 800209a:	4b60      	ldr	r3, [pc, #384]	; (800221c <HAL_GPIO_Init+0x30c>)
 800209c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800209e:	4a5f      	ldr	r2, [pc, #380]	; (800221c <HAL_GPIO_Init+0x30c>)
 80020a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020a4:	6453      	str	r3, [r2, #68]	; 0x44
 80020a6:	4b5d      	ldr	r3, [pc, #372]	; (800221c <HAL_GPIO_Init+0x30c>)
 80020a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020ae:	60fb      	str	r3, [r7, #12]
 80020b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020b2:	4a5b      	ldr	r2, [pc, #364]	; (8002220 <HAL_GPIO_Init+0x310>)
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	089b      	lsrs	r3, r3, #2
 80020b8:	3302      	adds	r3, #2
 80020ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	f003 0303 	and.w	r3, r3, #3
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	220f      	movs	r2, #15
 80020ca:	fa02 f303 	lsl.w	r3, r2, r3
 80020ce:	43db      	mvns	r3, r3
 80020d0:	69ba      	ldr	r2, [r7, #24]
 80020d2:	4013      	ands	r3, r2
 80020d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4a52      	ldr	r2, [pc, #328]	; (8002224 <HAL_GPIO_Init+0x314>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d02b      	beq.n	8002136 <HAL_GPIO_Init+0x226>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4a51      	ldr	r2, [pc, #324]	; (8002228 <HAL_GPIO_Init+0x318>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d025      	beq.n	8002132 <HAL_GPIO_Init+0x222>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4a50      	ldr	r2, [pc, #320]	; (800222c <HAL_GPIO_Init+0x31c>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d01f      	beq.n	800212e <HAL_GPIO_Init+0x21e>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4a4f      	ldr	r2, [pc, #316]	; (8002230 <HAL_GPIO_Init+0x320>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d019      	beq.n	800212a <HAL_GPIO_Init+0x21a>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4a4e      	ldr	r2, [pc, #312]	; (8002234 <HAL_GPIO_Init+0x324>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d013      	beq.n	8002126 <HAL_GPIO_Init+0x216>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4a4d      	ldr	r2, [pc, #308]	; (8002238 <HAL_GPIO_Init+0x328>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d00d      	beq.n	8002122 <HAL_GPIO_Init+0x212>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4a4c      	ldr	r2, [pc, #304]	; (800223c <HAL_GPIO_Init+0x32c>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d007      	beq.n	800211e <HAL_GPIO_Init+0x20e>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4a4b      	ldr	r2, [pc, #300]	; (8002240 <HAL_GPIO_Init+0x330>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d101      	bne.n	800211a <HAL_GPIO_Init+0x20a>
 8002116:	2307      	movs	r3, #7
 8002118:	e00e      	b.n	8002138 <HAL_GPIO_Init+0x228>
 800211a:	2308      	movs	r3, #8
 800211c:	e00c      	b.n	8002138 <HAL_GPIO_Init+0x228>
 800211e:	2306      	movs	r3, #6
 8002120:	e00a      	b.n	8002138 <HAL_GPIO_Init+0x228>
 8002122:	2305      	movs	r3, #5
 8002124:	e008      	b.n	8002138 <HAL_GPIO_Init+0x228>
 8002126:	2304      	movs	r3, #4
 8002128:	e006      	b.n	8002138 <HAL_GPIO_Init+0x228>
 800212a:	2303      	movs	r3, #3
 800212c:	e004      	b.n	8002138 <HAL_GPIO_Init+0x228>
 800212e:	2302      	movs	r3, #2
 8002130:	e002      	b.n	8002138 <HAL_GPIO_Init+0x228>
 8002132:	2301      	movs	r3, #1
 8002134:	e000      	b.n	8002138 <HAL_GPIO_Init+0x228>
 8002136:	2300      	movs	r3, #0
 8002138:	69fa      	ldr	r2, [r7, #28]
 800213a:	f002 0203 	and.w	r2, r2, #3
 800213e:	0092      	lsls	r2, r2, #2
 8002140:	4093      	lsls	r3, r2
 8002142:	69ba      	ldr	r2, [r7, #24]
 8002144:	4313      	orrs	r3, r2
 8002146:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002148:	4935      	ldr	r1, [pc, #212]	; (8002220 <HAL_GPIO_Init+0x310>)
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	089b      	lsrs	r3, r3, #2
 800214e:	3302      	adds	r3, #2
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002156:	4b3b      	ldr	r3, [pc, #236]	; (8002244 <HAL_GPIO_Init+0x334>)
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	43db      	mvns	r3, r3
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	4013      	ands	r3, r2
 8002164:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d003      	beq.n	800217a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002172:	69ba      	ldr	r2, [r7, #24]
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	4313      	orrs	r3, r2
 8002178:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800217a:	4a32      	ldr	r2, [pc, #200]	; (8002244 <HAL_GPIO_Init+0x334>)
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002180:	4b30      	ldr	r3, [pc, #192]	; (8002244 <HAL_GPIO_Init+0x334>)
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	43db      	mvns	r3, r3
 800218a:	69ba      	ldr	r2, [r7, #24]
 800218c:	4013      	ands	r3, r2
 800218e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002198:	2b00      	cmp	r3, #0
 800219a:	d003      	beq.n	80021a4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800219c:	69ba      	ldr	r2, [r7, #24]
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	4313      	orrs	r3, r2
 80021a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021a4:	4a27      	ldr	r2, [pc, #156]	; (8002244 <HAL_GPIO_Init+0x334>)
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80021aa:	4b26      	ldr	r3, [pc, #152]	; (8002244 <HAL_GPIO_Init+0x334>)
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	43db      	mvns	r3, r3
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	4013      	ands	r3, r2
 80021b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d003      	beq.n	80021ce <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80021c6:	69ba      	ldr	r2, [r7, #24]
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021ce:	4a1d      	ldr	r2, [pc, #116]	; (8002244 <HAL_GPIO_Init+0x334>)
 80021d0:	69bb      	ldr	r3, [r7, #24]
 80021d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021d4:	4b1b      	ldr	r3, [pc, #108]	; (8002244 <HAL_GPIO_Init+0x334>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	43db      	mvns	r3, r3
 80021de:	69ba      	ldr	r2, [r7, #24]
 80021e0:	4013      	ands	r3, r2
 80021e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d003      	beq.n	80021f8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021f8:	4a12      	ldr	r2, [pc, #72]	; (8002244 <HAL_GPIO_Init+0x334>)
 80021fa:	69bb      	ldr	r3, [r7, #24]
 80021fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	3301      	adds	r3, #1
 8002202:	61fb      	str	r3, [r7, #28]
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	2b0f      	cmp	r3, #15
 8002208:	f67f ae90 	bls.w	8001f2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800220c:	bf00      	nop
 800220e:	bf00      	nop
 8002210:	3724      	adds	r7, #36	; 0x24
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	40023800 	.word	0x40023800
 8002220:	40013800 	.word	0x40013800
 8002224:	40020000 	.word	0x40020000
 8002228:	40020400 	.word	0x40020400
 800222c:	40020800 	.word	0x40020800
 8002230:	40020c00 	.word	0x40020c00
 8002234:	40021000 	.word	0x40021000
 8002238:	40021400 	.word	0x40021400
 800223c:	40021800 	.word	0x40021800
 8002240:	40021c00 	.word	0x40021c00
 8002244:	40013c00 	.word	0x40013c00

08002248 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b086      	sub	sp, #24
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d101      	bne.n	800225a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e267      	b.n	800272a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0301 	and.w	r3, r3, #1
 8002262:	2b00      	cmp	r3, #0
 8002264:	d075      	beq.n	8002352 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002266:	4b88      	ldr	r3, [pc, #544]	; (8002488 <HAL_RCC_OscConfig+0x240>)
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	f003 030c 	and.w	r3, r3, #12
 800226e:	2b04      	cmp	r3, #4
 8002270:	d00c      	beq.n	800228c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002272:	4b85      	ldr	r3, [pc, #532]	; (8002488 <HAL_RCC_OscConfig+0x240>)
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800227a:	2b08      	cmp	r3, #8
 800227c:	d112      	bne.n	80022a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800227e:	4b82      	ldr	r3, [pc, #520]	; (8002488 <HAL_RCC_OscConfig+0x240>)
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002286:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800228a:	d10b      	bne.n	80022a4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800228c:	4b7e      	ldr	r3, [pc, #504]	; (8002488 <HAL_RCC_OscConfig+0x240>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d05b      	beq.n	8002350 <HAL_RCC_OscConfig+0x108>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d157      	bne.n	8002350 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e242      	b.n	800272a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022ac:	d106      	bne.n	80022bc <HAL_RCC_OscConfig+0x74>
 80022ae:	4b76      	ldr	r3, [pc, #472]	; (8002488 <HAL_RCC_OscConfig+0x240>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a75      	ldr	r2, [pc, #468]	; (8002488 <HAL_RCC_OscConfig+0x240>)
 80022b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022b8:	6013      	str	r3, [r2, #0]
 80022ba:	e01d      	b.n	80022f8 <HAL_RCC_OscConfig+0xb0>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022c4:	d10c      	bne.n	80022e0 <HAL_RCC_OscConfig+0x98>
 80022c6:	4b70      	ldr	r3, [pc, #448]	; (8002488 <HAL_RCC_OscConfig+0x240>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a6f      	ldr	r2, [pc, #444]	; (8002488 <HAL_RCC_OscConfig+0x240>)
 80022cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022d0:	6013      	str	r3, [r2, #0]
 80022d2:	4b6d      	ldr	r3, [pc, #436]	; (8002488 <HAL_RCC_OscConfig+0x240>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a6c      	ldr	r2, [pc, #432]	; (8002488 <HAL_RCC_OscConfig+0x240>)
 80022d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022dc:	6013      	str	r3, [r2, #0]
 80022de:	e00b      	b.n	80022f8 <HAL_RCC_OscConfig+0xb0>
 80022e0:	4b69      	ldr	r3, [pc, #420]	; (8002488 <HAL_RCC_OscConfig+0x240>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a68      	ldr	r2, [pc, #416]	; (8002488 <HAL_RCC_OscConfig+0x240>)
 80022e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022ea:	6013      	str	r3, [r2, #0]
 80022ec:	4b66      	ldr	r3, [pc, #408]	; (8002488 <HAL_RCC_OscConfig+0x240>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a65      	ldr	r2, [pc, #404]	; (8002488 <HAL_RCC_OscConfig+0x240>)
 80022f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d013      	beq.n	8002328 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002300:	f7fe fe60 	bl	8000fc4 <HAL_GetTick>
 8002304:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002306:	e008      	b.n	800231a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002308:	f7fe fe5c 	bl	8000fc4 <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	2b64      	cmp	r3, #100	; 0x64
 8002314:	d901      	bls.n	800231a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	e207      	b.n	800272a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800231a:	4b5b      	ldr	r3, [pc, #364]	; (8002488 <HAL_RCC_OscConfig+0x240>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d0f0      	beq.n	8002308 <HAL_RCC_OscConfig+0xc0>
 8002326:	e014      	b.n	8002352 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002328:	f7fe fe4c 	bl	8000fc4 <HAL_GetTick>
 800232c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800232e:	e008      	b.n	8002342 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002330:	f7fe fe48 	bl	8000fc4 <HAL_GetTick>
 8002334:	4602      	mov	r2, r0
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	2b64      	cmp	r3, #100	; 0x64
 800233c:	d901      	bls.n	8002342 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e1f3      	b.n	800272a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002342:	4b51      	ldr	r3, [pc, #324]	; (8002488 <HAL_RCC_OscConfig+0x240>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d1f0      	bne.n	8002330 <HAL_RCC_OscConfig+0xe8>
 800234e:	e000      	b.n	8002352 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002350:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0302 	and.w	r3, r3, #2
 800235a:	2b00      	cmp	r3, #0
 800235c:	d063      	beq.n	8002426 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800235e:	4b4a      	ldr	r3, [pc, #296]	; (8002488 <HAL_RCC_OscConfig+0x240>)
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	f003 030c 	and.w	r3, r3, #12
 8002366:	2b00      	cmp	r3, #0
 8002368:	d00b      	beq.n	8002382 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800236a:	4b47      	ldr	r3, [pc, #284]	; (8002488 <HAL_RCC_OscConfig+0x240>)
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002372:	2b08      	cmp	r3, #8
 8002374:	d11c      	bne.n	80023b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002376:	4b44      	ldr	r3, [pc, #272]	; (8002488 <HAL_RCC_OscConfig+0x240>)
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d116      	bne.n	80023b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002382:	4b41      	ldr	r3, [pc, #260]	; (8002488 <HAL_RCC_OscConfig+0x240>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0302 	and.w	r3, r3, #2
 800238a:	2b00      	cmp	r3, #0
 800238c:	d005      	beq.n	800239a <HAL_RCC_OscConfig+0x152>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	2b01      	cmp	r3, #1
 8002394:	d001      	beq.n	800239a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e1c7      	b.n	800272a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800239a:	4b3b      	ldr	r3, [pc, #236]	; (8002488 <HAL_RCC_OscConfig+0x240>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	691b      	ldr	r3, [r3, #16]
 80023a6:	00db      	lsls	r3, r3, #3
 80023a8:	4937      	ldr	r1, [pc, #220]	; (8002488 <HAL_RCC_OscConfig+0x240>)
 80023aa:	4313      	orrs	r3, r2
 80023ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023ae:	e03a      	b.n	8002426 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d020      	beq.n	80023fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023b8:	4b34      	ldr	r3, [pc, #208]	; (800248c <HAL_RCC_OscConfig+0x244>)
 80023ba:	2201      	movs	r2, #1
 80023bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023be:	f7fe fe01 	bl	8000fc4 <HAL_GetTick>
 80023c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023c4:	e008      	b.n	80023d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023c6:	f7fe fdfd 	bl	8000fc4 <HAL_GetTick>
 80023ca:	4602      	mov	r2, r0
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	1ad3      	subs	r3, r2, r3
 80023d0:	2b02      	cmp	r3, #2
 80023d2:	d901      	bls.n	80023d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80023d4:	2303      	movs	r3, #3
 80023d6:	e1a8      	b.n	800272a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023d8:	4b2b      	ldr	r3, [pc, #172]	; (8002488 <HAL_RCC_OscConfig+0x240>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0302 	and.w	r3, r3, #2
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d0f0      	beq.n	80023c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023e4:	4b28      	ldr	r3, [pc, #160]	; (8002488 <HAL_RCC_OscConfig+0x240>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	691b      	ldr	r3, [r3, #16]
 80023f0:	00db      	lsls	r3, r3, #3
 80023f2:	4925      	ldr	r1, [pc, #148]	; (8002488 <HAL_RCC_OscConfig+0x240>)
 80023f4:	4313      	orrs	r3, r2
 80023f6:	600b      	str	r3, [r1, #0]
 80023f8:	e015      	b.n	8002426 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023fa:	4b24      	ldr	r3, [pc, #144]	; (800248c <HAL_RCC_OscConfig+0x244>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002400:	f7fe fde0 	bl	8000fc4 <HAL_GetTick>
 8002404:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002406:	e008      	b.n	800241a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002408:	f7fe fddc 	bl	8000fc4 <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	2b02      	cmp	r3, #2
 8002414:	d901      	bls.n	800241a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002416:	2303      	movs	r3, #3
 8002418:	e187      	b.n	800272a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800241a:	4b1b      	ldr	r3, [pc, #108]	; (8002488 <HAL_RCC_OscConfig+0x240>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0302 	and.w	r3, r3, #2
 8002422:	2b00      	cmp	r3, #0
 8002424:	d1f0      	bne.n	8002408 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0308 	and.w	r3, r3, #8
 800242e:	2b00      	cmp	r3, #0
 8002430:	d036      	beq.n	80024a0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	695b      	ldr	r3, [r3, #20]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d016      	beq.n	8002468 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800243a:	4b15      	ldr	r3, [pc, #84]	; (8002490 <HAL_RCC_OscConfig+0x248>)
 800243c:	2201      	movs	r2, #1
 800243e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002440:	f7fe fdc0 	bl	8000fc4 <HAL_GetTick>
 8002444:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002446:	e008      	b.n	800245a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002448:	f7fe fdbc 	bl	8000fc4 <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	2b02      	cmp	r3, #2
 8002454:	d901      	bls.n	800245a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e167      	b.n	800272a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800245a:	4b0b      	ldr	r3, [pc, #44]	; (8002488 <HAL_RCC_OscConfig+0x240>)
 800245c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800245e:	f003 0302 	and.w	r3, r3, #2
 8002462:	2b00      	cmp	r3, #0
 8002464:	d0f0      	beq.n	8002448 <HAL_RCC_OscConfig+0x200>
 8002466:	e01b      	b.n	80024a0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002468:	4b09      	ldr	r3, [pc, #36]	; (8002490 <HAL_RCC_OscConfig+0x248>)
 800246a:	2200      	movs	r2, #0
 800246c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800246e:	f7fe fda9 	bl	8000fc4 <HAL_GetTick>
 8002472:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002474:	e00e      	b.n	8002494 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002476:	f7fe fda5 	bl	8000fc4 <HAL_GetTick>
 800247a:	4602      	mov	r2, r0
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	2b02      	cmp	r3, #2
 8002482:	d907      	bls.n	8002494 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002484:	2303      	movs	r3, #3
 8002486:	e150      	b.n	800272a <HAL_RCC_OscConfig+0x4e2>
 8002488:	40023800 	.word	0x40023800
 800248c:	42470000 	.word	0x42470000
 8002490:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002494:	4b88      	ldr	r3, [pc, #544]	; (80026b8 <HAL_RCC_OscConfig+0x470>)
 8002496:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002498:	f003 0302 	and.w	r3, r3, #2
 800249c:	2b00      	cmp	r3, #0
 800249e:	d1ea      	bne.n	8002476 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0304 	and.w	r3, r3, #4
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	f000 8097 	beq.w	80025dc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024ae:	2300      	movs	r3, #0
 80024b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024b2:	4b81      	ldr	r3, [pc, #516]	; (80026b8 <HAL_RCC_OscConfig+0x470>)
 80024b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d10f      	bne.n	80024de <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024be:	2300      	movs	r3, #0
 80024c0:	60bb      	str	r3, [r7, #8]
 80024c2:	4b7d      	ldr	r3, [pc, #500]	; (80026b8 <HAL_RCC_OscConfig+0x470>)
 80024c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c6:	4a7c      	ldr	r2, [pc, #496]	; (80026b8 <HAL_RCC_OscConfig+0x470>)
 80024c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024cc:	6413      	str	r3, [r2, #64]	; 0x40
 80024ce:	4b7a      	ldr	r3, [pc, #488]	; (80026b8 <HAL_RCC_OscConfig+0x470>)
 80024d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024d6:	60bb      	str	r3, [r7, #8]
 80024d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024da:	2301      	movs	r3, #1
 80024dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024de:	4b77      	ldr	r3, [pc, #476]	; (80026bc <HAL_RCC_OscConfig+0x474>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d118      	bne.n	800251c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024ea:	4b74      	ldr	r3, [pc, #464]	; (80026bc <HAL_RCC_OscConfig+0x474>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a73      	ldr	r2, [pc, #460]	; (80026bc <HAL_RCC_OscConfig+0x474>)
 80024f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024f6:	f7fe fd65 	bl	8000fc4 <HAL_GetTick>
 80024fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024fc:	e008      	b.n	8002510 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024fe:	f7fe fd61 	bl	8000fc4 <HAL_GetTick>
 8002502:	4602      	mov	r2, r0
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	2b02      	cmp	r3, #2
 800250a:	d901      	bls.n	8002510 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800250c:	2303      	movs	r3, #3
 800250e:	e10c      	b.n	800272a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002510:	4b6a      	ldr	r3, [pc, #424]	; (80026bc <HAL_RCC_OscConfig+0x474>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002518:	2b00      	cmp	r3, #0
 800251a:	d0f0      	beq.n	80024fe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	2b01      	cmp	r3, #1
 8002522:	d106      	bne.n	8002532 <HAL_RCC_OscConfig+0x2ea>
 8002524:	4b64      	ldr	r3, [pc, #400]	; (80026b8 <HAL_RCC_OscConfig+0x470>)
 8002526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002528:	4a63      	ldr	r2, [pc, #396]	; (80026b8 <HAL_RCC_OscConfig+0x470>)
 800252a:	f043 0301 	orr.w	r3, r3, #1
 800252e:	6713      	str	r3, [r2, #112]	; 0x70
 8002530:	e01c      	b.n	800256c <HAL_RCC_OscConfig+0x324>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	2b05      	cmp	r3, #5
 8002538:	d10c      	bne.n	8002554 <HAL_RCC_OscConfig+0x30c>
 800253a:	4b5f      	ldr	r3, [pc, #380]	; (80026b8 <HAL_RCC_OscConfig+0x470>)
 800253c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800253e:	4a5e      	ldr	r2, [pc, #376]	; (80026b8 <HAL_RCC_OscConfig+0x470>)
 8002540:	f043 0304 	orr.w	r3, r3, #4
 8002544:	6713      	str	r3, [r2, #112]	; 0x70
 8002546:	4b5c      	ldr	r3, [pc, #368]	; (80026b8 <HAL_RCC_OscConfig+0x470>)
 8002548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800254a:	4a5b      	ldr	r2, [pc, #364]	; (80026b8 <HAL_RCC_OscConfig+0x470>)
 800254c:	f043 0301 	orr.w	r3, r3, #1
 8002550:	6713      	str	r3, [r2, #112]	; 0x70
 8002552:	e00b      	b.n	800256c <HAL_RCC_OscConfig+0x324>
 8002554:	4b58      	ldr	r3, [pc, #352]	; (80026b8 <HAL_RCC_OscConfig+0x470>)
 8002556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002558:	4a57      	ldr	r2, [pc, #348]	; (80026b8 <HAL_RCC_OscConfig+0x470>)
 800255a:	f023 0301 	bic.w	r3, r3, #1
 800255e:	6713      	str	r3, [r2, #112]	; 0x70
 8002560:	4b55      	ldr	r3, [pc, #340]	; (80026b8 <HAL_RCC_OscConfig+0x470>)
 8002562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002564:	4a54      	ldr	r2, [pc, #336]	; (80026b8 <HAL_RCC_OscConfig+0x470>)
 8002566:	f023 0304 	bic.w	r3, r3, #4
 800256a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d015      	beq.n	80025a0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002574:	f7fe fd26 	bl	8000fc4 <HAL_GetTick>
 8002578:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800257a:	e00a      	b.n	8002592 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800257c:	f7fe fd22 	bl	8000fc4 <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	f241 3288 	movw	r2, #5000	; 0x1388
 800258a:	4293      	cmp	r3, r2
 800258c:	d901      	bls.n	8002592 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e0cb      	b.n	800272a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002592:	4b49      	ldr	r3, [pc, #292]	; (80026b8 <HAL_RCC_OscConfig+0x470>)
 8002594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002596:	f003 0302 	and.w	r3, r3, #2
 800259a:	2b00      	cmp	r3, #0
 800259c:	d0ee      	beq.n	800257c <HAL_RCC_OscConfig+0x334>
 800259e:	e014      	b.n	80025ca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025a0:	f7fe fd10 	bl	8000fc4 <HAL_GetTick>
 80025a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025a6:	e00a      	b.n	80025be <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025a8:	f7fe fd0c 	bl	8000fc4 <HAL_GetTick>
 80025ac:	4602      	mov	r2, r0
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d901      	bls.n	80025be <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	e0b5      	b.n	800272a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025be:	4b3e      	ldr	r3, [pc, #248]	; (80026b8 <HAL_RCC_OscConfig+0x470>)
 80025c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025c2:	f003 0302 	and.w	r3, r3, #2
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d1ee      	bne.n	80025a8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025ca:	7dfb      	ldrb	r3, [r7, #23]
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d105      	bne.n	80025dc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025d0:	4b39      	ldr	r3, [pc, #228]	; (80026b8 <HAL_RCC_OscConfig+0x470>)
 80025d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d4:	4a38      	ldr	r2, [pc, #224]	; (80026b8 <HAL_RCC_OscConfig+0x470>)
 80025d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025da:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	699b      	ldr	r3, [r3, #24]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	f000 80a1 	beq.w	8002728 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80025e6:	4b34      	ldr	r3, [pc, #208]	; (80026b8 <HAL_RCC_OscConfig+0x470>)
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	f003 030c 	and.w	r3, r3, #12
 80025ee:	2b08      	cmp	r3, #8
 80025f0:	d05c      	beq.n	80026ac <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	699b      	ldr	r3, [r3, #24]
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d141      	bne.n	800267e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025fa:	4b31      	ldr	r3, [pc, #196]	; (80026c0 <HAL_RCC_OscConfig+0x478>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002600:	f7fe fce0 	bl	8000fc4 <HAL_GetTick>
 8002604:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002606:	e008      	b.n	800261a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002608:	f7fe fcdc 	bl	8000fc4 <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	2b02      	cmp	r3, #2
 8002614:	d901      	bls.n	800261a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e087      	b.n	800272a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800261a:	4b27      	ldr	r3, [pc, #156]	; (80026b8 <HAL_RCC_OscConfig+0x470>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d1f0      	bne.n	8002608 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	69da      	ldr	r2, [r3, #28]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a1b      	ldr	r3, [r3, #32]
 800262e:	431a      	orrs	r2, r3
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002634:	019b      	lsls	r3, r3, #6
 8002636:	431a      	orrs	r2, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800263c:	085b      	lsrs	r3, r3, #1
 800263e:	3b01      	subs	r3, #1
 8002640:	041b      	lsls	r3, r3, #16
 8002642:	431a      	orrs	r2, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002648:	061b      	lsls	r3, r3, #24
 800264a:	491b      	ldr	r1, [pc, #108]	; (80026b8 <HAL_RCC_OscConfig+0x470>)
 800264c:	4313      	orrs	r3, r2
 800264e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002650:	4b1b      	ldr	r3, [pc, #108]	; (80026c0 <HAL_RCC_OscConfig+0x478>)
 8002652:	2201      	movs	r2, #1
 8002654:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002656:	f7fe fcb5 	bl	8000fc4 <HAL_GetTick>
 800265a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800265c:	e008      	b.n	8002670 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800265e:	f7fe fcb1 	bl	8000fc4 <HAL_GetTick>
 8002662:	4602      	mov	r2, r0
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	2b02      	cmp	r3, #2
 800266a:	d901      	bls.n	8002670 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800266c:	2303      	movs	r3, #3
 800266e:	e05c      	b.n	800272a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002670:	4b11      	ldr	r3, [pc, #68]	; (80026b8 <HAL_RCC_OscConfig+0x470>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002678:	2b00      	cmp	r3, #0
 800267a:	d0f0      	beq.n	800265e <HAL_RCC_OscConfig+0x416>
 800267c:	e054      	b.n	8002728 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800267e:	4b10      	ldr	r3, [pc, #64]	; (80026c0 <HAL_RCC_OscConfig+0x478>)
 8002680:	2200      	movs	r2, #0
 8002682:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002684:	f7fe fc9e 	bl	8000fc4 <HAL_GetTick>
 8002688:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800268a:	e008      	b.n	800269e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800268c:	f7fe fc9a 	bl	8000fc4 <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	2b02      	cmp	r3, #2
 8002698:	d901      	bls.n	800269e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e045      	b.n	800272a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800269e:	4b06      	ldr	r3, [pc, #24]	; (80026b8 <HAL_RCC_OscConfig+0x470>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d1f0      	bne.n	800268c <HAL_RCC_OscConfig+0x444>
 80026aa:	e03d      	b.n	8002728 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	699b      	ldr	r3, [r3, #24]
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d107      	bne.n	80026c4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e038      	b.n	800272a <HAL_RCC_OscConfig+0x4e2>
 80026b8:	40023800 	.word	0x40023800
 80026bc:	40007000 	.word	0x40007000
 80026c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80026c4:	4b1b      	ldr	r3, [pc, #108]	; (8002734 <HAL_RCC_OscConfig+0x4ec>)
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	699b      	ldr	r3, [r3, #24]
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d028      	beq.n	8002724 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026dc:	429a      	cmp	r2, r3
 80026de:	d121      	bne.n	8002724 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d11a      	bne.n	8002724 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026ee:	68fa      	ldr	r2, [r7, #12]
 80026f0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80026f4:	4013      	ands	r3, r2
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80026fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d111      	bne.n	8002724 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800270a:	085b      	lsrs	r3, r3, #1
 800270c:	3b01      	subs	r3, #1
 800270e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002710:	429a      	cmp	r2, r3
 8002712:	d107      	bne.n	8002724 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800271e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002720:	429a      	cmp	r2, r3
 8002722:	d001      	beq.n	8002728 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e000      	b.n	800272a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002728:	2300      	movs	r3, #0
}
 800272a:	4618      	mov	r0, r3
 800272c:	3718      	adds	r7, #24
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	40023800 	.word	0x40023800

08002738 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d101      	bne.n	800274c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e0cc      	b.n	80028e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800274c:	4b68      	ldr	r3, [pc, #416]	; (80028f0 <HAL_RCC_ClockConfig+0x1b8>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0307 	and.w	r3, r3, #7
 8002754:	683a      	ldr	r2, [r7, #0]
 8002756:	429a      	cmp	r2, r3
 8002758:	d90c      	bls.n	8002774 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800275a:	4b65      	ldr	r3, [pc, #404]	; (80028f0 <HAL_RCC_ClockConfig+0x1b8>)
 800275c:	683a      	ldr	r2, [r7, #0]
 800275e:	b2d2      	uxtb	r2, r2
 8002760:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002762:	4b63      	ldr	r3, [pc, #396]	; (80028f0 <HAL_RCC_ClockConfig+0x1b8>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0307 	and.w	r3, r3, #7
 800276a:	683a      	ldr	r2, [r7, #0]
 800276c:	429a      	cmp	r2, r3
 800276e:	d001      	beq.n	8002774 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e0b8      	b.n	80028e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0302 	and.w	r3, r3, #2
 800277c:	2b00      	cmp	r3, #0
 800277e:	d020      	beq.n	80027c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0304 	and.w	r3, r3, #4
 8002788:	2b00      	cmp	r3, #0
 800278a:	d005      	beq.n	8002798 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800278c:	4b59      	ldr	r3, [pc, #356]	; (80028f4 <HAL_RCC_ClockConfig+0x1bc>)
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	4a58      	ldr	r2, [pc, #352]	; (80028f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002792:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002796:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0308 	and.w	r3, r3, #8
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d005      	beq.n	80027b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027a4:	4b53      	ldr	r3, [pc, #332]	; (80028f4 <HAL_RCC_ClockConfig+0x1bc>)
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	4a52      	ldr	r2, [pc, #328]	; (80028f4 <HAL_RCC_ClockConfig+0x1bc>)
 80027aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80027ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027b0:	4b50      	ldr	r3, [pc, #320]	; (80028f4 <HAL_RCC_ClockConfig+0x1bc>)
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	494d      	ldr	r1, [pc, #308]	; (80028f4 <HAL_RCC_ClockConfig+0x1bc>)
 80027be:	4313      	orrs	r3, r2
 80027c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0301 	and.w	r3, r3, #1
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d044      	beq.n	8002858 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d107      	bne.n	80027e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027d6:	4b47      	ldr	r3, [pc, #284]	; (80028f4 <HAL_RCC_ClockConfig+0x1bc>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d119      	bne.n	8002816 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e07f      	b.n	80028e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d003      	beq.n	80027f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027f2:	2b03      	cmp	r3, #3
 80027f4:	d107      	bne.n	8002806 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027f6:	4b3f      	ldr	r3, [pc, #252]	; (80028f4 <HAL_RCC_ClockConfig+0x1bc>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d109      	bne.n	8002816 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e06f      	b.n	80028e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002806:	4b3b      	ldr	r3, [pc, #236]	; (80028f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0302 	and.w	r3, r3, #2
 800280e:	2b00      	cmp	r3, #0
 8002810:	d101      	bne.n	8002816 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e067      	b.n	80028e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002816:	4b37      	ldr	r3, [pc, #220]	; (80028f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	f023 0203 	bic.w	r2, r3, #3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	4934      	ldr	r1, [pc, #208]	; (80028f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002824:	4313      	orrs	r3, r2
 8002826:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002828:	f7fe fbcc 	bl	8000fc4 <HAL_GetTick>
 800282c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800282e:	e00a      	b.n	8002846 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002830:	f7fe fbc8 	bl	8000fc4 <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	f241 3288 	movw	r2, #5000	; 0x1388
 800283e:	4293      	cmp	r3, r2
 8002840:	d901      	bls.n	8002846 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e04f      	b.n	80028e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002846:	4b2b      	ldr	r3, [pc, #172]	; (80028f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	f003 020c 	and.w	r2, r3, #12
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	429a      	cmp	r2, r3
 8002856:	d1eb      	bne.n	8002830 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002858:	4b25      	ldr	r3, [pc, #148]	; (80028f0 <HAL_RCC_ClockConfig+0x1b8>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0307 	and.w	r3, r3, #7
 8002860:	683a      	ldr	r2, [r7, #0]
 8002862:	429a      	cmp	r2, r3
 8002864:	d20c      	bcs.n	8002880 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002866:	4b22      	ldr	r3, [pc, #136]	; (80028f0 <HAL_RCC_ClockConfig+0x1b8>)
 8002868:	683a      	ldr	r2, [r7, #0]
 800286a:	b2d2      	uxtb	r2, r2
 800286c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800286e:	4b20      	ldr	r3, [pc, #128]	; (80028f0 <HAL_RCC_ClockConfig+0x1b8>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0307 	and.w	r3, r3, #7
 8002876:	683a      	ldr	r2, [r7, #0]
 8002878:	429a      	cmp	r2, r3
 800287a:	d001      	beq.n	8002880 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e032      	b.n	80028e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 0304 	and.w	r3, r3, #4
 8002888:	2b00      	cmp	r3, #0
 800288a:	d008      	beq.n	800289e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800288c:	4b19      	ldr	r3, [pc, #100]	; (80028f4 <HAL_RCC_ClockConfig+0x1bc>)
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	4916      	ldr	r1, [pc, #88]	; (80028f4 <HAL_RCC_ClockConfig+0x1bc>)
 800289a:	4313      	orrs	r3, r2
 800289c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0308 	and.w	r3, r3, #8
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d009      	beq.n	80028be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028aa:	4b12      	ldr	r3, [pc, #72]	; (80028f4 <HAL_RCC_ClockConfig+0x1bc>)
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	691b      	ldr	r3, [r3, #16]
 80028b6:	00db      	lsls	r3, r3, #3
 80028b8:	490e      	ldr	r1, [pc, #56]	; (80028f4 <HAL_RCC_ClockConfig+0x1bc>)
 80028ba:	4313      	orrs	r3, r2
 80028bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80028be:	f000 f821 	bl	8002904 <HAL_RCC_GetSysClockFreq>
 80028c2:	4602      	mov	r2, r0
 80028c4:	4b0b      	ldr	r3, [pc, #44]	; (80028f4 <HAL_RCC_ClockConfig+0x1bc>)
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	091b      	lsrs	r3, r3, #4
 80028ca:	f003 030f 	and.w	r3, r3, #15
 80028ce:	490a      	ldr	r1, [pc, #40]	; (80028f8 <HAL_RCC_ClockConfig+0x1c0>)
 80028d0:	5ccb      	ldrb	r3, [r1, r3]
 80028d2:	fa22 f303 	lsr.w	r3, r2, r3
 80028d6:	4a09      	ldr	r2, [pc, #36]	; (80028fc <HAL_RCC_ClockConfig+0x1c4>)
 80028d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80028da:	4b09      	ldr	r3, [pc, #36]	; (8002900 <HAL_RCC_ClockConfig+0x1c8>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4618      	mov	r0, r3
 80028e0:	f7fe fb2c 	bl	8000f3c <HAL_InitTick>

  return HAL_OK;
 80028e4:	2300      	movs	r3, #0
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3710      	adds	r7, #16
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	40023c00 	.word	0x40023c00
 80028f4:	40023800 	.word	0x40023800
 80028f8:	08004008 	.word	0x08004008
 80028fc:	20000000 	.word	0x20000000
 8002900:	20000004 	.word	0x20000004

08002904 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002904:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002908:	b094      	sub	sp, #80	; 0x50
 800290a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800290c:	2300      	movs	r3, #0
 800290e:	647b      	str	r3, [r7, #68]	; 0x44
 8002910:	2300      	movs	r3, #0
 8002912:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002914:	2300      	movs	r3, #0
 8002916:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002918:	2300      	movs	r3, #0
 800291a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800291c:	4b79      	ldr	r3, [pc, #484]	; (8002b04 <HAL_RCC_GetSysClockFreq+0x200>)
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	f003 030c 	and.w	r3, r3, #12
 8002924:	2b08      	cmp	r3, #8
 8002926:	d00d      	beq.n	8002944 <HAL_RCC_GetSysClockFreq+0x40>
 8002928:	2b08      	cmp	r3, #8
 800292a:	f200 80e1 	bhi.w	8002af0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800292e:	2b00      	cmp	r3, #0
 8002930:	d002      	beq.n	8002938 <HAL_RCC_GetSysClockFreq+0x34>
 8002932:	2b04      	cmp	r3, #4
 8002934:	d003      	beq.n	800293e <HAL_RCC_GetSysClockFreq+0x3a>
 8002936:	e0db      	b.n	8002af0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002938:	4b73      	ldr	r3, [pc, #460]	; (8002b08 <HAL_RCC_GetSysClockFreq+0x204>)
 800293a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800293c:	e0db      	b.n	8002af6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800293e:	4b73      	ldr	r3, [pc, #460]	; (8002b0c <HAL_RCC_GetSysClockFreq+0x208>)
 8002940:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002942:	e0d8      	b.n	8002af6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002944:	4b6f      	ldr	r3, [pc, #444]	; (8002b04 <HAL_RCC_GetSysClockFreq+0x200>)
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800294c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800294e:	4b6d      	ldr	r3, [pc, #436]	; (8002b04 <HAL_RCC_GetSysClockFreq+0x200>)
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d063      	beq.n	8002a22 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800295a:	4b6a      	ldr	r3, [pc, #424]	; (8002b04 <HAL_RCC_GetSysClockFreq+0x200>)
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	099b      	lsrs	r3, r3, #6
 8002960:	2200      	movs	r2, #0
 8002962:	63bb      	str	r3, [r7, #56]	; 0x38
 8002964:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002968:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800296c:	633b      	str	r3, [r7, #48]	; 0x30
 800296e:	2300      	movs	r3, #0
 8002970:	637b      	str	r3, [r7, #52]	; 0x34
 8002972:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002976:	4622      	mov	r2, r4
 8002978:	462b      	mov	r3, r5
 800297a:	f04f 0000 	mov.w	r0, #0
 800297e:	f04f 0100 	mov.w	r1, #0
 8002982:	0159      	lsls	r1, r3, #5
 8002984:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002988:	0150      	lsls	r0, r2, #5
 800298a:	4602      	mov	r2, r0
 800298c:	460b      	mov	r3, r1
 800298e:	4621      	mov	r1, r4
 8002990:	1a51      	subs	r1, r2, r1
 8002992:	6139      	str	r1, [r7, #16]
 8002994:	4629      	mov	r1, r5
 8002996:	eb63 0301 	sbc.w	r3, r3, r1
 800299a:	617b      	str	r3, [r7, #20]
 800299c:	f04f 0200 	mov.w	r2, #0
 80029a0:	f04f 0300 	mov.w	r3, #0
 80029a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80029a8:	4659      	mov	r1, fp
 80029aa:	018b      	lsls	r3, r1, #6
 80029ac:	4651      	mov	r1, sl
 80029ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80029b2:	4651      	mov	r1, sl
 80029b4:	018a      	lsls	r2, r1, #6
 80029b6:	4651      	mov	r1, sl
 80029b8:	ebb2 0801 	subs.w	r8, r2, r1
 80029bc:	4659      	mov	r1, fp
 80029be:	eb63 0901 	sbc.w	r9, r3, r1
 80029c2:	f04f 0200 	mov.w	r2, #0
 80029c6:	f04f 0300 	mov.w	r3, #0
 80029ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80029ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80029d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80029d6:	4690      	mov	r8, r2
 80029d8:	4699      	mov	r9, r3
 80029da:	4623      	mov	r3, r4
 80029dc:	eb18 0303 	adds.w	r3, r8, r3
 80029e0:	60bb      	str	r3, [r7, #8]
 80029e2:	462b      	mov	r3, r5
 80029e4:	eb49 0303 	adc.w	r3, r9, r3
 80029e8:	60fb      	str	r3, [r7, #12]
 80029ea:	f04f 0200 	mov.w	r2, #0
 80029ee:	f04f 0300 	mov.w	r3, #0
 80029f2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80029f6:	4629      	mov	r1, r5
 80029f8:	024b      	lsls	r3, r1, #9
 80029fa:	4621      	mov	r1, r4
 80029fc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002a00:	4621      	mov	r1, r4
 8002a02:	024a      	lsls	r2, r1, #9
 8002a04:	4610      	mov	r0, r2
 8002a06:	4619      	mov	r1, r3
 8002a08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a0e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002a10:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002a14:	f7fd fbd8 	bl	80001c8 <__aeabi_uldivmod>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	460b      	mov	r3, r1
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a20:	e058      	b.n	8002ad4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a22:	4b38      	ldr	r3, [pc, #224]	; (8002b04 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	099b      	lsrs	r3, r3, #6
 8002a28:	2200      	movs	r2, #0
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	4611      	mov	r1, r2
 8002a2e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002a32:	623b      	str	r3, [r7, #32]
 8002a34:	2300      	movs	r3, #0
 8002a36:	627b      	str	r3, [r7, #36]	; 0x24
 8002a38:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002a3c:	4642      	mov	r2, r8
 8002a3e:	464b      	mov	r3, r9
 8002a40:	f04f 0000 	mov.w	r0, #0
 8002a44:	f04f 0100 	mov.w	r1, #0
 8002a48:	0159      	lsls	r1, r3, #5
 8002a4a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a4e:	0150      	lsls	r0, r2, #5
 8002a50:	4602      	mov	r2, r0
 8002a52:	460b      	mov	r3, r1
 8002a54:	4641      	mov	r1, r8
 8002a56:	ebb2 0a01 	subs.w	sl, r2, r1
 8002a5a:	4649      	mov	r1, r9
 8002a5c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002a60:	f04f 0200 	mov.w	r2, #0
 8002a64:	f04f 0300 	mov.w	r3, #0
 8002a68:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002a6c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002a70:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002a74:	ebb2 040a 	subs.w	r4, r2, sl
 8002a78:	eb63 050b 	sbc.w	r5, r3, fp
 8002a7c:	f04f 0200 	mov.w	r2, #0
 8002a80:	f04f 0300 	mov.w	r3, #0
 8002a84:	00eb      	lsls	r3, r5, #3
 8002a86:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a8a:	00e2      	lsls	r2, r4, #3
 8002a8c:	4614      	mov	r4, r2
 8002a8e:	461d      	mov	r5, r3
 8002a90:	4643      	mov	r3, r8
 8002a92:	18e3      	adds	r3, r4, r3
 8002a94:	603b      	str	r3, [r7, #0]
 8002a96:	464b      	mov	r3, r9
 8002a98:	eb45 0303 	adc.w	r3, r5, r3
 8002a9c:	607b      	str	r3, [r7, #4]
 8002a9e:	f04f 0200 	mov.w	r2, #0
 8002aa2:	f04f 0300 	mov.w	r3, #0
 8002aa6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002aaa:	4629      	mov	r1, r5
 8002aac:	028b      	lsls	r3, r1, #10
 8002aae:	4621      	mov	r1, r4
 8002ab0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ab4:	4621      	mov	r1, r4
 8002ab6:	028a      	lsls	r2, r1, #10
 8002ab8:	4610      	mov	r0, r2
 8002aba:	4619      	mov	r1, r3
 8002abc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002abe:	2200      	movs	r2, #0
 8002ac0:	61bb      	str	r3, [r7, #24]
 8002ac2:	61fa      	str	r2, [r7, #28]
 8002ac4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ac8:	f7fd fb7e 	bl	80001c8 <__aeabi_uldivmod>
 8002acc:	4602      	mov	r2, r0
 8002ace:	460b      	mov	r3, r1
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ad4:	4b0b      	ldr	r3, [pc, #44]	; (8002b04 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	0c1b      	lsrs	r3, r3, #16
 8002ada:	f003 0303 	and.w	r3, r3, #3
 8002ade:	3301      	adds	r3, #1
 8002ae0:	005b      	lsls	r3, r3, #1
 8002ae2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002ae4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ae6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ae8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002aee:	e002      	b.n	8002af6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002af0:	4b05      	ldr	r3, [pc, #20]	; (8002b08 <HAL_RCC_GetSysClockFreq+0x204>)
 8002af2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002af4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002af6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	3750      	adds	r7, #80	; 0x50
 8002afc:	46bd      	mov	sp, r7
 8002afe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b02:	bf00      	nop
 8002b04:	40023800 	.word	0x40023800
 8002b08:	00f42400 	.word	0x00f42400
 8002b0c:	007a1200 	.word	0x007a1200

08002b10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b10:	b480      	push	{r7}
 8002b12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b14:	4b03      	ldr	r3, [pc, #12]	; (8002b24 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b16:	681b      	ldr	r3, [r3, #0]
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr
 8002b22:	bf00      	nop
 8002b24:	20000000 	.word	0x20000000

08002b28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002b2c:	f7ff fff0 	bl	8002b10 <HAL_RCC_GetHCLKFreq>
 8002b30:	4602      	mov	r2, r0
 8002b32:	4b05      	ldr	r3, [pc, #20]	; (8002b48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	0a9b      	lsrs	r3, r3, #10
 8002b38:	f003 0307 	and.w	r3, r3, #7
 8002b3c:	4903      	ldr	r1, [pc, #12]	; (8002b4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b3e:	5ccb      	ldrb	r3, [r1, r3]
 8002b40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	40023800 	.word	0x40023800
 8002b4c:	08004018 	.word	0x08004018

08002b50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002b54:	f7ff ffdc 	bl	8002b10 <HAL_RCC_GetHCLKFreq>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	4b05      	ldr	r3, [pc, #20]	; (8002b70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	0b5b      	lsrs	r3, r3, #13
 8002b60:	f003 0307 	and.w	r3, r3, #7
 8002b64:	4903      	ldr	r1, [pc, #12]	; (8002b74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b66:	5ccb      	ldrb	r3, [r1, r3]
 8002b68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	40023800 	.word	0x40023800
 8002b74:	08004018 	.word	0x08004018

08002b78 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d101      	bne.n	8002b8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e03f      	b.n	8002c0a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d106      	bne.n	8002ba4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f7fd fff0 	bl	8000b84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2224      	movs	r2, #36	; 0x24
 8002ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	68da      	ldr	r2, [r3, #12]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002bba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f000 ff69 	bl	8003a94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	691a      	ldr	r2, [r3, #16]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002bd0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	695a      	ldr	r2, [r3, #20]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002be0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	68da      	ldr	r2, [r3, #12]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002bf0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2220      	movs	r2, #32
 8002bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2220      	movs	r2, #32
 8002c04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c08:	2300      	movs	r3, #0
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3708      	adds	r7, #8
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}

08002c12 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c12:	b580      	push	{r7, lr}
 8002c14:	b08a      	sub	sp, #40	; 0x28
 8002c16:	af02      	add	r7, sp, #8
 8002c18:	60f8      	str	r0, [r7, #12]
 8002c1a:	60b9      	str	r1, [r7, #8]
 8002c1c:	603b      	str	r3, [r7, #0]
 8002c1e:	4613      	mov	r3, r2
 8002c20:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002c22:	2300      	movs	r3, #0
 8002c24:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	2b20      	cmp	r3, #32
 8002c30:	d17c      	bne.n	8002d2c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d002      	beq.n	8002c3e <HAL_UART_Transmit+0x2c>
 8002c38:	88fb      	ldrh	r3, [r7, #6]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d101      	bne.n	8002c42 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e075      	b.n	8002d2e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d101      	bne.n	8002c50 <HAL_UART_Transmit+0x3e>
 8002c4c:	2302      	movs	r3, #2
 8002c4e:	e06e      	b.n	8002d2e <HAL_UART_Transmit+0x11c>
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2221      	movs	r2, #33	; 0x21
 8002c62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c66:	f7fe f9ad 	bl	8000fc4 <HAL_GetTick>
 8002c6a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	88fa      	ldrh	r2, [r7, #6]
 8002c70:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	88fa      	ldrh	r2, [r7, #6]
 8002c76:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c80:	d108      	bne.n	8002c94 <HAL_UART_Transmit+0x82>
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	691b      	ldr	r3, [r3, #16]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d104      	bne.n	8002c94 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	61bb      	str	r3, [r7, #24]
 8002c92:	e003      	b.n	8002c9c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002ca4:	e02a      	b.n	8002cfc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	9300      	str	r3, [sp, #0]
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	2200      	movs	r2, #0
 8002cae:	2180      	movs	r1, #128	; 0x80
 8002cb0:	68f8      	ldr	r0, [r7, #12]
 8002cb2:	f000 fc21 	bl	80034f8 <UART_WaitOnFlagUntilTimeout>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d001      	beq.n	8002cc0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	e036      	b.n	8002d2e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d10b      	bne.n	8002cde <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002cc6:	69bb      	ldr	r3, [r7, #24]
 8002cc8:	881b      	ldrh	r3, [r3, #0]
 8002cca:	461a      	mov	r2, r3
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002cd4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002cd6:	69bb      	ldr	r3, [r7, #24]
 8002cd8:	3302      	adds	r3, #2
 8002cda:	61bb      	str	r3, [r7, #24]
 8002cdc:	e007      	b.n	8002cee <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	781a      	ldrb	r2, [r3, #0]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	3301      	adds	r3, #1
 8002cec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	3b01      	subs	r3, #1
 8002cf6:	b29a      	uxth	r2, r3
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d1cf      	bne.n	8002ca6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	9300      	str	r3, [sp, #0]
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	2140      	movs	r1, #64	; 0x40
 8002d10:	68f8      	ldr	r0, [r7, #12]
 8002d12:	f000 fbf1 	bl	80034f8 <UART_WaitOnFlagUntilTimeout>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d001      	beq.n	8002d20 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	e006      	b.n	8002d2e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2220      	movs	r2, #32
 8002d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	e000      	b.n	8002d2e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002d2c:	2302      	movs	r3, #2
  }
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3720      	adds	r7, #32
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}

08002d36 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002d36:	b580      	push	{r7, lr}
 8002d38:	b084      	sub	sp, #16
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	60f8      	str	r0, [r7, #12]
 8002d3e:	60b9      	str	r1, [r7, #8]
 8002d40:	4613      	mov	r3, r2
 8002d42:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	2b20      	cmp	r3, #32
 8002d4e:	d11d      	bne.n	8002d8c <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d002      	beq.n	8002d5c <HAL_UART_Receive_DMA+0x26>
 8002d56:	88fb      	ldrh	r3, [r7, #6]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d101      	bne.n	8002d60 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e016      	b.n	8002d8e <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d101      	bne.n	8002d6e <HAL_UART_Receive_DMA+0x38>
 8002d6a:	2302      	movs	r3, #2
 8002d6c:	e00f      	b.n	8002d8e <HAL_UART_Receive_DMA+0x58>
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2201      	movs	r2, #1
 8002d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8002d7c:	88fb      	ldrh	r3, [r7, #6]
 8002d7e:	461a      	mov	r2, r3
 8002d80:	68b9      	ldr	r1, [r7, #8]
 8002d82:	68f8      	ldr	r0, [r7, #12]
 8002d84:	f000 fc26 	bl	80035d4 <UART_Start_Receive_DMA>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	e000      	b.n	8002d8e <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002d8c:	2302      	movs	r3, #2
  }
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3710      	adds	r7, #16
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
	...

08002d98 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b0ba      	sub	sp, #232	; 0xe8
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	695b      	ldr	r3, [r3, #20]
 8002dba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002dca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dce:	f003 030f 	and.w	r3, r3, #15
 8002dd2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002dd6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d10f      	bne.n	8002dfe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002dde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002de2:	f003 0320 	and.w	r3, r3, #32
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d009      	beq.n	8002dfe <HAL_UART_IRQHandler+0x66>
 8002dea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002dee:	f003 0320 	and.w	r3, r3, #32
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d003      	beq.n	8002dfe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f000 fd91 	bl	800391e <UART_Receive_IT>
      return;
 8002dfc:	e256      	b.n	80032ac <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002dfe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	f000 80de 	beq.w	8002fc4 <HAL_UART_IRQHandler+0x22c>
 8002e08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e0c:	f003 0301 	and.w	r3, r3, #1
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d106      	bne.n	8002e22 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002e14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e18:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	f000 80d1 	beq.w	8002fc4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002e22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e26:	f003 0301 	and.w	r3, r3, #1
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d00b      	beq.n	8002e46 <HAL_UART_IRQHandler+0xae>
 8002e2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d005      	beq.n	8002e46 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3e:	f043 0201 	orr.w	r2, r3, #1
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e4a:	f003 0304 	and.w	r3, r3, #4
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d00b      	beq.n	8002e6a <HAL_UART_IRQHandler+0xd2>
 8002e52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e56:	f003 0301 	and.w	r3, r3, #1
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d005      	beq.n	8002e6a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e62:	f043 0202 	orr.w	r2, r3, #2
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e6e:	f003 0302 	and.w	r3, r3, #2
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d00b      	beq.n	8002e8e <HAL_UART_IRQHandler+0xf6>
 8002e76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e7a:	f003 0301 	and.w	r3, r3, #1
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d005      	beq.n	8002e8e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e86:	f043 0204 	orr.w	r2, r3, #4
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002e8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e92:	f003 0308 	and.w	r3, r3, #8
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d011      	beq.n	8002ebe <HAL_UART_IRQHandler+0x126>
 8002e9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e9e:	f003 0320 	and.w	r3, r3, #32
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d105      	bne.n	8002eb2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002ea6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002eaa:	f003 0301 	and.w	r3, r3, #1
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d005      	beq.n	8002ebe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb6:	f043 0208 	orr.w	r2, r3, #8
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	f000 81ed 	beq.w	80032a2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ec8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ecc:	f003 0320 	and.w	r3, r3, #32
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d008      	beq.n	8002ee6 <HAL_UART_IRQHandler+0x14e>
 8002ed4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ed8:	f003 0320 	and.w	r3, r3, #32
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d002      	beq.n	8002ee6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	f000 fd1c 	bl	800391e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	695b      	ldr	r3, [r3, #20]
 8002eec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ef0:	2b40      	cmp	r3, #64	; 0x40
 8002ef2:	bf0c      	ite	eq
 8002ef4:	2301      	moveq	r3, #1
 8002ef6:	2300      	movne	r3, #0
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f02:	f003 0308 	and.w	r3, r3, #8
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d103      	bne.n	8002f12 <HAL_UART_IRQHandler+0x17a>
 8002f0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d04f      	beq.n	8002fb2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f000 fc24 	bl	8003760 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	695b      	ldr	r3, [r3, #20]
 8002f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f22:	2b40      	cmp	r3, #64	; 0x40
 8002f24:	d141      	bne.n	8002faa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	3314      	adds	r3, #20
 8002f2c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f30:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002f34:	e853 3f00 	ldrex	r3, [r3]
 8002f38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002f3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002f40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	3314      	adds	r3, #20
 8002f4e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002f52:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002f56:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f5a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002f5e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002f62:	e841 2300 	strex	r3, r2, [r1]
 8002f66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002f6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d1d9      	bne.n	8002f26 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d013      	beq.n	8002fa2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f7e:	4a7d      	ldr	r2, [pc, #500]	; (8003174 <HAL_UART_IRQHandler+0x3dc>)
 8002f80:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f86:	4618      	mov	r0, r3
 8002f88:	f7fe fd36 	bl	80019f8 <HAL_DMA_Abort_IT>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d016      	beq.n	8002fc0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002f9c:	4610      	mov	r0, r2
 8002f9e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fa0:	e00e      	b.n	8002fc0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f000 f99a 	bl	80032dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fa8:	e00a      	b.n	8002fc0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f000 f996 	bl	80032dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fb0:	e006      	b.n	8002fc0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f000 f992 	bl	80032dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002fbe:	e170      	b.n	80032a2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fc0:	bf00      	nop
    return;
 8002fc2:	e16e      	b.n	80032a2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	f040 814a 	bne.w	8003262 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002fce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fd2:	f003 0310 	and.w	r3, r3, #16
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	f000 8143 	beq.w	8003262 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002fdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fe0:	f003 0310 	and.w	r3, r3, #16
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	f000 813c 	beq.w	8003262 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002fea:	2300      	movs	r3, #0
 8002fec:	60bb      	str	r3, [r7, #8]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	60bb      	str	r3, [r7, #8]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	60bb      	str	r3, [r7, #8]
 8002ffe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	695b      	ldr	r3, [r3, #20]
 8003006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800300a:	2b40      	cmp	r3, #64	; 0x40
 800300c:	f040 80b4 	bne.w	8003178 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800301c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003020:	2b00      	cmp	r3, #0
 8003022:	f000 8140 	beq.w	80032a6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800302a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800302e:	429a      	cmp	r2, r3
 8003030:	f080 8139 	bcs.w	80032a6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800303a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003040:	69db      	ldr	r3, [r3, #28]
 8003042:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003046:	f000 8088 	beq.w	800315a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	330c      	adds	r3, #12
 8003050:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003054:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003058:	e853 3f00 	ldrex	r3, [r3]
 800305c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003060:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003064:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003068:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	330c      	adds	r3, #12
 8003072:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003076:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800307a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800307e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003082:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003086:	e841 2300 	strex	r3, r2, [r1]
 800308a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800308e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003092:	2b00      	cmp	r3, #0
 8003094:	d1d9      	bne.n	800304a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	3314      	adds	r3, #20
 800309c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800309e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030a0:	e853 3f00 	ldrex	r3, [r3]
 80030a4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80030a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80030a8:	f023 0301 	bic.w	r3, r3, #1
 80030ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	3314      	adds	r3, #20
 80030b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80030ba:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80030be:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030c0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80030c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80030c6:	e841 2300 	strex	r3, r2, [r1]
 80030ca:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80030cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d1e1      	bne.n	8003096 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	3314      	adds	r3, #20
 80030d8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80030dc:	e853 3f00 	ldrex	r3, [r3]
 80030e0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80030e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	3314      	adds	r3, #20
 80030f2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80030f6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80030f8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030fa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80030fc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80030fe:	e841 2300 	strex	r3, r2, [r1]
 8003102:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003104:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003106:	2b00      	cmp	r3, #0
 8003108:	d1e3      	bne.n	80030d2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2220      	movs	r2, #32
 800310e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	330c      	adds	r3, #12
 800311e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003120:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003122:	e853 3f00 	ldrex	r3, [r3]
 8003126:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003128:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800312a:	f023 0310 	bic.w	r3, r3, #16
 800312e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	330c      	adds	r3, #12
 8003138:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800313c:	65ba      	str	r2, [r7, #88]	; 0x58
 800313e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003140:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003142:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003144:	e841 2300 	strex	r3, r2, [r1]
 8003148:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800314a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800314c:	2b00      	cmp	r3, #0
 800314e:	d1e3      	bne.n	8003118 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003154:	4618      	mov	r0, r3
 8003156:	f7fe fbdf 	bl	8001918 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003162:	b29b      	uxth	r3, r3
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	b29b      	uxth	r3, r3
 8003168:	4619      	mov	r1, r3
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f000 f8c0 	bl	80032f0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003170:	e099      	b.n	80032a6 <HAL_UART_IRQHandler+0x50e>
 8003172:	bf00      	nop
 8003174:	08003827 	.word	0x08003827
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003180:	b29b      	uxth	r3, r3
 8003182:	1ad3      	subs	r3, r2, r3
 8003184:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800318c:	b29b      	uxth	r3, r3
 800318e:	2b00      	cmp	r3, #0
 8003190:	f000 808b 	beq.w	80032aa <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003194:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003198:	2b00      	cmp	r3, #0
 800319a:	f000 8086 	beq.w	80032aa <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	330c      	adds	r3, #12
 80031a4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031a8:	e853 3f00 	ldrex	r3, [r3]
 80031ac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80031ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80031b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	330c      	adds	r3, #12
 80031be:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80031c2:	647a      	str	r2, [r7, #68]	; 0x44
 80031c4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031c6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80031c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80031ca:	e841 2300 	strex	r3, r2, [r1]
 80031ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80031d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d1e3      	bne.n	800319e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	3314      	adds	r3, #20
 80031dc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e0:	e853 3f00 	ldrex	r3, [r3]
 80031e4:	623b      	str	r3, [r7, #32]
   return(result);
 80031e6:	6a3b      	ldr	r3, [r7, #32]
 80031e8:	f023 0301 	bic.w	r3, r3, #1
 80031ec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	3314      	adds	r3, #20
 80031f6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80031fa:	633a      	str	r2, [r7, #48]	; 0x30
 80031fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003200:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003202:	e841 2300 	strex	r3, r2, [r1]
 8003206:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800320a:	2b00      	cmp	r3, #0
 800320c:	d1e3      	bne.n	80031d6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2220      	movs	r2, #32
 8003212:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	330c      	adds	r3, #12
 8003222:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	e853 3f00 	ldrex	r3, [r3]
 800322a:	60fb      	str	r3, [r7, #12]
   return(result);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f023 0310 	bic.w	r3, r3, #16
 8003232:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	330c      	adds	r3, #12
 800323c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003240:	61fa      	str	r2, [r7, #28]
 8003242:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003244:	69b9      	ldr	r1, [r7, #24]
 8003246:	69fa      	ldr	r2, [r7, #28]
 8003248:	e841 2300 	strex	r3, r2, [r1]
 800324c:	617b      	str	r3, [r7, #20]
   return(result);
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d1e3      	bne.n	800321c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003254:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003258:	4619      	mov	r1, r3
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f000 f848 	bl	80032f0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003260:	e023      	b.n	80032aa <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003262:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003266:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800326a:	2b00      	cmp	r3, #0
 800326c:	d009      	beq.n	8003282 <HAL_UART_IRQHandler+0x4ea>
 800326e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003276:	2b00      	cmp	r3, #0
 8003278:	d003      	beq.n	8003282 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f000 fae7 	bl	800384e <UART_Transmit_IT>
    return;
 8003280:	e014      	b.n	80032ac <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003282:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800328a:	2b00      	cmp	r3, #0
 800328c:	d00e      	beq.n	80032ac <HAL_UART_IRQHandler+0x514>
 800328e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003296:	2b00      	cmp	r3, #0
 8003298:	d008      	beq.n	80032ac <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f000 fb27 	bl	80038ee <UART_EndTransmit_IT>
    return;
 80032a0:	e004      	b.n	80032ac <HAL_UART_IRQHandler+0x514>
    return;
 80032a2:	bf00      	nop
 80032a4:	e002      	b.n	80032ac <HAL_UART_IRQHandler+0x514>
      return;
 80032a6:	bf00      	nop
 80032a8:	e000      	b.n	80032ac <HAL_UART_IRQHandler+0x514>
      return;
 80032aa:	bf00      	nop
  }
}
 80032ac:	37e8      	adds	r7, #232	; 0xe8
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop

080032b4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80032bc:	bf00      	nop
 80032be:	370c      	adds	r7, #12
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr

080032c8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b083      	sub	sp, #12
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80032d0:	bf00      	nop
 80032d2:	370c      	adds	r7, #12
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr

080032dc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80032dc:	b480      	push	{r7}
 80032de:	b083      	sub	sp, #12
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80032e4:	bf00      	nop
 80032e6:	370c      	adds	r7, #12
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr

080032f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	460b      	mov	r3, r1
 80032fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80032fc:	bf00      	nop
 80032fe:	370c      	adds	r7, #12
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr

08003308 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b09c      	sub	sp, #112	; 0x70
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003314:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003320:	2b00      	cmp	r3, #0
 8003322:	d172      	bne.n	800340a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8003324:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003326:	2200      	movs	r2, #0
 8003328:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800332a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	330c      	adds	r3, #12
 8003330:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003332:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003334:	e853 3f00 	ldrex	r3, [r3]
 8003338:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800333a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800333c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003340:	66bb      	str	r3, [r7, #104]	; 0x68
 8003342:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	330c      	adds	r3, #12
 8003348:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800334a:	65ba      	str	r2, [r7, #88]	; 0x58
 800334c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800334e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003350:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003352:	e841 2300 	strex	r3, r2, [r1]
 8003356:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003358:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800335a:	2b00      	cmp	r3, #0
 800335c:	d1e5      	bne.n	800332a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800335e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	3314      	adds	r3, #20
 8003364:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003368:	e853 3f00 	ldrex	r3, [r3]
 800336c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800336e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003370:	f023 0301 	bic.w	r3, r3, #1
 8003374:	667b      	str	r3, [r7, #100]	; 0x64
 8003376:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	3314      	adds	r3, #20
 800337c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800337e:	647a      	str	r2, [r7, #68]	; 0x44
 8003380:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003382:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003384:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003386:	e841 2300 	strex	r3, r2, [r1]
 800338a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800338c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800338e:	2b00      	cmp	r3, #0
 8003390:	d1e5      	bne.n	800335e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003392:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	3314      	adds	r3, #20
 8003398:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800339a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339c:	e853 3f00 	ldrex	r3, [r3]
 80033a0:	623b      	str	r3, [r7, #32]
   return(result);
 80033a2:	6a3b      	ldr	r3, [r7, #32]
 80033a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033a8:	663b      	str	r3, [r7, #96]	; 0x60
 80033aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	3314      	adds	r3, #20
 80033b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80033b2:	633a      	str	r2, [r7, #48]	; 0x30
 80033b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80033b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033ba:	e841 2300 	strex	r3, r2, [r1]
 80033be:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80033c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d1e5      	bne.n	8003392 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80033c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033c8:	2220      	movs	r2, #32
 80033ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d119      	bne.n	800340a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	330c      	adds	r3, #12
 80033dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	e853 3f00 	ldrex	r3, [r3]
 80033e4:	60fb      	str	r3, [r7, #12]
   return(result);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	f023 0310 	bic.w	r3, r3, #16
 80033ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80033ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	330c      	adds	r3, #12
 80033f4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80033f6:	61fa      	str	r2, [r7, #28]
 80033f8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033fa:	69b9      	ldr	r1, [r7, #24]
 80033fc:	69fa      	ldr	r2, [r7, #28]
 80033fe:	e841 2300 	strex	r3, r2, [r1]
 8003402:	617b      	str	r3, [r7, #20]
   return(result);
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d1e5      	bne.n	80033d6 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800340a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800340c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340e:	2b01      	cmp	r3, #1
 8003410:	d106      	bne.n	8003420 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003412:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003414:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003416:	4619      	mov	r1, r3
 8003418:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800341a:	f7ff ff69 	bl	80032f0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800341e:	e002      	b.n	8003426 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8003420:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003422:	f7fd f8ad 	bl	8000580 <HAL_UART_RxCpltCallback>
}
 8003426:	bf00      	nop
 8003428:	3770      	adds	r7, #112	; 0x70
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}

0800342e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800342e:	b580      	push	{r7, lr}
 8003430:	b084      	sub	sp, #16
 8003432:	af00      	add	r7, sp, #0
 8003434:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800343a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003440:	2b01      	cmp	r3, #1
 8003442:	d108      	bne.n	8003456 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003448:	085b      	lsrs	r3, r3, #1
 800344a:	b29b      	uxth	r3, r3
 800344c:	4619      	mov	r1, r3
 800344e:	68f8      	ldr	r0, [r7, #12]
 8003450:	f7ff ff4e 	bl	80032f0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003454:	e002      	b.n	800345c <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8003456:	68f8      	ldr	r0, [r7, #12]
 8003458:	f7ff ff36 	bl	80032c8 <HAL_UART_RxHalfCpltCallback>
}
 800345c:	bf00      	nop
 800345e:	3710      	adds	r7, #16
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}

08003464 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b084      	sub	sp, #16
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800346c:	2300      	movs	r3, #0
 800346e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003474:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	695b      	ldr	r3, [r3, #20]
 800347c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003480:	2b80      	cmp	r3, #128	; 0x80
 8003482:	bf0c      	ite	eq
 8003484:	2301      	moveq	r3, #1
 8003486:	2300      	movne	r3, #0
 8003488:	b2db      	uxtb	r3, r3
 800348a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003492:	b2db      	uxtb	r3, r3
 8003494:	2b21      	cmp	r3, #33	; 0x21
 8003496:	d108      	bne.n	80034aa <UART_DMAError+0x46>
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d005      	beq.n	80034aa <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	2200      	movs	r2, #0
 80034a2:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80034a4:	68b8      	ldr	r0, [r7, #8]
 80034a6:	f000 f933 	bl	8003710 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	695b      	ldr	r3, [r3, #20]
 80034b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034b4:	2b40      	cmp	r3, #64	; 0x40
 80034b6:	bf0c      	ite	eq
 80034b8:	2301      	moveq	r3, #1
 80034ba:	2300      	movne	r3, #0
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	2b22      	cmp	r3, #34	; 0x22
 80034ca:	d108      	bne.n	80034de <UART_DMAError+0x7a>
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d005      	beq.n	80034de <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	2200      	movs	r2, #0
 80034d6:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80034d8:	68b8      	ldr	r0, [r7, #8]
 80034da:	f000 f941 	bl	8003760 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e2:	f043 0210 	orr.w	r2, r3, #16
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80034ea:	68b8      	ldr	r0, [r7, #8]
 80034ec:	f7ff fef6 	bl	80032dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80034f0:	bf00      	nop
 80034f2:	3710      	adds	r7, #16
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}

080034f8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b090      	sub	sp, #64	; 0x40
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	60f8      	str	r0, [r7, #12]
 8003500:	60b9      	str	r1, [r7, #8]
 8003502:	603b      	str	r3, [r7, #0]
 8003504:	4613      	mov	r3, r2
 8003506:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003508:	e050      	b.n	80035ac <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800350a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800350c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003510:	d04c      	beq.n	80035ac <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003512:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003514:	2b00      	cmp	r3, #0
 8003516:	d007      	beq.n	8003528 <UART_WaitOnFlagUntilTimeout+0x30>
 8003518:	f7fd fd54 	bl	8000fc4 <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003524:	429a      	cmp	r2, r3
 8003526:	d241      	bcs.n	80035ac <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	330c      	adds	r3, #12
 800352e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003532:	e853 3f00 	ldrex	r3, [r3]
 8003536:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800353e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	330c      	adds	r3, #12
 8003546:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003548:	637a      	str	r2, [r7, #52]	; 0x34
 800354a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800354c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800354e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003550:	e841 2300 	strex	r3, r2, [r1]
 8003554:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003558:	2b00      	cmp	r3, #0
 800355a:	d1e5      	bne.n	8003528 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	3314      	adds	r3, #20
 8003562:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	e853 3f00 	ldrex	r3, [r3]
 800356a:	613b      	str	r3, [r7, #16]
   return(result);
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	f023 0301 	bic.w	r3, r3, #1
 8003572:	63bb      	str	r3, [r7, #56]	; 0x38
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	3314      	adds	r3, #20
 800357a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800357c:	623a      	str	r2, [r7, #32]
 800357e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003580:	69f9      	ldr	r1, [r7, #28]
 8003582:	6a3a      	ldr	r2, [r7, #32]
 8003584:	e841 2300 	strex	r3, r2, [r1]
 8003588:	61bb      	str	r3, [r7, #24]
   return(result);
 800358a:	69bb      	ldr	r3, [r7, #24]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d1e5      	bne.n	800355c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2220      	movs	r2, #32
 8003594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2220      	movs	r2, #32
 800359c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2200      	movs	r2, #0
 80035a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80035a8:	2303      	movs	r3, #3
 80035aa:	e00f      	b.n	80035cc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	4013      	ands	r3, r2
 80035b6:	68ba      	ldr	r2, [r7, #8]
 80035b8:	429a      	cmp	r2, r3
 80035ba:	bf0c      	ite	eq
 80035bc:	2301      	moveq	r3, #1
 80035be:	2300      	movne	r3, #0
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	461a      	mov	r2, r3
 80035c4:	79fb      	ldrb	r3, [r7, #7]
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d09f      	beq.n	800350a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80035ca:	2300      	movs	r3, #0
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3740      	adds	r7, #64	; 0x40
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b098      	sub	sp, #96	; 0x60
 80035d8:	af00      	add	r7, sp, #0
 80035da:	60f8      	str	r0, [r7, #12]
 80035dc:	60b9      	str	r1, [r7, #8]
 80035de:	4613      	mov	r3, r2
 80035e0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80035e2:	68ba      	ldr	r2, [r7, #8]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	88fa      	ldrh	r2, [r7, #6]
 80035ec:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2200      	movs	r2, #0
 80035f2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2222      	movs	r2, #34	; 0x22
 80035f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003600:	4a40      	ldr	r2, [pc, #256]	; (8003704 <UART_Start_Receive_DMA+0x130>)
 8003602:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003608:	4a3f      	ldr	r2, [pc, #252]	; (8003708 <UART_Start_Receive_DMA+0x134>)
 800360a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003610:	4a3e      	ldr	r2, [pc, #248]	; (800370c <UART_Start_Receive_DMA+0x138>)
 8003612:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003618:	2200      	movs	r2, #0
 800361a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800361c:	f107 0308 	add.w	r3, r7, #8
 8003620:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	3304      	adds	r3, #4
 800362c:	4619      	mov	r1, r3
 800362e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	88fb      	ldrh	r3, [r7, #6]
 8003634:	f7fe f918 	bl	8001868 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003638:	2300      	movs	r3, #0
 800363a:	613b      	str	r3, [r7, #16]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	613b      	str	r3, [r7, #16]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	613b      	str	r3, [r7, #16]
 800364c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2200      	movs	r2, #0
 8003652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	691b      	ldr	r3, [r3, #16]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d019      	beq.n	8003692 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	330c      	adds	r3, #12
 8003664:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003666:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003668:	e853 3f00 	ldrex	r3, [r3]
 800366c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800366e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003670:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003674:	65bb      	str	r3, [r7, #88]	; 0x58
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	330c      	adds	r3, #12
 800367c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800367e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003680:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003682:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003684:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003686:	e841 2300 	strex	r3, r2, [r1]
 800368a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800368c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800368e:	2b00      	cmp	r3, #0
 8003690:	d1e5      	bne.n	800365e <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	3314      	adds	r3, #20
 8003698:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800369a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800369c:	e853 3f00 	ldrex	r3, [r3]
 80036a0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80036a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036a4:	f043 0301 	orr.w	r3, r3, #1
 80036a8:	657b      	str	r3, [r7, #84]	; 0x54
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	3314      	adds	r3, #20
 80036b0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80036b2:	63ba      	str	r2, [r7, #56]	; 0x38
 80036b4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036b6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80036b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80036ba:	e841 2300 	strex	r3, r2, [r1]
 80036be:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80036c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d1e5      	bne.n	8003692 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	3314      	adds	r3, #20
 80036cc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036ce:	69bb      	ldr	r3, [r7, #24]
 80036d0:	e853 3f00 	ldrex	r3, [r3]
 80036d4:	617b      	str	r3, [r7, #20]
   return(result);
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036dc:	653b      	str	r3, [r7, #80]	; 0x50
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	3314      	adds	r3, #20
 80036e4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80036e6:	627a      	str	r2, [r7, #36]	; 0x24
 80036e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ea:	6a39      	ldr	r1, [r7, #32]
 80036ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036ee:	e841 2300 	strex	r3, r2, [r1]
 80036f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d1e5      	bne.n	80036c6 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80036fa:	2300      	movs	r3, #0
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3760      	adds	r7, #96	; 0x60
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}
 8003704:	08003309 	.word	0x08003309
 8003708:	0800342f 	.word	0x0800342f
 800370c:	08003465 	.word	0x08003465

08003710 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003710:	b480      	push	{r7}
 8003712:	b089      	sub	sp, #36	; 0x24
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	330c      	adds	r3, #12
 800371e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	e853 3f00 	ldrex	r3, [r3]
 8003726:	60bb      	str	r3, [r7, #8]
   return(result);
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800372e:	61fb      	str	r3, [r7, #28]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	330c      	adds	r3, #12
 8003736:	69fa      	ldr	r2, [r7, #28]
 8003738:	61ba      	str	r2, [r7, #24]
 800373a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800373c:	6979      	ldr	r1, [r7, #20]
 800373e:	69ba      	ldr	r2, [r7, #24]
 8003740:	e841 2300 	strex	r3, r2, [r1]
 8003744:	613b      	str	r3, [r7, #16]
   return(result);
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d1e5      	bne.n	8003718 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2220      	movs	r2, #32
 8003750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8003754:	bf00      	nop
 8003756:	3724      	adds	r7, #36	; 0x24
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr

08003760 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003760:	b480      	push	{r7}
 8003762:	b095      	sub	sp, #84	; 0x54
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	330c      	adds	r3, #12
 800376e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003772:	e853 3f00 	ldrex	r3, [r3]
 8003776:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800377a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800377e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	330c      	adds	r3, #12
 8003786:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003788:	643a      	str	r2, [r7, #64]	; 0x40
 800378a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800378c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800378e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003790:	e841 2300 	strex	r3, r2, [r1]
 8003794:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003798:	2b00      	cmp	r3, #0
 800379a:	d1e5      	bne.n	8003768 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	3314      	adds	r3, #20
 80037a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037a4:	6a3b      	ldr	r3, [r7, #32]
 80037a6:	e853 3f00 	ldrex	r3, [r3]
 80037aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	f023 0301 	bic.w	r3, r3, #1
 80037b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	3314      	adds	r3, #20
 80037ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80037bc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80037be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037c4:	e841 2300 	strex	r3, r2, [r1]
 80037c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80037ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d1e5      	bne.n	800379c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d119      	bne.n	800380c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	330c      	adds	r3, #12
 80037de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	e853 3f00 	ldrex	r3, [r3]
 80037e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	f023 0310 	bic.w	r3, r3, #16
 80037ee:	647b      	str	r3, [r7, #68]	; 0x44
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	330c      	adds	r3, #12
 80037f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80037f8:	61ba      	str	r2, [r7, #24]
 80037fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037fc:	6979      	ldr	r1, [r7, #20]
 80037fe:	69ba      	ldr	r2, [r7, #24]
 8003800:	e841 2300 	strex	r3, r2, [r1]
 8003804:	613b      	str	r3, [r7, #16]
   return(result);
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d1e5      	bne.n	80037d8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2220      	movs	r2, #32
 8003810:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	631a      	str	r2, [r3, #48]	; 0x30
}
 800381a:	bf00      	nop
 800381c:	3754      	adds	r7, #84	; 0x54
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr

08003826 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003826:	b580      	push	{r7, lr}
 8003828:	b084      	sub	sp, #16
 800382a:	af00      	add	r7, sp, #0
 800382c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003832:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2200      	movs	r2, #0
 8003838:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2200      	movs	r2, #0
 800383e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003840:	68f8      	ldr	r0, [r7, #12]
 8003842:	f7ff fd4b 	bl	80032dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003846:	bf00      	nop
 8003848:	3710      	adds	r7, #16
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}

0800384e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800384e:	b480      	push	{r7}
 8003850:	b085      	sub	sp, #20
 8003852:	af00      	add	r7, sp, #0
 8003854:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800385c:	b2db      	uxtb	r3, r3
 800385e:	2b21      	cmp	r3, #33	; 0x21
 8003860:	d13e      	bne.n	80038e0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800386a:	d114      	bne.n	8003896 <UART_Transmit_IT+0x48>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	691b      	ldr	r3, [r3, #16]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d110      	bne.n	8003896 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6a1b      	ldr	r3, [r3, #32]
 8003878:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	881b      	ldrh	r3, [r3, #0]
 800387e:	461a      	mov	r2, r3
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003888:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a1b      	ldr	r3, [r3, #32]
 800388e:	1c9a      	adds	r2, r3, #2
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	621a      	str	r2, [r3, #32]
 8003894:	e008      	b.n	80038a8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6a1b      	ldr	r3, [r3, #32]
 800389a:	1c59      	adds	r1, r3, #1
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	6211      	str	r1, [r2, #32]
 80038a0:	781a      	ldrb	r2, [r3, #0]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	3b01      	subs	r3, #1
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	687a      	ldr	r2, [r7, #4]
 80038b4:	4619      	mov	r1, r3
 80038b6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d10f      	bne.n	80038dc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	68da      	ldr	r2, [r3, #12]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80038ca:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	68da      	ldr	r2, [r3, #12]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80038da:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80038dc:	2300      	movs	r3, #0
 80038de:	e000      	b.n	80038e2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80038e0:	2302      	movs	r3, #2
  }
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3714      	adds	r7, #20
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr

080038ee <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80038ee:	b580      	push	{r7, lr}
 80038f0:	b082      	sub	sp, #8
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	68da      	ldr	r2, [r3, #12]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003904:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2220      	movs	r2, #32
 800390a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f7ff fcd0 	bl	80032b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003914:	2300      	movs	r3, #0
}
 8003916:	4618      	mov	r0, r3
 8003918:	3708      	adds	r7, #8
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}

0800391e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800391e:	b580      	push	{r7, lr}
 8003920:	b08c      	sub	sp, #48	; 0x30
 8003922:	af00      	add	r7, sp, #0
 8003924:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800392c:	b2db      	uxtb	r3, r3
 800392e:	2b22      	cmp	r3, #34	; 0x22
 8003930:	f040 80ab 	bne.w	8003a8a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800393c:	d117      	bne.n	800396e <UART_Receive_IT+0x50>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	691b      	ldr	r3, [r3, #16]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d113      	bne.n	800396e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003946:	2300      	movs	r3, #0
 8003948:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800394e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	b29b      	uxth	r3, r3
 8003958:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800395c:	b29a      	uxth	r2, r3
 800395e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003960:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003966:	1c9a      	adds	r2, r3, #2
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	629a      	str	r2, [r3, #40]	; 0x28
 800396c:	e026      	b.n	80039bc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003972:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003974:	2300      	movs	r3, #0
 8003976:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003980:	d007      	beq.n	8003992 <UART_Receive_IT+0x74>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d10a      	bne.n	80039a0 <UART_Receive_IT+0x82>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	691b      	ldr	r3, [r3, #16]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d106      	bne.n	80039a0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	b2da      	uxtb	r2, r3
 800399a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800399c:	701a      	strb	r2, [r3, #0]
 800399e:	e008      	b.n	80039b2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039ac:	b2da      	uxtb	r2, r3
 80039ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039b0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b6:	1c5a      	adds	r2, r3, #1
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	3b01      	subs	r3, #1
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	4619      	mov	r1, r3
 80039ca:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d15a      	bne.n	8003a86 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	68da      	ldr	r2, [r3, #12]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f022 0220 	bic.w	r2, r2, #32
 80039de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	68da      	ldr	r2, [r3, #12]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	695a      	ldr	r2, [r3, #20]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f022 0201 	bic.w	r2, r2, #1
 80039fe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2220      	movs	r2, #32
 8003a04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d135      	bne.n	8003a7c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	330c      	adds	r3, #12
 8003a1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	e853 3f00 	ldrex	r3, [r3]
 8003a24:	613b      	str	r3, [r7, #16]
   return(result);
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	f023 0310 	bic.w	r3, r3, #16
 8003a2c:	627b      	str	r3, [r7, #36]	; 0x24
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	330c      	adds	r3, #12
 8003a34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a36:	623a      	str	r2, [r7, #32]
 8003a38:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a3a:	69f9      	ldr	r1, [r7, #28]
 8003a3c:	6a3a      	ldr	r2, [r7, #32]
 8003a3e:	e841 2300 	strex	r3, r2, [r1]
 8003a42:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a44:	69bb      	ldr	r3, [r7, #24]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d1e5      	bne.n	8003a16 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 0310 	and.w	r3, r3, #16
 8003a54:	2b10      	cmp	r3, #16
 8003a56:	d10a      	bne.n	8003a6e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a58:	2300      	movs	r3, #0
 8003a5a:	60fb      	str	r3, [r7, #12]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	60fb      	str	r3, [r7, #12]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	60fb      	str	r3, [r7, #12]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003a72:	4619      	mov	r1, r3
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f7ff fc3b 	bl	80032f0 <HAL_UARTEx_RxEventCallback>
 8003a7a:	e002      	b.n	8003a82 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f7fc fd7f 	bl	8000580 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003a82:	2300      	movs	r3, #0
 8003a84:	e002      	b.n	8003a8c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003a86:	2300      	movs	r3, #0
 8003a88:	e000      	b.n	8003a8c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003a8a:	2302      	movs	r3, #2
  }
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3730      	adds	r7, #48	; 0x30
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}

08003a94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a98:	b0c0      	sub	sp, #256	; 0x100
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003aa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	691b      	ldr	r3, [r3, #16]
 8003aa8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ab0:	68d9      	ldr	r1, [r3, #12]
 8003ab2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	ea40 0301 	orr.w	r3, r0, r1
 8003abc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003abe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ac2:	689a      	ldr	r2, [r3, #8]
 8003ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ac8:	691b      	ldr	r3, [r3, #16]
 8003aca:	431a      	orrs	r2, r3
 8003acc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ad0:	695b      	ldr	r3, [r3, #20]
 8003ad2:	431a      	orrs	r2, r3
 8003ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ad8:	69db      	ldr	r3, [r3, #28]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003aec:	f021 010c 	bic.w	r1, r1, #12
 8003af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003afa:	430b      	orrs	r3, r1
 8003afc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003afe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	695b      	ldr	r3, [r3, #20]
 8003b06:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003b0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b0e:	6999      	ldr	r1, [r3, #24]
 8003b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	ea40 0301 	orr.w	r3, r0, r1
 8003b1a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	4b8f      	ldr	r3, [pc, #572]	; (8003d60 <UART_SetConfig+0x2cc>)
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d005      	beq.n	8003b34 <UART_SetConfig+0xa0>
 8003b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	4b8d      	ldr	r3, [pc, #564]	; (8003d64 <UART_SetConfig+0x2d0>)
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d104      	bne.n	8003b3e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003b34:	f7ff f80c 	bl	8002b50 <HAL_RCC_GetPCLK2Freq>
 8003b38:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003b3c:	e003      	b.n	8003b46 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003b3e:	f7fe fff3 	bl	8002b28 <HAL_RCC_GetPCLK1Freq>
 8003b42:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b4a:	69db      	ldr	r3, [r3, #28]
 8003b4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b50:	f040 810c 	bne.w	8003d6c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003b5e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003b62:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003b66:	4622      	mov	r2, r4
 8003b68:	462b      	mov	r3, r5
 8003b6a:	1891      	adds	r1, r2, r2
 8003b6c:	65b9      	str	r1, [r7, #88]	; 0x58
 8003b6e:	415b      	adcs	r3, r3
 8003b70:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b72:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003b76:	4621      	mov	r1, r4
 8003b78:	eb12 0801 	adds.w	r8, r2, r1
 8003b7c:	4629      	mov	r1, r5
 8003b7e:	eb43 0901 	adc.w	r9, r3, r1
 8003b82:	f04f 0200 	mov.w	r2, #0
 8003b86:	f04f 0300 	mov.w	r3, #0
 8003b8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b96:	4690      	mov	r8, r2
 8003b98:	4699      	mov	r9, r3
 8003b9a:	4623      	mov	r3, r4
 8003b9c:	eb18 0303 	adds.w	r3, r8, r3
 8003ba0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003ba4:	462b      	mov	r3, r5
 8003ba6:	eb49 0303 	adc.w	r3, r9, r3
 8003baa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003bae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003bba:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003bbe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003bc2:	460b      	mov	r3, r1
 8003bc4:	18db      	adds	r3, r3, r3
 8003bc6:	653b      	str	r3, [r7, #80]	; 0x50
 8003bc8:	4613      	mov	r3, r2
 8003bca:	eb42 0303 	adc.w	r3, r2, r3
 8003bce:	657b      	str	r3, [r7, #84]	; 0x54
 8003bd0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003bd4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003bd8:	f7fc faf6 	bl	80001c8 <__aeabi_uldivmod>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	460b      	mov	r3, r1
 8003be0:	4b61      	ldr	r3, [pc, #388]	; (8003d68 <UART_SetConfig+0x2d4>)
 8003be2:	fba3 2302 	umull	r2, r3, r3, r2
 8003be6:	095b      	lsrs	r3, r3, #5
 8003be8:	011c      	lsls	r4, r3, #4
 8003bea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003bf4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003bf8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003bfc:	4642      	mov	r2, r8
 8003bfe:	464b      	mov	r3, r9
 8003c00:	1891      	adds	r1, r2, r2
 8003c02:	64b9      	str	r1, [r7, #72]	; 0x48
 8003c04:	415b      	adcs	r3, r3
 8003c06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c08:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003c0c:	4641      	mov	r1, r8
 8003c0e:	eb12 0a01 	adds.w	sl, r2, r1
 8003c12:	4649      	mov	r1, r9
 8003c14:	eb43 0b01 	adc.w	fp, r3, r1
 8003c18:	f04f 0200 	mov.w	r2, #0
 8003c1c:	f04f 0300 	mov.w	r3, #0
 8003c20:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003c24:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003c28:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c2c:	4692      	mov	sl, r2
 8003c2e:	469b      	mov	fp, r3
 8003c30:	4643      	mov	r3, r8
 8003c32:	eb1a 0303 	adds.w	r3, sl, r3
 8003c36:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003c3a:	464b      	mov	r3, r9
 8003c3c:	eb4b 0303 	adc.w	r3, fp, r3
 8003c40:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003c50:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003c54:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003c58:	460b      	mov	r3, r1
 8003c5a:	18db      	adds	r3, r3, r3
 8003c5c:	643b      	str	r3, [r7, #64]	; 0x40
 8003c5e:	4613      	mov	r3, r2
 8003c60:	eb42 0303 	adc.w	r3, r2, r3
 8003c64:	647b      	str	r3, [r7, #68]	; 0x44
 8003c66:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003c6a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003c6e:	f7fc faab 	bl	80001c8 <__aeabi_uldivmod>
 8003c72:	4602      	mov	r2, r0
 8003c74:	460b      	mov	r3, r1
 8003c76:	4611      	mov	r1, r2
 8003c78:	4b3b      	ldr	r3, [pc, #236]	; (8003d68 <UART_SetConfig+0x2d4>)
 8003c7a:	fba3 2301 	umull	r2, r3, r3, r1
 8003c7e:	095b      	lsrs	r3, r3, #5
 8003c80:	2264      	movs	r2, #100	; 0x64
 8003c82:	fb02 f303 	mul.w	r3, r2, r3
 8003c86:	1acb      	subs	r3, r1, r3
 8003c88:	00db      	lsls	r3, r3, #3
 8003c8a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003c8e:	4b36      	ldr	r3, [pc, #216]	; (8003d68 <UART_SetConfig+0x2d4>)
 8003c90:	fba3 2302 	umull	r2, r3, r3, r2
 8003c94:	095b      	lsrs	r3, r3, #5
 8003c96:	005b      	lsls	r3, r3, #1
 8003c98:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003c9c:	441c      	add	r4, r3
 8003c9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003ca8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003cac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003cb0:	4642      	mov	r2, r8
 8003cb2:	464b      	mov	r3, r9
 8003cb4:	1891      	adds	r1, r2, r2
 8003cb6:	63b9      	str	r1, [r7, #56]	; 0x38
 8003cb8:	415b      	adcs	r3, r3
 8003cba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cbc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003cc0:	4641      	mov	r1, r8
 8003cc2:	1851      	adds	r1, r2, r1
 8003cc4:	6339      	str	r1, [r7, #48]	; 0x30
 8003cc6:	4649      	mov	r1, r9
 8003cc8:	414b      	adcs	r3, r1
 8003cca:	637b      	str	r3, [r7, #52]	; 0x34
 8003ccc:	f04f 0200 	mov.w	r2, #0
 8003cd0:	f04f 0300 	mov.w	r3, #0
 8003cd4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003cd8:	4659      	mov	r1, fp
 8003cda:	00cb      	lsls	r3, r1, #3
 8003cdc:	4651      	mov	r1, sl
 8003cde:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ce2:	4651      	mov	r1, sl
 8003ce4:	00ca      	lsls	r2, r1, #3
 8003ce6:	4610      	mov	r0, r2
 8003ce8:	4619      	mov	r1, r3
 8003cea:	4603      	mov	r3, r0
 8003cec:	4642      	mov	r2, r8
 8003cee:	189b      	adds	r3, r3, r2
 8003cf0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003cf4:	464b      	mov	r3, r9
 8003cf6:	460a      	mov	r2, r1
 8003cf8:	eb42 0303 	adc.w	r3, r2, r3
 8003cfc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003d0c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003d10:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003d14:	460b      	mov	r3, r1
 8003d16:	18db      	adds	r3, r3, r3
 8003d18:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d1a:	4613      	mov	r3, r2
 8003d1c:	eb42 0303 	adc.w	r3, r2, r3
 8003d20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d22:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003d26:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003d2a:	f7fc fa4d 	bl	80001c8 <__aeabi_uldivmod>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	460b      	mov	r3, r1
 8003d32:	4b0d      	ldr	r3, [pc, #52]	; (8003d68 <UART_SetConfig+0x2d4>)
 8003d34:	fba3 1302 	umull	r1, r3, r3, r2
 8003d38:	095b      	lsrs	r3, r3, #5
 8003d3a:	2164      	movs	r1, #100	; 0x64
 8003d3c:	fb01 f303 	mul.w	r3, r1, r3
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	00db      	lsls	r3, r3, #3
 8003d44:	3332      	adds	r3, #50	; 0x32
 8003d46:	4a08      	ldr	r2, [pc, #32]	; (8003d68 <UART_SetConfig+0x2d4>)
 8003d48:	fba2 2303 	umull	r2, r3, r2, r3
 8003d4c:	095b      	lsrs	r3, r3, #5
 8003d4e:	f003 0207 	and.w	r2, r3, #7
 8003d52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4422      	add	r2, r4
 8003d5a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003d5c:	e105      	b.n	8003f6a <UART_SetConfig+0x4d6>
 8003d5e:	bf00      	nop
 8003d60:	40011000 	.word	0x40011000
 8003d64:	40011400 	.word	0x40011400
 8003d68:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d70:	2200      	movs	r2, #0
 8003d72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003d76:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003d7a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003d7e:	4642      	mov	r2, r8
 8003d80:	464b      	mov	r3, r9
 8003d82:	1891      	adds	r1, r2, r2
 8003d84:	6239      	str	r1, [r7, #32]
 8003d86:	415b      	adcs	r3, r3
 8003d88:	627b      	str	r3, [r7, #36]	; 0x24
 8003d8a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003d8e:	4641      	mov	r1, r8
 8003d90:	1854      	adds	r4, r2, r1
 8003d92:	4649      	mov	r1, r9
 8003d94:	eb43 0501 	adc.w	r5, r3, r1
 8003d98:	f04f 0200 	mov.w	r2, #0
 8003d9c:	f04f 0300 	mov.w	r3, #0
 8003da0:	00eb      	lsls	r3, r5, #3
 8003da2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003da6:	00e2      	lsls	r2, r4, #3
 8003da8:	4614      	mov	r4, r2
 8003daa:	461d      	mov	r5, r3
 8003dac:	4643      	mov	r3, r8
 8003dae:	18e3      	adds	r3, r4, r3
 8003db0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003db4:	464b      	mov	r3, r9
 8003db6:	eb45 0303 	adc.w	r3, r5, r3
 8003dba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003dbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003dca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003dce:	f04f 0200 	mov.w	r2, #0
 8003dd2:	f04f 0300 	mov.w	r3, #0
 8003dd6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003dda:	4629      	mov	r1, r5
 8003ddc:	008b      	lsls	r3, r1, #2
 8003dde:	4621      	mov	r1, r4
 8003de0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003de4:	4621      	mov	r1, r4
 8003de6:	008a      	lsls	r2, r1, #2
 8003de8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003dec:	f7fc f9ec 	bl	80001c8 <__aeabi_uldivmod>
 8003df0:	4602      	mov	r2, r0
 8003df2:	460b      	mov	r3, r1
 8003df4:	4b60      	ldr	r3, [pc, #384]	; (8003f78 <UART_SetConfig+0x4e4>)
 8003df6:	fba3 2302 	umull	r2, r3, r3, r2
 8003dfa:	095b      	lsrs	r3, r3, #5
 8003dfc:	011c      	lsls	r4, r3, #4
 8003dfe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e02:	2200      	movs	r2, #0
 8003e04:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003e08:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003e0c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003e10:	4642      	mov	r2, r8
 8003e12:	464b      	mov	r3, r9
 8003e14:	1891      	adds	r1, r2, r2
 8003e16:	61b9      	str	r1, [r7, #24]
 8003e18:	415b      	adcs	r3, r3
 8003e1a:	61fb      	str	r3, [r7, #28]
 8003e1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e20:	4641      	mov	r1, r8
 8003e22:	1851      	adds	r1, r2, r1
 8003e24:	6139      	str	r1, [r7, #16]
 8003e26:	4649      	mov	r1, r9
 8003e28:	414b      	adcs	r3, r1
 8003e2a:	617b      	str	r3, [r7, #20]
 8003e2c:	f04f 0200 	mov.w	r2, #0
 8003e30:	f04f 0300 	mov.w	r3, #0
 8003e34:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e38:	4659      	mov	r1, fp
 8003e3a:	00cb      	lsls	r3, r1, #3
 8003e3c:	4651      	mov	r1, sl
 8003e3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e42:	4651      	mov	r1, sl
 8003e44:	00ca      	lsls	r2, r1, #3
 8003e46:	4610      	mov	r0, r2
 8003e48:	4619      	mov	r1, r3
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	4642      	mov	r2, r8
 8003e4e:	189b      	adds	r3, r3, r2
 8003e50:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003e54:	464b      	mov	r3, r9
 8003e56:	460a      	mov	r2, r1
 8003e58:	eb42 0303 	adc.w	r3, r2, r3
 8003e5c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	67bb      	str	r3, [r7, #120]	; 0x78
 8003e6a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003e6c:	f04f 0200 	mov.w	r2, #0
 8003e70:	f04f 0300 	mov.w	r3, #0
 8003e74:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003e78:	4649      	mov	r1, r9
 8003e7a:	008b      	lsls	r3, r1, #2
 8003e7c:	4641      	mov	r1, r8
 8003e7e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e82:	4641      	mov	r1, r8
 8003e84:	008a      	lsls	r2, r1, #2
 8003e86:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003e8a:	f7fc f99d 	bl	80001c8 <__aeabi_uldivmod>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	460b      	mov	r3, r1
 8003e92:	4b39      	ldr	r3, [pc, #228]	; (8003f78 <UART_SetConfig+0x4e4>)
 8003e94:	fba3 1302 	umull	r1, r3, r3, r2
 8003e98:	095b      	lsrs	r3, r3, #5
 8003e9a:	2164      	movs	r1, #100	; 0x64
 8003e9c:	fb01 f303 	mul.w	r3, r1, r3
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	011b      	lsls	r3, r3, #4
 8003ea4:	3332      	adds	r3, #50	; 0x32
 8003ea6:	4a34      	ldr	r2, [pc, #208]	; (8003f78 <UART_SetConfig+0x4e4>)
 8003ea8:	fba2 2303 	umull	r2, r3, r2, r3
 8003eac:	095b      	lsrs	r3, r3, #5
 8003eae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003eb2:	441c      	add	r4, r3
 8003eb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003eb8:	2200      	movs	r2, #0
 8003eba:	673b      	str	r3, [r7, #112]	; 0x70
 8003ebc:	677a      	str	r2, [r7, #116]	; 0x74
 8003ebe:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003ec2:	4642      	mov	r2, r8
 8003ec4:	464b      	mov	r3, r9
 8003ec6:	1891      	adds	r1, r2, r2
 8003ec8:	60b9      	str	r1, [r7, #8]
 8003eca:	415b      	adcs	r3, r3
 8003ecc:	60fb      	str	r3, [r7, #12]
 8003ece:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ed2:	4641      	mov	r1, r8
 8003ed4:	1851      	adds	r1, r2, r1
 8003ed6:	6039      	str	r1, [r7, #0]
 8003ed8:	4649      	mov	r1, r9
 8003eda:	414b      	adcs	r3, r1
 8003edc:	607b      	str	r3, [r7, #4]
 8003ede:	f04f 0200 	mov.w	r2, #0
 8003ee2:	f04f 0300 	mov.w	r3, #0
 8003ee6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003eea:	4659      	mov	r1, fp
 8003eec:	00cb      	lsls	r3, r1, #3
 8003eee:	4651      	mov	r1, sl
 8003ef0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ef4:	4651      	mov	r1, sl
 8003ef6:	00ca      	lsls	r2, r1, #3
 8003ef8:	4610      	mov	r0, r2
 8003efa:	4619      	mov	r1, r3
 8003efc:	4603      	mov	r3, r0
 8003efe:	4642      	mov	r2, r8
 8003f00:	189b      	adds	r3, r3, r2
 8003f02:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f04:	464b      	mov	r3, r9
 8003f06:	460a      	mov	r2, r1
 8003f08:	eb42 0303 	adc.w	r3, r2, r3
 8003f0c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	2200      	movs	r2, #0
 8003f16:	663b      	str	r3, [r7, #96]	; 0x60
 8003f18:	667a      	str	r2, [r7, #100]	; 0x64
 8003f1a:	f04f 0200 	mov.w	r2, #0
 8003f1e:	f04f 0300 	mov.w	r3, #0
 8003f22:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003f26:	4649      	mov	r1, r9
 8003f28:	008b      	lsls	r3, r1, #2
 8003f2a:	4641      	mov	r1, r8
 8003f2c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f30:	4641      	mov	r1, r8
 8003f32:	008a      	lsls	r2, r1, #2
 8003f34:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003f38:	f7fc f946 	bl	80001c8 <__aeabi_uldivmod>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	460b      	mov	r3, r1
 8003f40:	4b0d      	ldr	r3, [pc, #52]	; (8003f78 <UART_SetConfig+0x4e4>)
 8003f42:	fba3 1302 	umull	r1, r3, r3, r2
 8003f46:	095b      	lsrs	r3, r3, #5
 8003f48:	2164      	movs	r1, #100	; 0x64
 8003f4a:	fb01 f303 	mul.w	r3, r1, r3
 8003f4e:	1ad3      	subs	r3, r2, r3
 8003f50:	011b      	lsls	r3, r3, #4
 8003f52:	3332      	adds	r3, #50	; 0x32
 8003f54:	4a08      	ldr	r2, [pc, #32]	; (8003f78 <UART_SetConfig+0x4e4>)
 8003f56:	fba2 2303 	umull	r2, r3, r2, r3
 8003f5a:	095b      	lsrs	r3, r3, #5
 8003f5c:	f003 020f 	and.w	r2, r3, #15
 8003f60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4422      	add	r2, r4
 8003f68:	609a      	str	r2, [r3, #8]
}
 8003f6a:	bf00      	nop
 8003f6c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003f70:	46bd      	mov	sp, r7
 8003f72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f76:	bf00      	nop
 8003f78:	51eb851f 	.word	0x51eb851f

08003f7c <__libc_init_array>:
 8003f7c:	b570      	push	{r4, r5, r6, lr}
 8003f7e:	4d0d      	ldr	r5, [pc, #52]	; (8003fb4 <__libc_init_array+0x38>)
 8003f80:	4c0d      	ldr	r4, [pc, #52]	; (8003fb8 <__libc_init_array+0x3c>)
 8003f82:	1b64      	subs	r4, r4, r5
 8003f84:	10a4      	asrs	r4, r4, #2
 8003f86:	2600      	movs	r6, #0
 8003f88:	42a6      	cmp	r6, r4
 8003f8a:	d109      	bne.n	8003fa0 <__libc_init_array+0x24>
 8003f8c:	4d0b      	ldr	r5, [pc, #44]	; (8003fbc <__libc_init_array+0x40>)
 8003f8e:	4c0c      	ldr	r4, [pc, #48]	; (8003fc0 <__libc_init_array+0x44>)
 8003f90:	f000 f82e 	bl	8003ff0 <_init>
 8003f94:	1b64      	subs	r4, r4, r5
 8003f96:	10a4      	asrs	r4, r4, #2
 8003f98:	2600      	movs	r6, #0
 8003f9a:	42a6      	cmp	r6, r4
 8003f9c:	d105      	bne.n	8003faa <__libc_init_array+0x2e>
 8003f9e:	bd70      	pop	{r4, r5, r6, pc}
 8003fa0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fa4:	4798      	blx	r3
 8003fa6:	3601      	adds	r6, #1
 8003fa8:	e7ee      	b.n	8003f88 <__libc_init_array+0xc>
 8003faa:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fae:	4798      	blx	r3
 8003fb0:	3601      	adds	r6, #1
 8003fb2:	e7f2      	b.n	8003f9a <__libc_init_array+0x1e>
 8003fb4:	08004030 	.word	0x08004030
 8003fb8:	08004030 	.word	0x08004030
 8003fbc:	08004030 	.word	0x08004030
 8003fc0:	08004034 	.word	0x08004034

08003fc4 <memcpy>:
 8003fc4:	440a      	add	r2, r1
 8003fc6:	4291      	cmp	r1, r2
 8003fc8:	f100 33ff 	add.w	r3, r0, #4294967295
 8003fcc:	d100      	bne.n	8003fd0 <memcpy+0xc>
 8003fce:	4770      	bx	lr
 8003fd0:	b510      	push	{r4, lr}
 8003fd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003fd6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003fda:	4291      	cmp	r1, r2
 8003fdc:	d1f9      	bne.n	8003fd2 <memcpy+0xe>
 8003fde:	bd10      	pop	{r4, pc}

08003fe0 <memset>:
 8003fe0:	4402      	add	r2, r0
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d100      	bne.n	8003fea <memset+0xa>
 8003fe8:	4770      	bx	lr
 8003fea:	f803 1b01 	strb.w	r1, [r3], #1
 8003fee:	e7f9      	b.n	8003fe4 <memset+0x4>

08003ff0 <_init>:
 8003ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ff2:	bf00      	nop
 8003ff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ff6:	bc08      	pop	{r3}
 8003ff8:	469e      	mov	lr, r3
 8003ffa:	4770      	bx	lr

08003ffc <_fini>:
 8003ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ffe:	bf00      	nop
 8004000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004002:	bc08      	pop	{r3}
 8004004:	469e      	mov	lr, r3
 8004006:	4770      	bx	lr
